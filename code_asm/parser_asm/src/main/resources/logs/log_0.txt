LOGGER(FilesFounder[found_all_files]): Scanning directories
LOGGER(FilesFounder[found_all_files]): Scanning conditional
LOGGER(FilesFounder[found_all_files]): Scanning branch.s
LOGGER(FilesFounder[found_all_files]): Scanning data_processing
LOGGER(FilesFounder[found_all_files]): Scanning 1-4_instructions.s
LOGGER(FilesFounder[found_all_files]): Scanning 11-12_instructions.s
LOGGER(FilesFounder[found_all_files]): Scanning 13-16_instructions.s
LOGGER(FilesFounder[found_all_files]): Scanning 5-10_instructions.s
LOGGER(FilesFounder[found_all_files]): Scanning load_store
LOGGER(FilesFounder[found_all_files]): Scanning load_store.s
LOGGER(FilesFounder[found_all_files]): Scanning miscellaneous
LOGGER(FilesFounder[found_all_files]): Scanning sp.s
LOGGER(FilesFounder[found_all_files]): Scanning other
LOGGER(FilesFounder[found_all_files]): Scanning 512Bank.s
LOGGER(FilesFounder[found_all_files]): Scanning calckeyb.s
LOGGER(FilesFounder[found_all_files]): Scanning calculator.s
LOGGER(FilesFounder[found_all_files]): Scanning default_example.s
LOGGER(FilesFounder[found_all_files]): Scanning simple_add.s
LOGGER(FilesFounder[found_all_files]): Scanning test.s
LOGGER(FilesFounder[found_all_files]): Scanning testfp.s
LOGGER(FilesFounder[found_all_files]): Scanning tty.s
LOGGER(FilesFounder[found_all_files]): Scanning shift_add_sub_mov
LOGGER(FilesFounder[found_all_files]): Scanning 1-4_instructions.s
LOGGER(FilesFounder[found_all_files]): Scanning 5-8_instructions.s
LOGGER(FilesFounder[found_file_from_number]): Found files from numbers ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16']
LOGGER(FilesFounder[found_file_from_number]): Found 0 branch.s from number 0
LOGGER(FilesFounder[found_file_from_number]): Found 1 1-4_instructions.s from number 0
LOGGER(FilesFounder[found_file_from_number]): Found 2 11-12_instructions.s from number 0
LOGGER(FilesFounder[found_file_from_number]): Found 3 13-16_instructions.s from number 0
LOGGER(FilesFounder[found_file_from_number]): Found 4 5-10_instructions.s from number 0
LOGGER(FilesFounder[found_file_from_number]): Found 5 load_store.s from number 0
LOGGER(FilesFounder[found_file_from_number]): Found 6 sp.s from number 0
LOGGER(FilesFounder[found_file_from_number]): Found 7 512Bank.s from number 0
LOGGER(FilesFounder[found_file_from_number]): Found 8 calckeyb.s from number 0
LOGGER(FilesFounder[found_file_from_number]): Found 9 calculator.s from number 0
LOGGER(FilesFounder[found_file_from_number]): Found 10 default_example.s from number 0
LOGGER(FilesFounder[found_file_from_number]): Found 11 simple_add.s from number 0
LOGGER(FilesFounder[found_file_from_number]): Found 12 test.s from number 0
LOGGER(FilesFounder[found_file_from_number]): Found 13 testfp.s from number 0
LOGGER(FilesFounder[found_file_from_number]): Found 14 tty.s from number 0
LOGGER(FilesFounder[found_file_from_number]): Found 15 1-4_instructions.s from number 0
LOGGER(FilesFounder[found_file_from_number]): Found 16 5-8_instructions.s from number 0
LOGGER(FilesFounder[found_file_from_number]): Found 0 branch.s from number 1
LOGGER(FilesFounder[found_file_from_number]): Found 1 1-4_instructions.s from number 1
LOGGER(FilesFounder[found_file_from_number]): Found 2 11-12_instructions.s from number 1
LOGGER(FilesFounder[found_file_from_number]): Found 3 13-16_instructions.s from number 1
LOGGER(FilesFounder[found_file_from_number]): Found 4 5-10_instructions.s from number 1
LOGGER(FilesFounder[found_file_from_number]): Found 5 load_store.s from number 1
LOGGER(FilesFounder[found_file_from_number]): Found 6 sp.s from number 1
LOGGER(FilesFounder[found_file_from_number]): Found 7 512Bank.s from number 1
LOGGER(FilesFounder[found_file_from_number]): Found 8 calckeyb.s from number 1
LOGGER(FilesFounder[found_file_from_number]): Found 9 calculator.s from number 1
LOGGER(FilesFounder[found_file_from_number]): Found 10 default_example.s from number 1
LOGGER(FilesFounder[found_file_from_number]): Found 11 simple_add.s from number 1
LOGGER(FilesFounder[found_file_from_number]): Found 12 test.s from number 1
LOGGER(FilesFounder[found_file_from_number]): Found 13 testfp.s from number 1
LOGGER(FilesFounder[found_file_from_number]): Found 14 tty.s from number 1
LOGGER(FilesFounder[found_file_from_number]): Found 15 1-4_instructions.s from number 1
LOGGER(FilesFounder[found_file_from_number]): Found 16 5-8_instructions.s from number 1
LOGGER(FilesFounder[found_file_from_number]): Found 0 branch.s from number 2
LOGGER(FilesFounder[found_file_from_number]): Found 1 1-4_instructions.s from number 2
LOGGER(FilesFounder[found_file_from_number]): Found 2 11-12_instructions.s from number 2
LOGGER(FilesFounder[found_file_from_number]): Found 3 13-16_instructions.s from number 2
LOGGER(FilesFounder[found_file_from_number]): Found 4 5-10_instructions.s from number 2
LOGGER(FilesFounder[found_file_from_number]): Found 5 load_store.s from number 2
LOGGER(FilesFounder[found_file_from_number]): Found 6 sp.s from number 2
LOGGER(FilesFounder[found_file_from_number]): Found 7 512Bank.s from number 2
LOGGER(FilesFounder[found_file_from_number]): Found 8 calckeyb.s from number 2
LOGGER(FilesFounder[found_file_from_number]): Found 9 calculator.s from number 2
LOGGER(FilesFounder[found_file_from_number]): Found 10 default_example.s from number 2
LOGGER(FilesFounder[found_file_from_number]): Found 11 simple_add.s from number 2
LOGGER(FilesFounder[found_file_from_number]): Found 12 test.s from number 2
LOGGER(FilesFounder[found_file_from_number]): Found 13 testfp.s from number 2
LOGGER(FilesFounder[found_file_from_number]): Found 14 tty.s from number 2
LOGGER(FilesFounder[found_file_from_number]): Found 15 1-4_instructions.s from number 2
LOGGER(FilesFounder[found_file_from_number]): Found 16 5-8_instructions.s from number 2
LOGGER(FilesFounder[found_file_from_number]): Found 0 branch.s from number 3
LOGGER(FilesFounder[found_file_from_number]): Found 1 1-4_instructions.s from number 3
LOGGER(FilesFounder[found_file_from_number]): Found 2 11-12_instructions.s from number 3
LOGGER(FilesFounder[found_file_from_number]): Found 3 13-16_instructions.s from number 3
LOGGER(FilesFounder[found_file_from_number]): Found 4 5-10_instructions.s from number 3
LOGGER(FilesFounder[found_file_from_number]): Found 5 load_store.s from number 3
LOGGER(FilesFounder[found_file_from_number]): Found 6 sp.s from number 3
LOGGER(FilesFounder[found_file_from_number]): Found 7 512Bank.s from number 3
LOGGER(FilesFounder[found_file_from_number]): Found 8 calckeyb.s from number 3
LOGGER(FilesFounder[found_file_from_number]): Found 9 calculator.s from number 3
LOGGER(FilesFounder[found_file_from_number]): Found 10 default_example.s from number 3
LOGGER(FilesFounder[found_file_from_number]): Found 11 simple_add.s from number 3
LOGGER(FilesFounder[found_file_from_number]): Found 12 test.s from number 3
LOGGER(FilesFounder[found_file_from_number]): Found 13 testfp.s from number 3
LOGGER(FilesFounder[found_file_from_number]): Found 14 tty.s from number 3
LOGGER(FilesFounder[found_file_from_number]): Found 15 1-4_instructions.s from number 3
LOGGER(FilesFounder[found_file_from_number]): Found 16 5-8_instructions.s from number 3
LOGGER(FilesFounder[found_file_from_number]): Found 0 branch.s from number 4
LOGGER(FilesFounder[found_file_from_number]): Found 1 1-4_instructions.s from number 4
LOGGER(FilesFounder[found_file_from_number]): Found 2 11-12_instructions.s from number 4
LOGGER(FilesFounder[found_file_from_number]): Found 3 13-16_instructions.s from number 4
LOGGER(FilesFounder[found_file_from_number]): Found 4 5-10_instructions.s from number 4
LOGGER(FilesFounder[found_file_from_number]): Found 5 load_store.s from number 4
LOGGER(FilesFounder[found_file_from_number]): Found 6 sp.s from number 4
LOGGER(FilesFounder[found_file_from_number]): Found 7 512Bank.s from number 4
LOGGER(FilesFounder[found_file_from_number]): Found 8 calckeyb.s from number 4
LOGGER(FilesFounder[found_file_from_number]): Found 9 calculator.s from number 4
LOGGER(FilesFounder[found_file_from_number]): Found 10 default_example.s from number 4
LOGGER(FilesFounder[found_file_from_number]): Found 11 simple_add.s from number 4
LOGGER(FilesFounder[found_file_from_number]): Found 12 test.s from number 4
LOGGER(FilesFounder[found_file_from_number]): Found 13 testfp.s from number 4
LOGGER(FilesFounder[found_file_from_number]): Found 14 tty.s from number 4
LOGGER(FilesFounder[found_file_from_number]): Found 15 1-4_instructions.s from number 4
LOGGER(FilesFounder[found_file_from_number]): Found 16 5-8_instructions.s from number 4
LOGGER(FilesFounder[found_file_from_number]): Found 0 branch.s from number 5
LOGGER(FilesFounder[found_file_from_number]): Found 1 1-4_instructions.s from number 5
LOGGER(FilesFounder[found_file_from_number]): Found 2 11-12_instructions.s from number 5
LOGGER(FilesFounder[found_file_from_number]): Found 3 13-16_instructions.s from number 5
LOGGER(FilesFounder[found_file_from_number]): Found 4 5-10_instructions.s from number 5
LOGGER(FilesFounder[found_file_from_number]): Found 5 load_store.s from number 5
LOGGER(FilesFounder[found_file_from_number]): Found 6 sp.s from number 5
LOGGER(FilesFounder[found_file_from_number]): Found 7 512Bank.s from number 5
LOGGER(FilesFounder[found_file_from_number]): Found 8 calckeyb.s from number 5
LOGGER(FilesFounder[found_file_from_number]): Found 9 calculator.s from number 5
LOGGER(FilesFounder[found_file_from_number]): Found 10 default_example.s from number 5
LOGGER(FilesFounder[found_file_from_number]): Found 11 simple_add.s from number 5
LOGGER(FilesFounder[found_file_from_number]): Found 12 test.s from number 5
LOGGER(FilesFounder[found_file_from_number]): Found 13 testfp.s from number 5
LOGGER(FilesFounder[found_file_from_number]): Found 14 tty.s from number 5
LOGGER(FilesFounder[found_file_from_number]): Found 15 1-4_instructions.s from number 5
LOGGER(FilesFounder[found_file_from_number]): Found 16 5-8_instructions.s from number 5
LOGGER(FilesFounder[found_file_from_number]): Found 0 branch.s from number 6
LOGGER(FilesFounder[found_file_from_number]): Found 1 1-4_instructions.s from number 6
LOGGER(FilesFounder[found_file_from_number]): Found 2 11-12_instructions.s from number 6
LOGGER(FilesFounder[found_file_from_number]): Found 3 13-16_instructions.s from number 6
LOGGER(FilesFounder[found_file_from_number]): Found 4 5-10_instructions.s from number 6
LOGGER(FilesFounder[found_file_from_number]): Found 5 load_store.s from number 6
LOGGER(FilesFounder[found_file_from_number]): Found 6 sp.s from number 6
LOGGER(FilesFounder[found_file_from_number]): Found 7 512Bank.s from number 6
LOGGER(FilesFounder[found_file_from_number]): Found 8 calckeyb.s from number 6
LOGGER(FilesFounder[found_file_from_number]): Found 9 calculator.s from number 6
LOGGER(FilesFounder[found_file_from_number]): Found 10 default_example.s from number 6
LOGGER(FilesFounder[found_file_from_number]): Found 11 simple_add.s from number 6
LOGGER(FilesFounder[found_file_from_number]): Found 12 test.s from number 6
LOGGER(FilesFounder[found_file_from_number]): Found 13 testfp.s from number 6
LOGGER(FilesFounder[found_file_from_number]): Found 14 tty.s from number 6
LOGGER(FilesFounder[found_file_from_number]): Found 15 1-4_instructions.s from number 6
LOGGER(FilesFounder[found_file_from_number]): Found 16 5-8_instructions.s from number 6
LOGGER(FilesFounder[found_file_from_number]): Found 0 branch.s from number 7
LOGGER(FilesFounder[found_file_from_number]): Found 1 1-4_instructions.s from number 7
LOGGER(FilesFounder[found_file_from_number]): Found 2 11-12_instructions.s from number 7
LOGGER(FilesFounder[found_file_from_number]): Found 3 13-16_instructions.s from number 7
LOGGER(FilesFounder[found_file_from_number]): Found 4 5-10_instructions.s from number 7
LOGGER(FilesFounder[found_file_from_number]): Found 5 load_store.s from number 7
LOGGER(FilesFounder[found_file_from_number]): Found 6 sp.s from number 7
LOGGER(FilesFounder[found_file_from_number]): Found 7 512Bank.s from number 7
LOGGER(FilesFounder[found_file_from_number]): Found 8 calckeyb.s from number 7
LOGGER(FilesFounder[found_file_from_number]): Found 9 calculator.s from number 7
LOGGER(FilesFounder[found_file_from_number]): Found 10 default_example.s from number 7
LOGGER(FilesFounder[found_file_from_number]): Found 11 simple_add.s from number 7
LOGGER(FilesFounder[found_file_from_number]): Found 12 test.s from number 7
LOGGER(FilesFounder[found_file_from_number]): Found 13 testfp.s from number 7
LOGGER(FilesFounder[found_file_from_number]): Found 14 tty.s from number 7
LOGGER(FilesFounder[found_file_from_number]): Found 15 1-4_instructions.s from number 7
LOGGER(FilesFounder[found_file_from_number]): Found 16 5-8_instructions.s from number 7
LOGGER(FilesFounder[found_file_from_number]): Found 0 branch.s from number 8
LOGGER(FilesFounder[found_file_from_number]): Found 1 1-4_instructions.s from number 8
LOGGER(FilesFounder[found_file_from_number]): Found 2 11-12_instructions.s from number 8
LOGGER(FilesFounder[found_file_from_number]): Found 3 13-16_instructions.s from number 8
LOGGER(FilesFounder[found_file_from_number]): Found 4 5-10_instructions.s from number 8
LOGGER(FilesFounder[found_file_from_number]): Found 5 load_store.s from number 8
LOGGER(FilesFounder[found_file_from_number]): Found 6 sp.s from number 8
LOGGER(FilesFounder[found_file_from_number]): Found 7 512Bank.s from number 8
LOGGER(FilesFounder[found_file_from_number]): Found 8 calckeyb.s from number 8
LOGGER(FilesFounder[found_file_from_number]): Found 9 calculator.s from number 8
LOGGER(FilesFounder[found_file_from_number]): Found 10 default_example.s from number 8
LOGGER(FilesFounder[found_file_from_number]): Found 11 simple_add.s from number 8
LOGGER(FilesFounder[found_file_from_number]): Found 12 test.s from number 8
LOGGER(FilesFounder[found_file_from_number]): Found 13 testfp.s from number 8
LOGGER(FilesFounder[found_file_from_number]): Found 14 tty.s from number 8
LOGGER(FilesFounder[found_file_from_number]): Found 15 1-4_instructions.s from number 8
LOGGER(FilesFounder[found_file_from_number]): Found 16 5-8_instructions.s from number 8
LOGGER(FilesFounder[found_file_from_number]): Found 0 branch.s from number 9
LOGGER(FilesFounder[found_file_from_number]): Found 1 1-4_instructions.s from number 9
LOGGER(FilesFounder[found_file_from_number]): Found 2 11-12_instructions.s from number 9
LOGGER(FilesFounder[found_file_from_number]): Found 3 13-16_instructions.s from number 9
LOGGER(FilesFounder[found_file_from_number]): Found 4 5-10_instructions.s from number 9
LOGGER(FilesFounder[found_file_from_number]): Found 5 load_store.s from number 9
LOGGER(FilesFounder[found_file_from_number]): Found 6 sp.s from number 9
LOGGER(FilesFounder[found_file_from_number]): Found 7 512Bank.s from number 9
LOGGER(FilesFounder[found_file_from_number]): Found 8 calckeyb.s from number 9
LOGGER(FilesFounder[found_file_from_number]): Found 9 calculator.s from number 9
LOGGER(FilesFounder[found_file_from_number]): Found 10 default_example.s from number 9
LOGGER(FilesFounder[found_file_from_number]): Found 11 simple_add.s from number 9
LOGGER(FilesFounder[found_file_from_number]): Found 12 test.s from number 9
LOGGER(FilesFounder[found_file_from_number]): Found 13 testfp.s from number 9
LOGGER(FilesFounder[found_file_from_number]): Found 14 tty.s from number 9
LOGGER(FilesFounder[found_file_from_number]): Found 15 1-4_instructions.s from number 9
LOGGER(FilesFounder[found_file_from_number]): Found 16 5-8_instructions.s from number 9
LOGGER(FilesFounder[found_file_from_number]): Found 0 branch.s from number 10
LOGGER(FilesFounder[found_file_from_number]): Found 1 1-4_instructions.s from number 10
LOGGER(FilesFounder[found_file_from_number]): Found 2 11-12_instructions.s from number 10
LOGGER(FilesFounder[found_file_from_number]): Found 3 13-16_instructions.s from number 10
LOGGER(FilesFounder[found_file_from_number]): Found 4 5-10_instructions.s from number 10
LOGGER(FilesFounder[found_file_from_number]): Found 5 load_store.s from number 10
LOGGER(FilesFounder[found_file_from_number]): Found 6 sp.s from number 10
LOGGER(FilesFounder[found_file_from_number]): Found 7 512Bank.s from number 10
LOGGER(FilesFounder[found_file_from_number]): Found 8 calckeyb.s from number 10
LOGGER(FilesFounder[found_file_from_number]): Found 9 calculator.s from number 10
LOGGER(FilesFounder[found_file_from_number]): Found 10 default_example.s from number 10
LOGGER(FilesFounder[found_file_from_number]): Found 11 simple_add.s from number 10
LOGGER(FilesFounder[found_file_from_number]): Found 12 test.s from number 10
LOGGER(FilesFounder[found_file_from_number]): Found 13 testfp.s from number 10
LOGGER(FilesFounder[found_file_from_number]): Found 14 tty.s from number 10
LOGGER(FilesFounder[found_file_from_number]): Found 15 1-4_instructions.s from number 10
LOGGER(FilesFounder[found_file_from_number]): Found 16 5-8_instructions.s from number 10
LOGGER(FilesFounder[found_file_from_number]): Found 0 branch.s from number 11
LOGGER(FilesFounder[found_file_from_number]): Found 1 1-4_instructions.s from number 11
LOGGER(FilesFounder[found_file_from_number]): Found 2 11-12_instructions.s from number 11
LOGGER(FilesFounder[found_file_from_number]): Found 3 13-16_instructions.s from number 11
LOGGER(FilesFounder[found_file_from_number]): Found 4 5-10_instructions.s from number 11
LOGGER(FilesFounder[found_file_from_number]): Found 5 load_store.s from number 11
LOGGER(FilesFounder[found_file_from_number]): Found 6 sp.s from number 11
LOGGER(FilesFounder[found_file_from_number]): Found 7 512Bank.s from number 11
LOGGER(FilesFounder[found_file_from_number]): Found 8 calckeyb.s from number 11
LOGGER(FilesFounder[found_file_from_number]): Found 9 calculator.s from number 11
LOGGER(FilesFounder[found_file_from_number]): Found 10 default_example.s from number 11
LOGGER(FilesFounder[found_file_from_number]): Found 11 simple_add.s from number 11
LOGGER(FilesFounder[found_file_from_number]): Found 12 test.s from number 11
LOGGER(FilesFounder[found_file_from_number]): Found 13 testfp.s from number 11
LOGGER(FilesFounder[found_file_from_number]): Found 14 tty.s from number 11
LOGGER(FilesFounder[found_file_from_number]): Found 15 1-4_instructions.s from number 11
LOGGER(FilesFounder[found_file_from_number]): Found 16 5-8_instructions.s from number 11
LOGGER(FilesFounder[found_file_from_number]): Found 0 branch.s from number 12
LOGGER(FilesFounder[found_file_from_number]): Found 1 1-4_instructions.s from number 12
LOGGER(FilesFounder[found_file_from_number]): Found 2 11-12_instructions.s from number 12
LOGGER(FilesFounder[found_file_from_number]): Found 3 13-16_instructions.s from number 12
LOGGER(FilesFounder[found_file_from_number]): Found 4 5-10_instructions.s from number 12
LOGGER(FilesFounder[found_file_from_number]): Found 5 load_store.s from number 12
LOGGER(FilesFounder[found_file_from_number]): Found 6 sp.s from number 12
LOGGER(FilesFounder[found_file_from_number]): Found 7 512Bank.s from number 12
LOGGER(FilesFounder[found_file_from_number]): Found 8 calckeyb.s from number 12
LOGGER(FilesFounder[found_file_from_number]): Found 9 calculator.s from number 12
LOGGER(FilesFounder[found_file_from_number]): Found 10 default_example.s from number 12
LOGGER(FilesFounder[found_file_from_number]): Found 11 simple_add.s from number 12
LOGGER(FilesFounder[found_file_from_number]): Found 12 test.s from number 12
LOGGER(FilesFounder[found_file_from_number]): Found 13 testfp.s from number 12
LOGGER(FilesFounder[found_file_from_number]): Found 14 tty.s from number 12
LOGGER(FilesFounder[found_file_from_number]): Found 15 1-4_instructions.s from number 12
LOGGER(FilesFounder[found_file_from_number]): Found 16 5-8_instructions.s from number 12
LOGGER(FilesFounder[found_file_from_number]): Found 0 branch.s from number 13
LOGGER(FilesFounder[found_file_from_number]): Found 1 1-4_instructions.s from number 13
LOGGER(FilesFounder[found_file_from_number]): Found 2 11-12_instructions.s from number 13
LOGGER(FilesFounder[found_file_from_number]): Found 3 13-16_instructions.s from number 13
LOGGER(FilesFounder[found_file_from_number]): Found 4 5-10_instructions.s from number 13
LOGGER(FilesFounder[found_file_from_number]): Found 5 load_store.s from number 13
LOGGER(FilesFounder[found_file_from_number]): Found 6 sp.s from number 13
LOGGER(FilesFounder[found_file_from_number]): Found 7 512Bank.s from number 13
LOGGER(FilesFounder[found_file_from_number]): Found 8 calckeyb.s from number 13
LOGGER(FilesFounder[found_file_from_number]): Found 9 calculator.s from number 13
LOGGER(FilesFounder[found_file_from_number]): Found 10 default_example.s from number 13
LOGGER(FilesFounder[found_file_from_number]): Found 11 simple_add.s from number 13
LOGGER(FilesFounder[found_file_from_number]): Found 12 test.s from number 13
LOGGER(FilesFounder[found_file_from_number]): Found 13 testfp.s from number 13
LOGGER(FilesFounder[found_file_from_number]): Found 14 tty.s from number 13
LOGGER(FilesFounder[found_file_from_number]): Found 15 1-4_instructions.s from number 13
LOGGER(FilesFounder[found_file_from_number]): Found 16 5-8_instructions.s from number 13
LOGGER(FilesFounder[found_file_from_number]): Found 0 branch.s from number 14
LOGGER(FilesFounder[found_file_from_number]): Found 1 1-4_instructions.s from number 14
LOGGER(FilesFounder[found_file_from_number]): Found 2 11-12_instructions.s from number 14
LOGGER(FilesFounder[found_file_from_number]): Found 3 13-16_instructions.s from number 14
LOGGER(FilesFounder[found_file_from_number]): Found 4 5-10_instructions.s from number 14
LOGGER(FilesFounder[found_file_from_number]): Found 5 load_store.s from number 14
LOGGER(FilesFounder[found_file_from_number]): Found 6 sp.s from number 14
LOGGER(FilesFounder[found_file_from_number]): Found 7 512Bank.s from number 14
LOGGER(FilesFounder[found_file_from_number]): Found 8 calckeyb.s from number 14
LOGGER(FilesFounder[found_file_from_number]): Found 9 calculator.s from number 14
LOGGER(FilesFounder[found_file_from_number]): Found 10 default_example.s from number 14
LOGGER(FilesFounder[found_file_from_number]): Found 11 simple_add.s from number 14
LOGGER(FilesFounder[found_file_from_number]): Found 12 test.s from number 14
LOGGER(FilesFounder[found_file_from_number]): Found 13 testfp.s from number 14
LOGGER(FilesFounder[found_file_from_number]): Found 14 tty.s from number 14
LOGGER(FilesFounder[found_file_from_number]): Found 15 1-4_instructions.s from number 14
LOGGER(FilesFounder[found_file_from_number]): Found 16 5-8_instructions.s from number 14
LOGGER(FilesFounder[found_file_from_number]): Found 0 branch.s from number 15
LOGGER(FilesFounder[found_file_from_number]): Found 1 1-4_instructions.s from number 15
LOGGER(FilesFounder[found_file_from_number]): Found 2 11-12_instructions.s from number 15
LOGGER(FilesFounder[found_file_from_number]): Found 3 13-16_instructions.s from number 15
LOGGER(FilesFounder[found_file_from_number]): Found 4 5-10_instructions.s from number 15
LOGGER(FilesFounder[found_file_from_number]): Found 5 load_store.s from number 15
LOGGER(FilesFounder[found_file_from_number]): Found 6 sp.s from number 15
LOGGER(FilesFounder[found_file_from_number]): Found 7 512Bank.s from number 15
LOGGER(FilesFounder[found_file_from_number]): Found 8 calckeyb.s from number 15
LOGGER(FilesFounder[found_file_from_number]): Found 9 calculator.s from number 15
LOGGER(FilesFounder[found_file_from_number]): Found 10 default_example.s from number 15
LOGGER(FilesFounder[found_file_from_number]): Found 11 simple_add.s from number 15
LOGGER(FilesFounder[found_file_from_number]): Found 12 test.s from number 15
LOGGER(FilesFounder[found_file_from_number]): Found 13 testfp.s from number 15
LOGGER(FilesFounder[found_file_from_number]): Found 14 tty.s from number 15
LOGGER(FilesFounder[found_file_from_number]): Found 15 1-4_instructions.s from number 15
LOGGER(FilesFounder[found_file_from_number]): Found 16 5-8_instructions.s from number 15
LOGGER(FilesFounder[found_file_from_number]): Found 0 branch.s from number 16
LOGGER(FilesFounder[found_file_from_number]): Found 1 1-4_instructions.s from number 16
LOGGER(FilesFounder[found_file_from_number]): Found 2 11-12_instructions.s from number 16
LOGGER(FilesFounder[found_file_from_number]): Found 3 13-16_instructions.s from number 16
LOGGER(FilesFounder[found_file_from_number]): Found 4 5-10_instructions.s from number 16
LOGGER(FilesFounder[found_file_from_number]): Found 5 load_store.s from number 16
LOGGER(FilesFounder[found_file_from_number]): Found 6 sp.s from number 16
LOGGER(FilesFounder[found_file_from_number]): Found 7 512Bank.s from number 16
LOGGER(FilesFounder[found_file_from_number]): Found 8 calckeyb.s from number 16
LOGGER(FilesFounder[found_file_from_number]): Found 9 calculator.s from number 16
LOGGER(FilesFounder[found_file_from_number]): Found 10 default_example.s from number 16
LOGGER(FilesFounder[found_file_from_number]): Found 11 simple_add.s from number 16
LOGGER(FilesFounder[found_file_from_number]): Found 12 test.s from number 16
LOGGER(FilesFounder[found_file_from_number]): Found 13 testfp.s from number 16
LOGGER(FilesFounder[found_file_from_number]): Found 14 tty.s from number 16
LOGGER(FilesFounder[found_file_from_number]): Found 15 1-4_instructions.s from number 16
LOGGER(FilesFounder[found_file_from_number]): Found 16 5-8_instructions.s from number 16
LOGGER(AsmReader[read_asm_file]): Reading ../../../src/tests/resources/asm_files/conditional/branch.s
LOGGER(AsmReader[read_bin_file]): Reading ../../../src/tests/resources/expected_binaries/conditional/branch.bin
LOGGER(AsmReader[read_asm_file]): Reading ../../../src/tests/resources/asm_files/data_processing/1-4_instructions.s
LOGGER(AsmReader[read_bin_file]): Reading ../../../src/tests/resources/expected_binaries/data_processing/1-4_instructions.bin
LOGGER(AsmReader[read_asm_file]): Reading ../../../src/tests/resources/asm_files/data_processing/11-12_instructions.s
LOGGER(AsmReader[read_bin_file]): Reading ../../../src/tests/resources/expected_binaries/data_processing/11-12_instructions.bin
LOGGER(AsmReader[read_asm_file]): Reading ../../../src/tests/resources/asm_files/data_processing/13-16_instructions.s
LOGGER(AsmReader[read_bin_file]): Reading ../../../src/tests/resources/expected_binaries/data_processing/13-16_instructions.bin
LOGGER(AsmReader[read_asm_file]): Reading ../../../src/tests/resources/asm_files/data_processing/5-10_instructions.s
LOGGER(AsmReader[read_bin_file]): Reading ../../../src/tests/resources/expected_binaries/data_processing/5-10_instructions.bin
LOGGER(AsmReader[read_asm_file]): Reading ../../../src/tests/resources/asm_files/load_store/load_store.s
LOGGER(AsmReader[read_bin_file]): Reading ../../../src/tests/resources/expected_binaries/load_store/load_store.bin
LOGGER(AsmReader[read_asm_file]): Reading ../../../src/tests/resources/asm_files/miscellaneous/sp.s
LOGGER(AsmReader[read_bin_file]): Reading ../../../src/tests/resources/expected_binaries/miscellaneous/sp.bin
LOGGER(AsmReader[read_asm_file]): Reading ../../../src/tests/resources/asm_files/other/512Bank.s
LOGGER(AsmReader[read_bin_file]): Reading ../../../src/tests/resources/expected_binaries/other/512Bank.bin
LOGGER(AsmReader[read_asm_file]): Reading ../../../src/tests/resources/asm_files/other/calckeyb.s
LOGGER(AsmReader[read_bin_file]): Reading ../../../src/tests/resources/expected_binaries/other/calckeyb.bin
LOGGER(AsmReader[read_asm_file]): Reading ../../../src/tests/resources/asm_files/other/calculator.s
LOGGER(AsmReader[read_bin_file]): Reading ../../../src/tests/resources/expected_binaries/other/calculator.bin
LOGGER(AsmReader[read_asm_file]): Reading ../../../src/tests/resources/asm_files/other/default_example.s
LOGGER(AsmReader[read_bin_file]): Reading ../../../src/tests/resources/expected_binaries/other/default_example.bin
LOGGER(AsmReader[read_asm_file]): Reading ../../../src/tests/resources/asm_files/other/simple_add.s
LOGGER(AsmReader[read_bin_file]): Reading ../../../src/tests/resources/expected_binaries/other/simple_add.bin
LOGGER(AsmReader[read_asm_file]): Reading ../../../src/tests/resources/asm_files/other/test.s
LOGGER(AsmReader[read_bin_file]): Reading ../../../src/tests/resources/expected_binaries/other/test.bin
LOGGER(AsmReader[read_asm_file]): Reading ../../../src/tests/resources/asm_files/other/testfp.s
LOGGER(AsmReader[read_bin_file]): Reading ../../../src/tests/resources/expected_binaries/other/testfp.bin
LOGGER(AsmReader[read_asm_file]): Reading ../../../src/tests/resources/asm_files/other/tty.s
LOGGER(AsmReader[read_bin_file]): Reading ../../../src/tests/resources/expected_binaries/other/tty.bin
LOGGER(AsmReader[read_asm_file]): Reading ../../../src/tests/resources/asm_files/shift_add_sub_mov/1-4_instructions.s
LOGGER(AsmReader[read_bin_file]): Reading ../../../src/tests/resources/expected_binaries/shift_add_sub_mov/1-4_instructions.bin
LOGGER(AsmReader[read_asm_file]): Reading ../../../src/tests/resources/asm_files/shift_add_sub_mov/5-8_instructions.s
LOGGER(AsmReader[read_bin_file]): Reading ../../../src/tests/resources/expected_binaries/shift_add_sub_mov/5-8_instructions.bin
LOGGER(Functions[define_label]): Define label movs r0, #0
LOGGER(Functions[is_label]): Check if movs r0, #0 is a label
LOGGER(Functions[is_label]): movs r0, #0 is not a label
LOGGER(Functions[define_label]): Define label movs r1, #1
LOGGER(Functions[is_label]): Check if movs r1, #1 is a label
LOGGER(Functions[is_label]): movs r1, #1 is not a label
LOGGER(Functions[define_label]): Define label .goto:
LOGGER(Functions[is_label]): Check if .goto: is a label
LOGGER(Functions[is_label]): .goto: is a label
LOGGER(Functions[define_label]): Label .goto defined
LOGGER(Functions[define_label]): Define label movs r2, #20
LOGGER(Functions[is_label]): Check if movs r2, #20 is a label
LOGGER(Functions[is_label]): movs r2, #20 is not a label
LOGGER(Functions[define_label]): Define label cmp r0, r1
LOGGER(Functions[is_label]): Check if cmp r0, r1 is a label
LOGGER(Functions[is_label]): cmp r0, r1 is not a label
LOGGER(Functions[define_label]): Define label bMI .then1
LOGGER(Functions[is_label]): Check if bMI .then1 is a label
LOGGER(Functions[is_label]): bMI .then1 is not a label
LOGGER(Functions[define_label]): Define label b .endif1
LOGGER(Functions[is_label]): Check if b .endif1 is a label
LOGGER(Functions[is_label]): b .endif1 is not a label
LOGGER(Functions[define_label]): Define label .then1:
LOGGER(Functions[is_label]): Check if .then1: is a label
LOGGER(Functions[is_label]): .then1: is a label
LOGGER(Functions[define_label]): Label .then1 defined
LOGGER(Functions[define_label]): Define label rsbs r2, r2, #0
LOGGER(Functions[is_label]): Check if rsbs r2, r2, #0 is a label
LOGGER(Functions[is_label]): rsbs r2, r2, #0 is not a label
LOGGER(Functions[define_label]): Define label .endif1:
LOGGER(Functions[is_label]): Check if .endif1: is a label
LOGGER(Functions[is_label]): .endif1: is a label
LOGGER(Functions[define_label]): Label .endif1 defined
LOGGER(Functions[define_label]): Define label cmp r2, r1
LOGGER(Functions[is_label]): Check if cmp r2, r1 is a label
LOGGER(Functions[is_label]): cmp r2, r1 is not a label
LOGGER(Functions[define_label]): Define label bLT .then2
LOGGER(Functions[is_label]): Check if bLT .then2 is a label
LOGGER(Functions[is_label]): bLT .then2 is not a label
LOGGER(Functions[define_label]): Define label b .endif2
LOGGER(Functions[is_label]): Check if b .endif2 is a label
LOGGER(Functions[is_label]): b .endif2 is not a label
LOGGER(Functions[define_label]): Define label .then2:
LOGGER(Functions[is_label]): Check if .then2: is a label
LOGGER(Functions[is_label]): .then2: is a label
LOGGER(Functions[define_label]): Label .then2 defined
LOGGER(Functions[define_label]): Define label movs r0, #50
LOGGER(Functions[is_label]): Check if movs r0, #50 is a label
LOGGER(Functions[is_label]): movs r0, #50 is not a label
LOGGER(Functions[define_label]): Define label b .goto
LOGGER(Functions[is_label]): Check if b .goto is a label
LOGGER(Functions[is_label]): b .goto is not a label
LOGGER(Functions[define_label]): Define label .endif2:
LOGGER(Functions[is_label]): Check if .endif2: is a label
LOGGER(Functions[is_label]): .endif2: is a label
LOGGER(Functions[define_label]): Label .endif2 defined
LOGGER(Functions[define_label]): Define label adds r3, r0, r2
LOGGER(Functions[is_label]): Check if adds r3, r0, r2 is a label
LOGGER(Functions[is_label]): adds r3, r0, r2 is not a label
LOGGER(Functions[set_number_of_instructions_labels]): Set number of instructions labels to 13
LOGGER(Functions[set_number_of_labels]): Set number of labels to 18
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#0']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00000000
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r1,', '#1']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 00000001
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 001 00000001
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r2,', '#20']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_immediate]): Get immediate from 20: 00010100
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 010 00010100
LOGGER(AsmParser[convert_into_binary]): ['CMP', 'r0,', 'r1']
LOGGER(AsmParser[call_function]): Calling cmp_Rn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r1: 001
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 1010 001 000
LOGGER(AsmParser[convert_into_binary]): ['BMI', '.then1']
LOGGER(AsmParser[call_function]): Calling bmi with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111
LOGGER(AsmInstructions[conditional_branch]): 1101 0100 11111111
LOGGER(AsmParser[convert_into_binary]): ['B', '.endif1']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111111
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111111
LOGGER(AsmParser[convert_into_binary]): ['RSBS', 'r2,', 'r2,', '#0']
LOGGER(AsmParser[call_function]): Calling rsbs_Rd_Rn with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 1001 010 010
LOGGER(AsmParser[convert_into_binary]): ['CMP', 'r2,', 'r1']
LOGGER(AsmParser[call_function]): Calling cmp_Rn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_register_number]): Get register number from r1: 001
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 1010 001 010
LOGGER(AsmParser[convert_into_binary]): ['BLT', '.then2']
LOGGER(AsmParser[call_function]): Calling blt with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111
LOGGER(AsmInstructions[conditional_branch]): 1101 1011 11111111
LOGGER(AsmParser[convert_into_binary]): ['B', '.endif2']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000000
LOGGER(AsmInstructions[unconditional_branch]): 11100 00000000000
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#50']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 50: 00110010
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00110010
LOGGER(AsmParser[convert_into_binary]): ['B', '.goto']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111110100
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111110100
LOGGER(AsmParser[convert_into_binary]): ['ADDS', 'r3,', 'r0,', 'r2']
LOGGER(AsmParser[call_function]): Calling adds_Rd_Rn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r3,: 011
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r2: 010
LOGGER(AsmInstructions[instruction_rm_rd_rn]): 00 01100 010 000 011
LOGGER(AsmParser[binary_to_hexa]): Converting binary to hexadecimal
LOGGER(AsmParser[binary_to_hexa]): ['2000', '2101', '2214', '4288', 'd4ff', 'e7ff', '4252', '428a', 'dbff', 'e000', '2032', 'e7f4', '1883']
LOGGER(AsmParser[save_hexa_as_bin]): Saving the hexadecimal in ../../../src/tests/resources/output_binaries/conditional/branch.bin
LOGGER(AsmReader[read_bin_file]): Reading ../../../src/tests/resources/output_binaries/conditional/branch.bin
LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2000[0m/2000 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2101[0m/2101 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2214[0m/2214 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m4288[0m/4288 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92md4ff[0m/d4ff [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7ff[0m/e7ff [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m4252[0m/4252 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m428a[0m/428a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92mdbff[0m/dbff [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me000[0m/e000 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2032[0m/2032 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7f4[0m/e7f4 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m1883[0m/1883 [OK]

LOGGER(AsmParser[show_difference]): Percentage of Correctness: 100.00%
LOGGER(Functions[define_label]): Define label movs r0, #0
LOGGER(Functions[is_label]): Check if movs r0, #0 is a label
LOGGER(Functions[is_label]): movs r0, #0 is not a label
LOGGER(Functions[define_label]): Define label movs r1, #170
LOGGER(Functions[is_label]): Check if movs r1, #170 is a label
LOGGER(Functions[is_label]): movs r1, #170 is not a label
LOGGER(Functions[define_label]): Define label movs r2, #255
LOGGER(Functions[is_label]): Check if movs r2, #255 is a label
LOGGER(Functions[is_label]): movs r2, #255 is not a label
LOGGER(Functions[define_label]): Define label movs r3, #15
LOGGER(Functions[is_label]): Check if movs r3, #15 is a label
LOGGER(Functions[is_label]): movs r3, #15 is not a label
LOGGER(Functions[define_label]): Define label ands r3, r1
LOGGER(Functions[is_label]): Check if ands r3, r1 is a label
LOGGER(Functions[is_label]): ands r3, r1 is not a label
LOGGER(Functions[define_label]): Define label movs r4, #161
LOGGER(Functions[is_label]): Check if movs r4, #161 is a label
LOGGER(Functions[is_label]): movs r4, #161 is not a label
LOGGER(Functions[define_label]): Define label eors r4, r1
LOGGER(Functions[is_label]): Check if eors r4, r1 is a label
LOGGER(Functions[is_label]): eors r4, r1 is not a label
LOGGER(Functions[define_label]): Define label movs r5, #2
LOGGER(Functions[is_label]): Check if movs r5, #2 is a label
LOGGER(Functions[is_label]): movs r5, #2 is not a label
LOGGER(Functions[define_label]): Define label movs r6, #15
LOGGER(Functions[is_label]): Check if movs r6, #15 is a label
LOGGER(Functions[is_label]): movs r6, #15 is not a label
LOGGER(Functions[define_label]): Define label lsls r6, r5
LOGGER(Functions[is_label]): Check if lsls r6, r5 is a label
LOGGER(Functions[is_label]): lsls r6, r5 is not a label
LOGGER(Functions[define_label]): Define label movs r7, #1
LOGGER(Functions[is_label]): Check if movs r7, #1 is a label
LOGGER(Functions[is_label]): movs r7, #1 is not a label
LOGGER(Functions[define_label]): Define label lsrs r6, r7
LOGGER(Functions[is_label]): Check if lsrs r6, r7 is a label
LOGGER(Functions[is_label]): lsrs r6, r7 is not a label
LOGGER(Functions[set_number_of_instructions_labels]): Set number of instructions labels to 12
LOGGER(Functions[set_number_of_labels]): Set number of labels to 12
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#0']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00000000
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r1,', '#170']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 170: 10101010
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 001 10101010
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r2,', '#255']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_immediate]): Get immediate from 255: 11111111
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 010 11111111
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r3,', '#15']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r3,: 011
LOGGER(AsmInstructions[get_immediate]): Get immediate from 15: 00001111
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 011 00001111
LOGGER(AsmParser[convert_into_binary]): ['ANDS', 'r3,', 'r1']
LOGGER(AsmParser[call_function]): Calling ands_Rdn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r3,: 011
LOGGER(AsmInstructions[get_register_number]): Get register number from r1: 001
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 0000 001 011
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r4,', '#161']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r4,: 100
LOGGER(AsmInstructions[get_immediate]): Get immediate from 161: 10100001
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 100 10100001
LOGGER(AsmParser[convert_into_binary]): ['EORS', 'r4,', 'r1']
LOGGER(AsmParser[call_function]): Calling eors_Rdn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r4,: 100
LOGGER(AsmInstructions[get_register_number]): Get register number from r1: 001
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 0001 001 100
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r5,', '#2']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r5,: 101
LOGGER(AsmInstructions[get_immediate]): Get immediate from 2: 00000010
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 101 00000010
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r6,', '#15']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r6,: 110
LOGGER(AsmInstructions[get_immediate]): Get immediate from 15: 00001111
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 110 00001111
LOGGER(AsmParser[convert_into_binary]): ['LSLS', 'r6,', 'r5']
LOGGER(AsmParser[call_function]): Calling lsls_Rdn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r6,: 110
LOGGER(AsmInstructions[get_register_number]): Get register number from r5: 101
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 0010 101 110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r7,', '#1']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r7,: 111
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 00000001
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 111 00000001
LOGGER(AsmParser[convert_into_binary]): ['LSRS', 'r6,', 'r7']
LOGGER(AsmParser[call_function]): Calling lsrs_Rdn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r6,: 110
LOGGER(AsmInstructions[get_register_number]): Get register number from r7: 111
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 0011 111 110
LOGGER(AsmParser[binary_to_hexa]): Converting binary to hexadecimal
LOGGER(AsmParser[binary_to_hexa]): ['2000', '21aa', '22ff', '230f', '400b', '24a1', '404c', '2502', '260f', '40ae', '2701', '40fe']
LOGGER(AsmParser[save_hexa_as_bin]): Saving the hexadecimal in ../../../src/tests/resources/output_binaries/data_processing/1-4_instructions.bin
LOGGER(AsmReader[read_bin_file]): Reading ../../../src/tests/resources/output_binaries/data_processing/1-4_instructions.bin
LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2000[0m/2000 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m21aa[0m/21aa [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m22ff[0m/22ff [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m230f[0m/230f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m400b[0m/400b [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m24a1[0m/24a1 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m404c[0m/404c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2502[0m/2502 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m260f[0m/260f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m40ae[0m/40ae [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2701[0m/2701 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m40fe[0m/40fe [OK]

LOGGER(AsmParser[show_difference]): Percentage of Correctness: 100.00%
LOGGER(Functions[define_label]): Define label movs r0, #0
LOGGER(Functions[is_label]): Check if movs r0, #0 is a label
LOGGER(Functions[is_label]): movs r0, #0 is not a label
LOGGER(Functions[define_label]): Define label movs r1, #1
LOGGER(Functions[is_label]): Check if movs r1, #1 is a label
LOGGER(Functions[is_label]): movs r1, #1 is not a label
LOGGER(Functions[define_label]): Define label movs r2, #1
LOGGER(Functions[is_label]): Check if movs r2, #1 is a label
LOGGER(Functions[is_label]): movs r2, #1 is not a label
LOGGER(Functions[define_label]): Define label rsbs r2, r2, #0
LOGGER(Functions[is_label]): Check if rsbs r2, r2, #0 is a label
LOGGER(Functions[is_label]): rsbs r2, r2, #0 is not a label
LOGGER(Functions[define_label]): Define label movs r3, #1
LOGGER(Functions[is_label]): Check if movs r3, #1 is a label
LOGGER(Functions[is_label]): movs r3, #1 is not a label
LOGGER(Functions[define_label]): Define label rsbs r3, r3, #0
LOGGER(Functions[is_label]): Check if rsbs r3, r3, #0 is a label
LOGGER(Functions[is_label]): rsbs r3, r3, #0 is not a label
LOGGER(Functions[define_label]): Define label lsrs r3, r1
LOGGER(Functions[is_label]): Check if lsrs r3, r1 is a label
LOGGER(Functions[is_label]): lsrs r3, r1 is not a label
LOGGER(Functions[define_label]): Define label movs r4, #1
LOGGER(Functions[is_label]): Check if movs r4, #1 is a label
LOGGER(Functions[is_label]): movs r4, #1 is not a label
LOGGER(Functions[define_label]): Define label cmn r3, r1
LOGGER(Functions[is_label]): Check if cmn r3, r1 is a label
LOGGER(Functions[is_label]): cmn r3, r1 is not a label
LOGGER(Functions[define_label]): Define label cmn r2, r1
LOGGER(Functions[is_label]): Check if cmn r2, r1 is a label
LOGGER(Functions[is_label]): cmn r2, r1 is not a label
LOGGER(Functions[define_label]): Define label cmp r4, r1
LOGGER(Functions[is_label]): Check if cmp r4, r1 is a label
LOGGER(Functions[is_label]): cmp r4, r1 is not a label
LOGGER(Functions[define_label]): Define label cmp r0, r1
LOGGER(Functions[is_label]): Check if cmp r0, r1 is a label
LOGGER(Functions[is_label]): cmp r0, r1 is not a label
LOGGER(Functions[define_label]): Define label cmp r1, r0
LOGGER(Functions[is_label]): Check if cmp r1, r0 is a label
LOGGER(Functions[is_label]): cmp r1, r0 is not a label
LOGGER(Functions[set_number_of_instructions_labels]): Set number of instructions labels to 13
LOGGER(Functions[set_number_of_labels]): Set number of labels to 13
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#0']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00000000
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r1,', '#1']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 00000001
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 001 00000001
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r2,', '#1']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 00000001
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 010 00000001
LOGGER(AsmParser[convert_into_binary]): ['RSBS', 'r2,', 'r2,', '#0']
LOGGER(AsmParser[call_function]): Calling rsbs_Rd_Rn with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 1001 010 010
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r3,', '#1']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r3,: 011
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 00000001
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 011 00000001
LOGGER(AsmParser[convert_into_binary]): ['RSBS', 'r3,', 'r3,', '#0']
LOGGER(AsmParser[call_function]): Calling rsbs_Rd_Rn with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r3,: 011
LOGGER(AsmInstructions[get_register_number]): Get register number from r3,: 011
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 1001 011 011
LOGGER(AsmParser[convert_into_binary]): ['LSRS', 'r3,', 'r1']
LOGGER(AsmParser[call_function]): Calling lsrs_Rdn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r3,: 011
LOGGER(AsmInstructions[get_register_number]): Get register number from r1: 001
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 0011 001 011
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r4,', '#1']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r4,: 100
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 00000001
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 100 00000001
LOGGER(AsmParser[convert_into_binary]): ['CMN', 'r3,', 'r1']
LOGGER(AsmParser[call_function]): Calling cmn_Rn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r3,: 011
LOGGER(AsmInstructions[get_register_number]): Get register number from r1: 001
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 1011 001 011
LOGGER(AsmParser[convert_into_binary]): ['CMN', 'r2,', 'r1']
LOGGER(AsmParser[call_function]): Calling cmn_Rn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_register_number]): Get register number from r1: 001
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 1011 001 010
LOGGER(AsmParser[convert_into_binary]): ['CMP', 'r4,', 'r1']
LOGGER(AsmParser[call_function]): Calling cmp_Rn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r4,: 100
LOGGER(AsmInstructions[get_register_number]): Get register number from r1: 001
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 1010 001 100
LOGGER(AsmParser[convert_into_binary]): ['CMP', 'r0,', 'r1']
LOGGER(AsmParser[call_function]): Calling cmp_Rn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r1: 001
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 1010 001 000
LOGGER(AsmParser[convert_into_binary]): ['CMP', 'r1,', 'r0']
LOGGER(AsmParser[call_function]): Calling cmp_Rn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_register_number]): Get register number from r0: 000
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 1010 000 001
LOGGER(AsmParser[binary_to_hexa]): Converting binary to hexadecimal
LOGGER(AsmParser[binary_to_hexa]): ['2000', '2101', '2201', '4252', '2301', '425b', '40cb', '2401', '42cb', '42ca', '428c', '4288', '4281']
LOGGER(AsmParser[save_hexa_as_bin]): Saving the hexadecimal in ../../../src/tests/resources/output_binaries/data_processing/11-12_instructions.bin
LOGGER(AsmReader[read_bin_file]): Reading ../../../src/tests/resources/output_binaries/data_processing/11-12_instructions.bin
LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2000[0m/2000 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2101[0m/2101 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2201[0m/2201 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m4252[0m/4252 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2301[0m/2301 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m425b[0m/425b [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m40cb[0m/40cb [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2401[0m/2401 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m42cb[0m/42cb [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m42ca[0m/42ca [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m428c[0m/428c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m4288[0m/4288 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m4281[0m/4281 [OK]

LOGGER(AsmParser[show_difference]): Percentage of Correctness: 100.00%
LOGGER(Functions[define_label]): Define label movs r0, #0
LOGGER(Functions[is_label]): Check if movs r0, #0 is a label
LOGGER(Functions[is_label]): movs r0, #0 is not a label
LOGGER(Functions[define_label]): Define label movs r1, #1
LOGGER(Functions[is_label]): Check if movs r1, #1 is a label
LOGGER(Functions[is_label]): movs r1, #1 is not a label
LOGGER(Functions[define_label]): Define label movs r2, #170
LOGGER(Functions[is_label]): Check if movs r2, #170 is a label
LOGGER(Functions[is_label]): movs r2, #170 is not a label
LOGGER(Functions[define_label]): Define label movs r3, #255
LOGGER(Functions[is_label]): Check if movs r3, #255 is a label
LOGGER(Functions[is_label]): movs r3, #255 is not a label
LOGGER(Functions[define_label]): Define label movs r4, #15
LOGGER(Functions[is_label]): Check if movs r4, #15 is a label
LOGGER(Functions[is_label]): movs r4, #15 is not a label
LOGGER(Functions[define_label]): Define label orrs r4, r2
LOGGER(Functions[is_label]): Check if orrs r4, r2 is a label
LOGGER(Functions[is_label]): orrs r4, r2 is not a label
LOGGER(Functions[define_label]): Define label movs r5, #45
LOGGER(Functions[is_label]): Check if movs r5, #45 is a label
LOGGER(Functions[is_label]): movs r5, #45 is not a label
LOGGER(Functions[define_label]): Define label muls r5, r2, r5
LOGGER(Functions[is_label]): Check if muls r5, r2, r5 is a label
LOGGER(Functions[is_label]): muls r5, r2, r5 is not a label
LOGGER(Functions[define_label]): Define label movs r6, #19
LOGGER(Functions[is_label]): Check if movs r6, #19 is a label
LOGGER(Functions[is_label]): movs r6, #19 is not a label
LOGGER(Functions[define_label]): Define label bics r6, r2
LOGGER(Functions[is_label]): Check if bics r6, r2 is a label
LOGGER(Functions[is_label]): bics r6, r2 is not a label
LOGGER(Functions[define_label]): Define label mvns r7, r2
LOGGER(Functions[is_label]): Check if mvns r7, r2 is a label
LOGGER(Functions[is_label]): mvns r7, r2 is not a label
LOGGER(Functions[set_number_of_instructions_labels]): Set number of instructions labels to 11
LOGGER(Functions[set_number_of_labels]): Set number of labels to 11
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#0']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00000000
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r1,', '#1']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 00000001
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 001 00000001
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r2,', '#170']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_immediate]): Get immediate from 170: 10101010
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 010 10101010
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r3,', '#255']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r3,: 011
LOGGER(AsmInstructions[get_immediate]): Get immediate from 255: 11111111
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 011 11111111
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r4,', '#15']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r4,: 100
LOGGER(AsmInstructions[get_immediate]): Get immediate from 15: 00001111
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 100 00001111
LOGGER(AsmParser[convert_into_binary]): ['ORRS', 'r4,', 'r2']
LOGGER(AsmParser[call_function]): Calling orrs_Rdn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r4,: 100
LOGGER(AsmInstructions[get_register_number]): Get register number from r2: 010
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 1100 010 100
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r5,', '#45']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r5,: 101
LOGGER(AsmInstructions[get_immediate]): Get immediate from 45: 00101101
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 101 00101101
LOGGER(AsmParser[convert_into_binary]): ['MULS', 'r5,', 'r2,', 'r5']
LOGGER(AsmParser[call_function]): Calling muls_Rdm_Rn_Rdm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r5,: 101
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 1101 010 101
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r6,', '#19']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r6,: 110
LOGGER(AsmInstructions[get_immediate]): Get immediate from 19: 00010011
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 110 00010011
LOGGER(AsmParser[convert_into_binary]): ['BICS', 'r6,', 'r2']
LOGGER(AsmParser[call_function]): Calling bics_Rdn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r6,: 110
LOGGER(AsmInstructions[get_register_number]): Get register number from r2: 010
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 1110 010 110
LOGGER(AsmParser[convert_into_binary]): ['MVNS', 'r7,', 'r2']
LOGGER(AsmParser[call_function]): Calling mvns_Rd_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r7,: 111
LOGGER(AsmInstructions[get_register_number]): Get register number from r2: 010
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 1111 010 111
LOGGER(AsmParser[binary_to_hexa]): Converting binary to hexadecimal
LOGGER(AsmParser[binary_to_hexa]): ['2000', '2101', '22aa', '23ff', '240f', '4314', '252d', '4355', '2613', '4396', '43d7']
LOGGER(AsmParser[save_hexa_as_bin]): Saving the hexadecimal in ../../../src/tests/resources/output_binaries/data_processing/13-16_instructions.bin
LOGGER(AsmReader[read_bin_file]): Reading ../../../src/tests/resources/output_binaries/data_processing/13-16_instructions.bin
LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2000[0m/2000 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2101[0m/2101 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m22aa[0m/22aa [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m23ff[0m/23ff [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m240f[0m/240f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m4314[0m/4314 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m252d[0m/252d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m4355[0m/4355 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2613[0m/2613 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m4396[0m/4396 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m43d7[0m/43d7 [OK]

LOGGER(AsmParser[show_difference]): Percentage of Correctness: 100.00%
LOGGER(Functions[define_label]): Define label movs r0, #0
LOGGER(Functions[is_label]): Check if movs r0, #0 is a label
LOGGER(Functions[is_label]): movs r0, #0 is not a label
LOGGER(Functions[define_label]): Define label movs r1, #1
LOGGER(Functions[is_label]): Check if movs r1, #1 is a label
LOGGER(Functions[is_label]): movs r1, #1 is not a label
LOGGER(Functions[define_label]): Define label movs r2, #170
LOGGER(Functions[is_label]): Check if movs r2, #170 is a label
LOGGER(Functions[is_label]): movs r2, #170 is not a label
LOGGER(Functions[define_label]): Define label movs r3, #255
LOGGER(Functions[is_label]): Check if movs r3, #255 is a label
LOGGER(Functions[is_label]): movs r3, #255 is not a label
LOGGER(Functions[define_label]): Define label movs r4, #15
LOGGER(Functions[is_label]): Check if movs r4, #15 is a label
LOGGER(Functions[is_label]): movs r4, #15 is not a label
LOGGER(Functions[define_label]): Define label rsbs r4, r4, #0
LOGGER(Functions[is_label]): Check if rsbs r4, r4, #0 is a label
LOGGER(Functions[is_label]): rsbs r4, r4, #0 is not a label
LOGGER(Functions[define_label]): Define label asrs r4, r4, #1
LOGGER(Functions[is_label]): Check if asrs r4, r4, #1 is a label
LOGGER(Functions[is_label]): asrs r4, r4, #1 is not a label
LOGGER(Functions[define_label]): Define label movs r5, #5
LOGGER(Functions[is_label]): Check if movs r5, #5 is a label
LOGGER(Functions[is_label]): movs r5, #5 is not a label
LOGGER(Functions[define_label]): Define label adcs r5, r1
LOGGER(Functions[is_label]): Check if adcs r5, r1 is a label
LOGGER(Functions[is_label]): adcs r5, r1 is not a label
LOGGER(Functions[define_label]): Define label sbcs r5, r1
LOGGER(Functions[is_label]): Check if sbcs r5, r1 is a label
LOGGER(Functions[is_label]): sbcs r5, r1 is not a label
LOGGER(Functions[define_label]): Define label sbcs r5, r1
LOGGER(Functions[is_label]): Check if sbcs r5, r1 is a label
LOGGER(Functions[is_label]): sbcs r5, r1 is not a label
LOGGER(Functions[define_label]): Define label movs r6, #170
LOGGER(Functions[is_label]): Check if movs r6, #170 is a label
LOGGER(Functions[is_label]): movs r6, #170 is not a label
LOGGER(Functions[define_label]): Define label rors r6, r1
LOGGER(Functions[is_label]): Check if rors r6, r1 is a label
LOGGER(Functions[is_label]): rors r6, r1 is not a label
LOGGER(Functions[define_label]): Define label tst r2, r6
LOGGER(Functions[is_label]): Check if tst r2, r6 is a label
LOGGER(Functions[is_label]): tst r2, r6 is not a label
LOGGER(Functions[set_number_of_instructions_labels]): Set number of instructions labels to 14
LOGGER(Functions[set_number_of_labels]): Set number of labels to 14
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#0']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00000000
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r1,', '#1']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 00000001
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 001 00000001
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r2,', '#170']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_immediate]): Get immediate from 170: 10101010
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 010 10101010
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r3,', '#255']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r3,: 011
LOGGER(AsmInstructions[get_immediate]): Get immediate from 255: 11111111
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 011 11111111
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r4,', '#15']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r4,: 100
LOGGER(AsmInstructions[get_immediate]): Get immediate from 15: 00001111
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 100 00001111
LOGGER(AsmParser[convert_into_binary]): ['RSBS', 'r4,', 'r4,', '#0']
LOGGER(AsmParser[call_function]): Calling rsbs_Rd_Rn with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r4,: 100
LOGGER(AsmInstructions[get_register_number]): Get register number from r4,: 100
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 1001 100 100
LOGGER(AsmParser[convert_into_binary]): ['ASRS', 'r4,', 'r4,', '#1']
LOGGER(AsmParser[call_function]): Calling asrs_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r4,: 100
LOGGER(AsmInstructions[get_register_number]): Get register number from r4,: 100
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 00001
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 010 00001 100 100
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r5,', '#5']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r5,: 101
LOGGER(AsmInstructions[get_immediate]): Get immediate from 5: 00000101
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 101 00000101
LOGGER(AsmParser[convert_into_binary]): ['ADCS', 'r5,', 'r1']
LOGGER(AsmParser[call_function]): Calling adcs_Rdn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r5,: 101
LOGGER(AsmInstructions[get_register_number]): Get register number from r1: 001
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 0101 001 101
LOGGER(AsmParser[convert_into_binary]): ['SBCS', 'r5,', 'r1']
LOGGER(AsmParser[call_function]): Calling sbcs_Rdn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r5,: 101
LOGGER(AsmInstructions[get_register_number]): Get register number from r1: 001
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 0110 001 101
LOGGER(AsmParser[convert_into_binary]): ['SBCS', 'r5,', 'r1']
LOGGER(AsmParser[call_function]): Calling sbcs_Rdn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r5,: 101
LOGGER(AsmInstructions[get_register_number]): Get register number from r1: 001
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 0110 001 101
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r6,', '#170']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r6,: 110
LOGGER(AsmInstructions[get_immediate]): Get immediate from 170: 10101010
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 110 10101010
LOGGER(AsmParser[convert_into_binary]): ['RORS', 'r6,', 'r1']
LOGGER(AsmParser[call_function]): Calling rors_Rdn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r6,: 110
LOGGER(AsmInstructions[get_register_number]): Get register number from r1: 001
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 0111 001 110
LOGGER(AsmParser[convert_into_binary]): ['TST', 'r2,', 'r6']
LOGGER(AsmParser[call_function]): Calling tst_Rn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_register_number]): Get register number from r6: 110
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 1000 110 010
LOGGER(AsmParser[binary_to_hexa]): Converting binary to hexadecimal
LOGGER(AsmParser[binary_to_hexa]): ['2000', '2101', '22aa', '23ff', '240f', '4264', '1064', '2505', '414d', '418d', '418d', '26aa', '41ce', '4232']
LOGGER(AsmParser[save_hexa_as_bin]): Saving the hexadecimal in ../../../src/tests/resources/output_binaries/data_processing/5-10_instructions.bin
LOGGER(AsmReader[read_bin_file]): Reading ../../../src/tests/resources/output_binaries/data_processing/5-10_instructions.bin
LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2000[0m/2000 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2101[0m/2101 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m22aa[0m/22aa [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m23ff[0m/23ff [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m240f[0m/240f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m4264[0m/4264 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m1064[0m/1064 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2505[0m/2505 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m414d[0m/414d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m418d[0m/418d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m418d[0m/418d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m26aa[0m/26aa [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m41ce[0m/41ce [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m4232[0m/4232 [OK]

LOGGER(AsmParser[show_difference]): Percentage of Correctness: 100.00%
LOGGER(Functions[define_label]): Define label movs r0, #170
LOGGER(Functions[is_label]): Check if movs r0, #170 is a label
LOGGER(Functions[is_label]): movs r0, #170 is not a label
LOGGER(Functions[define_label]): Define label movs r1, #255
LOGGER(Functions[is_label]): Check if movs r1, #255 is a label
LOGGER(Functions[is_label]): movs r1, #255 is not a label
LOGGER(Functions[define_label]): Define label add sp, #16
LOGGER(Functions[is_label]): Check if add sp, #16 is a label
LOGGER(Functions[is_label]): add sp, #16 is not a label
LOGGER(Functions[define_label]): Define label str r0, [sp, #4]
LOGGER(Functions[is_label]): Check if str r0, [sp, #4] is a label
LOGGER(Functions[is_label]): str r0, [sp, #4] is not a label
LOGGER(Functions[define_label]): Define label str r1, [sp, #0]
LOGGER(Functions[is_label]): Check if str r1, [sp, #0] is a label
LOGGER(Functions[is_label]): str r1, [sp, #0] is not a label
LOGGER(Functions[define_label]): Define label sub sp, #4
LOGGER(Functions[is_label]): Check if sub sp, #4 is a label
LOGGER(Functions[is_label]): sub sp, #4 is not a label
LOGGER(Functions[define_label]): Define label ldr r2,[sp, #4]
LOGGER(Functions[is_label]): Check if ldr r2,[sp, #4] is a label
LOGGER(Functions[is_label]): ldr r2,[sp, #4] is not a label
LOGGER(Functions[set_number_of_instructions_labels]): Set number of instructions labels to 7
LOGGER(Functions[set_number_of_labels]): Set number of labels to 7
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#170']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 170: 10101010
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 10101010
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r1,', '#255']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 255: 11111111
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 001 11111111
LOGGER(AsmParser[convert_into_binary]): ['ADD', 'sp,', '#16']
LOGGER(AsmParser[call_function]): Calling add_imm7 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 4: 0000100
LOGGER(AsmInstructions[instruction_sp_imm7]): 1011 00000 0000100
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#4']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 00000001
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000001 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r1,', '#0']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000000 001
LOGGER(AsmParser[convert_into_binary]): ['SUB', 'sp,', '#4']
LOGGER(AsmParser[call_function]): Calling sub_imm7 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 0000001
LOGGER(AsmInstructions[instruction_sp_imm7]): 1011 00001 0000001
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r2', '#4']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r2: 010
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 00000001
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00000001 010
LOGGER(AsmParser[binary_to_hexa]): Converting binary to hexadecimal
LOGGER(AsmParser[binary_to_hexa]): ['20aa', '21ff', 'b004', '9001', '9100', 'b081', '9a01']
LOGGER(AsmParser[save_hexa_as_bin]): Saving the hexadecimal in ../../../src/tests/resources/output_binaries/load_store/load_store.bin
LOGGER(AsmReader[read_bin_file]): Reading ../../../src/tests/resources/output_binaries/load_store/load_store.bin
LOGGER(AsmParser[show_difference]): Expected/Actual: [92m20aa[0m/20aa [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m21ff[0m/21ff [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92mb004[0m/b004 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9001[0m/9001 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9100[0m/9100 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92mb081[0m/b081 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9a01[0m/9a01 [OK]

LOGGER(AsmParser[show_difference]): Percentage of Correctness: 100.00%
LOGGER(Functions[define_label]): Define label add sp, #16
LOGGER(Functions[is_label]): Check if add sp, #16 is a label
LOGGER(Functions[is_label]): add sp, #16 is not a label
LOGGER(Functions[define_label]): Define label sub sp, #4
LOGGER(Functions[is_label]): Check if sub sp, #4 is a label
LOGGER(Functions[is_label]): sub sp, #4 is not a label
LOGGER(Functions[set_number_of_instructions_labels]): Set number of instructions labels to 2
LOGGER(Functions[set_number_of_labels]): Set number of labels to 2
LOGGER(AsmParser[convert_into_binary]): ['ADD', 'sp,', '#16']
LOGGER(AsmParser[call_function]): Calling add_imm7 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 4: 0000100
LOGGER(AsmInstructions[instruction_sp_imm7]): 1011 00000 0000100
LOGGER(AsmParser[convert_into_binary]): ['SUB', 'sp,', '#4']
LOGGER(AsmParser[call_function]): Calling sub_imm7 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 0000001
LOGGER(AsmInstructions[instruction_sp_imm7]): 1011 00001 0000001
LOGGER(AsmParser[binary_to_hexa]): Converting binary to hexadecimal
LOGGER(AsmParser[binary_to_hexa]): ['b004', 'b081']
LOGGER(AsmParser[save_hexa_as_bin]): Saving the hexadecimal in ../../../src/tests/resources/output_binaries/miscellaneous/sp.bin
LOGGER(AsmReader[read_bin_file]): Reading ../../../src/tests/resources/output_binaries/miscellaneous/sp.bin
LOGGER(AsmParser[show_difference]): Expected/Actual: [92mb004[0m/b004 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92mb081[0m/b081 [OK]

LOGGER(AsmParser[show_difference]): Percentage of Correctness: 100.00%
LOGGER(Functions[define_label]): Define label .text
LOGGER(Functions[is_label]): Check if .text is a label
LOGGER(Functions[is_label]): .text is not a label
LOGGER(Functions[define_label]): Define label .syntax unified
LOGGER(Functions[is_label]): Check if .syntax unified is a label
LOGGER(Functions[is_label]): .syntax unified is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	67, "2.09"
LOGGER(Functions[is_label]): Check if .eabi_attribute	67, "2.09" is a label
LOGGER(Functions[is_label]): .eabi_attribute	67, "2.09" is not a label
LOGGER(Functions[define_label]): Define label .cpu	cortex-m0
LOGGER(Functions[is_label]): Check if .cpu	cortex-m0 is a label
LOGGER(Functions[is_label]): .cpu	cortex-m0 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	6, 12
LOGGER(Functions[is_label]): Check if .eabi_attribute	6, 12 is a label
LOGGER(Functions[is_label]): .eabi_attribute	6, 12 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	7, 77
LOGGER(Functions[is_label]): Check if .eabi_attribute	7, 77 is a label
LOGGER(Functions[is_label]): .eabi_attribute	7, 77 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	8, 0
LOGGER(Functions[is_label]): Check if .eabi_attribute	8, 0 is a label
LOGGER(Functions[is_label]): .eabi_attribute	8, 0 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	9, 1
LOGGER(Functions[is_label]): Check if .eabi_attribute	9, 1 is a label
LOGGER(Functions[is_label]): .eabi_attribute	9, 1 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	34, 0
LOGGER(Functions[is_label]): Check if .eabi_attribute	34, 0 is a label
LOGGER(Functions[is_label]): .eabi_attribute	34, 0 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	17, 1
LOGGER(Functions[is_label]): Check if .eabi_attribute	17, 1 is a label
LOGGER(Functions[is_label]): .eabi_attribute	17, 1 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	20, 1
LOGGER(Functions[is_label]): Check if .eabi_attribute	20, 1 is a label
LOGGER(Functions[is_label]): .eabi_attribute	20, 1 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	21, 0
LOGGER(Functions[is_label]): Check if .eabi_attribute	21, 0 is a label
LOGGER(Functions[is_label]): .eabi_attribute	21, 0 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	23, 3
LOGGER(Functions[is_label]): Check if .eabi_attribute	23, 3 is a label
LOGGER(Functions[is_label]): .eabi_attribute	23, 3 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	24, 1
LOGGER(Functions[is_label]): Check if .eabi_attribute	24, 1 is a label
LOGGER(Functions[is_label]): .eabi_attribute	24, 1 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	25, 1
LOGGER(Functions[is_label]): Check if .eabi_attribute	25, 1 is a label
LOGGER(Functions[is_label]): .eabi_attribute	25, 1 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	38, 1
LOGGER(Functions[is_label]): Check if .eabi_attribute	38, 1 is a label
LOGGER(Functions[is_label]): .eabi_attribute	38, 1 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	18, 4
LOGGER(Functions[is_label]): Check if .eabi_attribute	18, 4 is a label
LOGGER(Functions[is_label]): .eabi_attribute	18, 4 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	26, 2
LOGGER(Functions[is_label]): Check if .eabi_attribute	26, 2 is a label
LOGGER(Functions[is_label]): .eabi_attribute	26, 2 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	14, 0
LOGGER(Functions[is_label]): Check if .eabi_attribute	14, 0 is a label
LOGGER(Functions[is_label]): .eabi_attribute	14, 0 is not a label
LOGGER(Functions[define_label]): Define label .file	"main.c"
LOGGER(Functions[is_label]): Check if .file	"main.c" is a label
LOGGER(Functions[is_label]): .file	"main.c" is not a label
LOGGER(Functions[define_label]): Define label .globl	run
LOGGER(Functions[is_label]): Check if .globl	run is a label
LOGGER(Functions[is_label]): .globl	run is not a label
LOGGER(Functions[define_label]): Define label .p2align	1
LOGGER(Functions[is_label]): Check if .p2align	1 is a label
LOGGER(Functions[is_label]): .p2align	1 is not a label
LOGGER(Functions[define_label]): Define label .type	run,%function
LOGGER(Functions[is_label]): Check if .type	run,%function is a label
LOGGER(Functions[is_label]): .type	run,%function is not a label
LOGGER(Functions[define_label]): Define label .code	16
LOGGER(Functions[is_label]): Check if .code	16 is a label
LOGGER(Functions[is_label]): .code	16 is not a label
LOGGER(Functions[define_label]): Define label .thumb_func
LOGGER(Functions[is_label]): Check if .thumb_func is a label
LOGGER(Functions[is_label]): .thumb_func is not a label
LOGGER(Functions[define_label]): Define label .fnstart
LOGGER(Functions[is_label]): Check if .fnstart is a label
LOGGER(Functions[is_label]): .fnstart is not a label
LOGGER(Functions[define_label]): Define label .pad	#84
LOGGER(Functions[is_label]): Check if .pad	#84 is a label
LOGGER(Functions[is_label]): .pad	#84 is not a label
LOGGER(Functions[define_label]): Define label sub	sp, #84
LOGGER(Functions[is_label]): Check if sub	sp, #84 is a label
LOGGER(Functions[is_label]): sub	sp, #84 is not a label
LOGGER(Functions[define_label]): Define label @APP
LOGGER(Functions[is_label]): Check if @APP is a label
LOGGER(Functions[is_label]): @APP is not a label
LOGGER(Functions[define_label]): Define label sub	sp, #508
LOGGER(Functions[is_label]): Check if sub	sp, #508 is a label
LOGGER(Functions[is_label]): sub	sp, #508 is not a label
LOGGER(Functions[define_label]): Define label @NO_APP
LOGGER(Functions[is_label]): Check if @NO_APP is a label
LOGGER(Functions[is_label]): @NO_APP is not a label
LOGGER(Functions[define_label]): Define label @APP
LOGGER(Functions[is_label]): Check if @APP is a label
LOGGER(Functions[is_label]): @APP is not a label
LOGGER(Functions[define_label]): Define label sub	sp, #452
LOGGER(Functions[is_label]): Check if sub	sp, #452 is a label
LOGGER(Functions[is_label]): sub	sp, #452 is not a label
LOGGER(Functions[define_label]): Define label @NO_APP
LOGGER(Functions[is_label]): Check if @NO_APP is a label
LOGGER(Functions[is_label]): @NO_APP is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_1
LOGGER(Functions[is_label]): Check if b	.LBB0_1 is a label
LOGGER(Functions[is_label]): b	.LBB0_1 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_1:
LOGGER(Functions[is_label]): Check if .LBB0_1: is a label
LOGGER(Functions[is_label]): .LBB0_1: is a label
LOGGER(Functions[define_label]): Label .LBB0_1 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_2
LOGGER(Functions[is_label]): Check if b	.LBB0_2 is a label
LOGGER(Functions[is_label]): b	.LBB0_2 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_2:
LOGGER(Functions[is_label]): Check if .LBB0_2: is a label
LOGGER(Functions[is_label]): .LBB0_2: is a label
LOGGER(Functions[define_label]): Label .LBB0_2 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_3
LOGGER(Functions[is_label]): Check if b	.LBB0_3 is a label
LOGGER(Functions[is_label]): b	.LBB0_3 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_3:
LOGGER(Functions[is_label]): Check if .LBB0_3: is a label
LOGGER(Functions[is_label]): .LBB0_3: is a label
LOGGER(Functions[define_label]): Label .LBB0_3 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_4
LOGGER(Functions[is_label]): Check if b	.LBB0_4 is a label
LOGGER(Functions[is_label]): b	.LBB0_4 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_4:
LOGGER(Functions[is_label]): Check if .LBB0_4: is a label
LOGGER(Functions[is_label]): .LBB0_4: is a label
LOGGER(Functions[define_label]): Label .LBB0_4 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_5
LOGGER(Functions[is_label]): Check if b	.LBB0_5 is a label
LOGGER(Functions[is_label]): b	.LBB0_5 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_5:
LOGGER(Functions[is_label]): Check if .LBB0_5: is a label
LOGGER(Functions[is_label]): .LBB0_5: is a label
LOGGER(Functions[define_label]): Label .LBB0_5 defined
LOGGER(Functions[define_label]): Define label movs	r0, #80
LOGGER(Functions[is_label]): Check if movs	r0, #80 is a label
LOGGER(Functions[is_label]): movs	r0, #80 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #20]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #20] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #20] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_6
LOGGER(Functions[is_label]): Check if b	.LBB0_6 is a label
LOGGER(Functions[is_label]): b	.LBB0_6 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_6:
LOGGER(Functions[is_label]): Check if .LBB0_6: is a label
LOGGER(Functions[is_label]): .LBB0_6: is a label
LOGGER(Functions[define_label]): Label .LBB0_6 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_7
LOGGER(Functions[is_label]): Check if b	.LBB0_7 is a label
LOGGER(Functions[is_label]): b	.LBB0_7 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_7:
LOGGER(Functions[is_label]): Check if .LBB0_7: is a label
LOGGER(Functions[is_label]): .LBB0_7: is a label
LOGGER(Functions[define_label]): Label .LBB0_7 defined
LOGGER(Functions[define_label]): Define label movs	r0, #45
LOGGER(Functions[is_label]): Check if movs	r0, #45 is a label
LOGGER(Functions[is_label]): movs	r0, #45 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #20]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #20] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #20] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_8
LOGGER(Functions[is_label]): Check if b	.LBB0_8 is a label
LOGGER(Functions[is_label]): b	.LBB0_8 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_8:
LOGGER(Functions[is_label]): Check if .LBB0_8: is a label
LOGGER(Functions[is_label]): .LBB0_8: is a label
LOGGER(Functions[define_label]): Label .LBB0_8 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_9
LOGGER(Functions[is_label]): Check if b	.LBB0_9 is a label
LOGGER(Functions[is_label]): b	.LBB0_9 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_9:
LOGGER(Functions[is_label]): Check if .LBB0_9: is a label
LOGGER(Functions[is_label]): .LBB0_9: is a label
LOGGER(Functions[define_label]): Label .LBB0_9 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_10
LOGGER(Functions[is_label]): Check if b	.LBB0_10 is a label
LOGGER(Functions[is_label]): b	.LBB0_10 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_10:
LOGGER(Functions[is_label]): Check if .LBB0_10: is a label
LOGGER(Functions[is_label]): .LBB0_10: is a label
LOGGER(Functions[define_label]): Label .LBB0_10 defined
LOGGER(Functions[define_label]): Define label movs	r0, #65
LOGGER(Functions[is_label]): Check if movs	r0, #65 is a label
LOGGER(Functions[is_label]): movs	r0, #65 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #20]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #20] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #20] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_11
LOGGER(Functions[is_label]): Check if b	.LBB0_11 is a label
LOGGER(Functions[is_label]): b	.LBB0_11 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_11:
LOGGER(Functions[is_label]): Check if .LBB0_11: is a label
LOGGER(Functions[is_label]): .LBB0_11: is a label
LOGGER(Functions[define_label]): Label .LBB0_11 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_12
LOGGER(Functions[is_label]): Check if b	.LBB0_12 is a label
LOGGER(Functions[is_label]): b	.LBB0_12 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_12:
LOGGER(Functions[is_label]): Check if .LBB0_12: is a label
LOGGER(Functions[is_label]): .LBB0_12: is a label
LOGGER(Functions[define_label]): Label .LBB0_12 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_13
LOGGER(Functions[is_label]): Check if b	.LBB0_13 is a label
LOGGER(Functions[is_label]): b	.LBB0_13 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_13:
LOGGER(Functions[is_label]): Check if .LBB0_13: is a label
LOGGER(Functions[is_label]): .LBB0_13: is a label
LOGGER(Functions[define_label]): Label .LBB0_13 defined
LOGGER(Functions[define_label]): Define label movs	r0, #82
LOGGER(Functions[is_label]): Check if movs	r0, #82 is a label
LOGGER(Functions[is_label]): movs	r0, #82 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #20]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #20] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #20] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_14
LOGGER(Functions[is_label]): Check if b	.LBB0_14 is a label
LOGGER(Functions[is_label]): b	.LBB0_14 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_14:
LOGGER(Functions[is_label]): Check if .LBB0_14: is a label
LOGGER(Functions[is_label]): .LBB0_14: is a label
LOGGER(Functions[define_label]): Label .LBB0_14 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_15
LOGGER(Functions[is_label]): Check if b	.LBB0_15 is a label
LOGGER(Functions[is_label]): b	.LBB0_15 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_15:
LOGGER(Functions[is_label]): Check if .LBB0_15: is a label
LOGGER(Functions[is_label]): .LBB0_15: is a label
LOGGER(Functions[define_label]): Label .LBB0_15 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_16
LOGGER(Functions[is_label]): Check if b	.LBB0_16 is a label
LOGGER(Functions[is_label]): b	.LBB0_16 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_16:
LOGGER(Functions[is_label]): Check if .LBB0_16: is a label
LOGGER(Functions[is_label]): .LBB0_16: is a label
LOGGER(Functions[define_label]): Label .LBB0_16 defined
LOGGER(Functions[define_label]): Define label movs	r0, #77
LOGGER(Functions[is_label]): Check if movs	r0, #77 is a label
LOGGER(Functions[is_label]): movs	r0, #77 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #20]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #20] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #20] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_17
LOGGER(Functions[is_label]): Check if b	.LBB0_17 is a label
LOGGER(Functions[is_label]): b	.LBB0_17 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_17:
LOGGER(Functions[is_label]): Check if .LBB0_17: is a label
LOGGER(Functions[is_label]): .LBB0_17: is a label
LOGGER(Functions[define_label]): Label .LBB0_17 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_18
LOGGER(Functions[is_label]): Check if b	.LBB0_18 is a label
LOGGER(Functions[is_label]): b	.LBB0_18 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_18:
LOGGER(Functions[is_label]): Check if .LBB0_18: is a label
LOGGER(Functions[is_label]): .LBB0_18: is a label
LOGGER(Functions[define_label]): Label .LBB0_18 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_19
LOGGER(Functions[is_label]): Check if b	.LBB0_19 is a label
LOGGER(Functions[is_label]): b	.LBB0_19 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_19:
LOGGER(Functions[is_label]): Check if .LBB0_19: is a label
LOGGER(Functions[is_label]): .LBB0_19: is a label
LOGGER(Functions[define_label]): Label .LBB0_19 defined
LOGGER(Functions[define_label]): Define label movs	r0, #10
LOGGER(Functions[is_label]): Check if movs	r0, #10 is a label
LOGGER(Functions[is_label]): movs	r0, #10 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #20]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #20] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #20] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_20
LOGGER(Functions[is_label]): Check if b	.LBB0_20 is a label
LOGGER(Functions[is_label]): b	.LBB0_20 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_20:
LOGGER(Functions[is_label]): Check if .LBB0_20: is a label
LOGGER(Functions[is_label]): .LBB0_20: is a label
LOGGER(Functions[define_label]): Label .LBB0_20 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_21
LOGGER(Functions[is_label]): Check if b	.LBB0_21 is a label
LOGGER(Functions[is_label]): b	.LBB0_21 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_21:
LOGGER(Functions[is_label]): Check if .LBB0_21: is a label
LOGGER(Functions[is_label]): .LBB0_21: is a label
LOGGER(Functions[define_label]): Label .LBB0_21 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_22
LOGGER(Functions[is_label]): Check if b	.LBB0_22 is a label
LOGGER(Functions[is_label]): b	.LBB0_22 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_22:
LOGGER(Functions[is_label]): Check if .LBB0_22: is a label
LOGGER(Functions[is_label]): .LBB0_22: is a label
LOGGER(Functions[define_label]): Label .LBB0_22 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_23
LOGGER(Functions[is_label]): Check if b	.LBB0_23 is a label
LOGGER(Functions[is_label]): b	.LBB0_23 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_23:
LOGGER(Functions[is_label]): Check if .LBB0_23: is a label
LOGGER(Functions[is_label]): .LBB0_23: is a label
LOGGER(Functions[define_label]): Label .LBB0_23 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_24
LOGGER(Functions[is_label]): Check if b	.LBB0_24 is a label
LOGGER(Functions[is_label]): b	.LBB0_24 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_24:
LOGGER(Functions[is_label]): Check if .LBB0_24: is a label
LOGGER(Functions[is_label]): .LBB0_24: is a label
LOGGER(Functions[define_label]): Label .LBB0_24 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_25
LOGGER(Functions[is_label]): Check if b	.LBB0_25 is a label
LOGGER(Functions[is_label]): b	.LBB0_25 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_25:
LOGGER(Functions[is_label]): Check if .LBB0_25: is a label
LOGGER(Functions[is_label]): .LBB0_25: is a label
LOGGER(Functions[define_label]): Label .LBB0_25 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_26
LOGGER(Functions[is_label]): Check if b	.LBB0_26 is a label
LOGGER(Functions[is_label]): b	.LBB0_26 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_26:
LOGGER(Functions[is_label]): Check if .LBB0_26: is a label
LOGGER(Functions[is_label]): .LBB0_26: is a label
LOGGER(Functions[define_label]): Label .LBB0_26 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_27
LOGGER(Functions[is_label]): Check if b	.LBB0_27 is a label
LOGGER(Functions[is_label]): b	.LBB0_27 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_27:
LOGGER(Functions[is_label]): Check if .LBB0_27: is a label
LOGGER(Functions[is_label]): .LBB0_27: is a label
LOGGER(Functions[define_label]): Label .LBB0_27 defined
LOGGER(Functions[define_label]): Define label movs	r0, #53
LOGGER(Functions[is_label]): Check if movs	r0, #53 is a label
LOGGER(Functions[is_label]): movs	r0, #53 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #20]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #20] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #20] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_28
LOGGER(Functions[is_label]): Check if b	.LBB0_28 is a label
LOGGER(Functions[is_label]): b	.LBB0_28 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_28:
LOGGER(Functions[is_label]): Check if .LBB0_28: is a label
LOGGER(Functions[is_label]): .LBB0_28: is a label
LOGGER(Functions[define_label]): Label .LBB0_28 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_29
LOGGER(Functions[is_label]): Check if b	.LBB0_29 is a label
LOGGER(Functions[is_label]): b	.LBB0_29 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_29:
LOGGER(Functions[is_label]): Check if .LBB0_29: is a label
LOGGER(Functions[is_label]): .LBB0_29: is a label
LOGGER(Functions[define_label]): Label .LBB0_29 defined
LOGGER(Functions[define_label]): Define label movs	r0, #49
LOGGER(Functions[is_label]): Check if movs	r0, #49 is a label
LOGGER(Functions[is_label]): movs	r0, #49 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #20]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #20] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #20] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_30
LOGGER(Functions[is_label]): Check if b	.LBB0_30 is a label
LOGGER(Functions[is_label]): b	.LBB0_30 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_30:
LOGGER(Functions[is_label]): Check if .LBB0_30: is a label
LOGGER(Functions[is_label]): .LBB0_30: is a label
LOGGER(Functions[define_label]): Label .LBB0_30 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_31
LOGGER(Functions[is_label]): Check if b	.LBB0_31 is a label
LOGGER(Functions[is_label]): b	.LBB0_31 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_31:
LOGGER(Functions[is_label]): Check if .LBB0_31: is a label
LOGGER(Functions[is_label]): .LBB0_31: is a label
LOGGER(Functions[define_label]): Label .LBB0_31 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_32
LOGGER(Functions[is_label]): Check if b	.LBB0_32 is a label
LOGGER(Functions[is_label]): b	.LBB0_32 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_32:
LOGGER(Functions[is_label]): Check if .LBB0_32: is a label
LOGGER(Functions[is_label]): .LBB0_32: is a label
LOGGER(Functions[define_label]): Label .LBB0_32 defined
LOGGER(Functions[define_label]): Define label movs	r0, #50
LOGGER(Functions[is_label]): Check if movs	r0, #50 is a label
LOGGER(Functions[is_label]): movs	r0, #50 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #20]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #20] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #20] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_33
LOGGER(Functions[is_label]): Check if b	.LBB0_33 is a label
LOGGER(Functions[is_label]): b	.LBB0_33 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_33:
LOGGER(Functions[is_label]): Check if .LBB0_33: is a label
LOGGER(Functions[is_label]): .LBB0_33: is a label
LOGGER(Functions[define_label]): Label .LBB0_33 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_34
LOGGER(Functions[is_label]): Check if b	.LBB0_34 is a label
LOGGER(Functions[is_label]): b	.LBB0_34 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_34:
LOGGER(Functions[is_label]): Check if .LBB0_34: is a label
LOGGER(Functions[is_label]): .LBB0_34: is a label
LOGGER(Functions[define_label]): Label .LBB0_34 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_35
LOGGER(Functions[is_label]): Check if b	.LBB0_35 is a label
LOGGER(Functions[is_label]): b	.LBB0_35 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_35:
LOGGER(Functions[is_label]): Check if .LBB0_35: is a label
LOGGER(Functions[is_label]): .LBB0_35: is a label
LOGGER(Functions[define_label]): Label .LBB0_35 defined
LOGGER(Functions[define_label]): Define label movs	r0, #66
LOGGER(Functions[is_label]): Check if movs	r0, #66 is a label
LOGGER(Functions[is_label]): movs	r0, #66 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #20]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #20] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #20] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_36
LOGGER(Functions[is_label]): Check if b	.LBB0_36 is a label
LOGGER(Functions[is_label]): b	.LBB0_36 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_36:
LOGGER(Functions[is_label]): Check if .LBB0_36: is a label
LOGGER(Functions[is_label]): .LBB0_36: is a label
LOGGER(Functions[define_label]): Label .LBB0_36 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_37
LOGGER(Functions[is_label]): Check if b	.LBB0_37 is a label
LOGGER(Functions[is_label]): b	.LBB0_37 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_37:
LOGGER(Functions[is_label]): Check if .LBB0_37: is a label
LOGGER(Functions[is_label]): .LBB0_37: is a label
LOGGER(Functions[define_label]): Label .LBB0_37 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_38
LOGGER(Functions[is_label]): Check if b	.LBB0_38 is a label
LOGGER(Functions[is_label]): b	.LBB0_38 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_38:
LOGGER(Functions[is_label]): Check if .LBB0_38: is a label
LOGGER(Functions[is_label]): .LBB0_38: is a label
LOGGER(Functions[define_label]): Label .LBB0_38 defined
LOGGER(Functions[define_label]): Define label movs	r0, #97
LOGGER(Functions[is_label]): Check if movs	r0, #97 is a label
LOGGER(Functions[is_label]): movs	r0, #97 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #20]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #20] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #20] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_39
LOGGER(Functions[is_label]): Check if b	.LBB0_39 is a label
LOGGER(Functions[is_label]): b	.LBB0_39 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_39:
LOGGER(Functions[is_label]): Check if .LBB0_39: is a label
LOGGER(Functions[is_label]): .LBB0_39: is a label
LOGGER(Functions[define_label]): Label .LBB0_39 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_40
LOGGER(Functions[is_label]): Check if b	.LBB0_40 is a label
LOGGER(Functions[is_label]): b	.LBB0_40 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_40:
LOGGER(Functions[is_label]): Check if .LBB0_40: is a label
LOGGER(Functions[is_label]): .LBB0_40: is a label
LOGGER(Functions[define_label]): Label .LBB0_40 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_41
LOGGER(Functions[is_label]): Check if b	.LBB0_41 is a label
LOGGER(Functions[is_label]): b	.LBB0_41 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_41:
LOGGER(Functions[is_label]): Check if .LBB0_41: is a label
LOGGER(Functions[is_label]): .LBB0_41: is a label
LOGGER(Functions[define_label]): Label .LBB0_41 defined
LOGGER(Functions[define_label]): Define label movs	r0, #110
LOGGER(Functions[is_label]): Check if movs	r0, #110 is a label
LOGGER(Functions[is_label]): movs	r0, #110 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #20]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #20] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #20] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_42
LOGGER(Functions[is_label]): Check if b	.LBB0_42 is a label
LOGGER(Functions[is_label]): b	.LBB0_42 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_42:
LOGGER(Functions[is_label]): Check if .LBB0_42: is a label
LOGGER(Functions[is_label]): .LBB0_42: is a label
LOGGER(Functions[define_label]): Label .LBB0_42 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_43
LOGGER(Functions[is_label]): Check if b	.LBB0_43 is a label
LOGGER(Functions[is_label]): b	.LBB0_43 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_43:
LOGGER(Functions[is_label]): Check if .LBB0_43: is a label
LOGGER(Functions[is_label]): .LBB0_43: is a label
LOGGER(Functions[define_label]): Label .LBB0_43 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_44
LOGGER(Functions[is_label]): Check if b	.LBB0_44 is a label
LOGGER(Functions[is_label]): b	.LBB0_44 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_44:
LOGGER(Functions[is_label]): Check if .LBB0_44: is a label
LOGGER(Functions[is_label]): .LBB0_44: is a label
LOGGER(Functions[define_label]): Label .LBB0_44 defined
LOGGER(Functions[define_label]): Define label movs	r0, #107
LOGGER(Functions[is_label]): Check if movs	r0, #107 is a label
LOGGER(Functions[is_label]): movs	r0, #107 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #20]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #20] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #20] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_45
LOGGER(Functions[is_label]): Check if b	.LBB0_45 is a label
LOGGER(Functions[is_label]): b	.LBB0_45 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_45:
LOGGER(Functions[is_label]): Check if .LBB0_45: is a label
LOGGER(Functions[is_label]): .LBB0_45: is a label
LOGGER(Functions[define_label]): Label .LBB0_45 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_46
LOGGER(Functions[is_label]): Check if b	.LBB0_46 is a label
LOGGER(Functions[is_label]): b	.LBB0_46 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_46:
LOGGER(Functions[is_label]): Check if .LBB0_46: is a label
LOGGER(Functions[is_label]): .LBB0_46: is a label
LOGGER(Functions[define_label]): Label .LBB0_46 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_47
LOGGER(Functions[is_label]): Check if b	.LBB0_47 is a label
LOGGER(Functions[is_label]): b	.LBB0_47 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_47:
LOGGER(Functions[is_label]): Check if .LBB0_47: is a label
LOGGER(Functions[is_label]): .LBB0_47: is a label
LOGGER(Functions[define_label]): Label .LBB0_47 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_48
LOGGER(Functions[is_label]): Check if b	.LBB0_48 is a label
LOGGER(Functions[is_label]): b	.LBB0_48 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_48:
LOGGER(Functions[is_label]): Check if .LBB0_48: is a label
LOGGER(Functions[is_label]): .LBB0_48: is a label
LOGGER(Functions[define_label]): Label .LBB0_48 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_48
LOGGER(Functions[is_label]): Check if b	.LBB0_48 is a label
LOGGER(Functions[is_label]): b	.LBB0_48 is not a label
LOGGER(Functions[define_label]): Define label .Lfunc_end0:
LOGGER(Functions[is_label]): Check if .Lfunc_end0: is a label
LOGGER(Functions[is_label]): .Lfunc_end0: is a label
LOGGER(Functions[define_label]): Label .Lfunc_end0 defined
LOGGER(Functions[define_label]): Define label .size	run, .Lfunc_end0-run
LOGGER(Functions[is_label]): Check if .size	run, .Lfunc_end0-run is a label
LOGGER(Functions[is_label]): .size	run, .Lfunc_end0-run is not a label
LOGGER(Functions[define_label]): Define label .cantunwind
LOGGER(Functions[is_label]): Check if .cantunwind is a label
LOGGER(Functions[is_label]): .cantunwind is not a label
LOGGER(Functions[define_label]): Define label .fnend
LOGGER(Functions[is_label]): Check if .fnend is a label
LOGGER(Functions[is_label]): .fnend is not a label
LOGGER(Functions[define_label]): Define label .ident	"Ubuntu clang version 14.0.0-1ubuntu1.1"
LOGGER(Functions[is_label]): Check if .ident	"Ubuntu clang version 14.0.0-1ubuntu1.1" is a label
LOGGER(Functions[is_label]): .ident	"Ubuntu clang version 14.0.0-1ubuntu1.1" is not a label
LOGGER(Functions[define_label]): Define label .section	".note.GNU-stack","",%progbits
LOGGER(Functions[is_label]): Check if .section	".note.GNU-stack","",%progbits is a label
LOGGER(Functions[is_label]): .section	".note.GNU-stack","",%progbits is not a label
LOGGER(Functions[define_label]): Define label .addrsig
LOGGER(Functions[is_label]): Check if .addrsig is a label
LOGGER(Functions[is_label]): .addrsig is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	30, 6
LOGGER(Functions[is_label]): Check if .eabi_attribute	30, 6 is a label
LOGGER(Functions[is_label]): .eabi_attribute	30, 6 is not a label
LOGGER(Functions[set_number_of_instructions_labels]): Set number of instructions labels to 78
LOGGER(Functions[set_number_of_labels]): Set number of labels to 165
LOGGER(AsmParser[convert_into_binary]): ['SUB', 'sp,', '#84']
LOGGER(AsmParser[call_function]): Calling sub_imm7 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 21: 0010101
LOGGER(AsmInstructions[instruction_sp_imm7]): 1011 00001 0010101
LOGGER(AsmParser[convert_into_binary]): ['SUB', 'sp,', '#508']
LOGGER(AsmParser[call_function]): Calling sub_imm7 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 127: 1111111
LOGGER(AsmInstructions[instruction_sp_imm7]): 1011 00001 1111111
LOGGER(AsmParser[convert_into_binary]): ['SUB', 'sp,', '#452']
LOGGER(AsmParser[call_function]): Calling sub_imm7 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 113: 1110001
LOGGER(AsmInstructions[instruction_sp_imm7]): 1011 00001 1110001
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_1']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_2']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_3']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_4']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_5']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#80']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 80: 01010000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 01010000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#20']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 5: 00000101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000101 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_6']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_7']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#45']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 45: 00101101
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00101101
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#20']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 5: 00000101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000101 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_8']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_9']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_10']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#65']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 65: 01000001
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 01000001
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#20']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 5: 00000101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000101 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_11']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_12']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_13']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#82']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 82: 01010010
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 01010010
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#20']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 5: 00000101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000101 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_14']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_15']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_16']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#77']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 77: 01001101
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 01001101
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#20']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 5: 00000101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000101 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_17']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_18']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_19']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#10']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 10: 00001010
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00001010
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#20']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 5: 00000101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000101 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_20']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_21']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_22']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_23']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_24']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_25']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_26']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_27']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#53']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 53: 00110101
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00110101
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#20']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 5: 00000101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000101 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_28']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_29']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#49']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 49: 00110001
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00110001
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#20']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 5: 00000101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000101 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_30']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_31']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_32']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#50']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 50: 00110010
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00110010
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#20']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 5: 00000101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000101 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_33']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_34']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_35']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#66']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 66: 01000010
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 01000010
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#20']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 5: 00000101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000101 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_36']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_37']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_38']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#97']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 97: 01100001
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 01100001
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#20']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 5: 00000101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000101 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_39']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_40']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_41']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#110']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 110: 01101110
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 01101110
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#20']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 5: 00000101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000101 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_42']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_43']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_44']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#107']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 107: 01101011
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 01101011
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#20']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 5: 00000101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000101 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_45']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_46']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_47']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_48']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_48']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111101
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111101
LOGGER(AsmParser[binary_to_hexa]): Converting binary to hexadecimal
LOGGER(AsmParser[binary_to_hexa]): ['b095', 'b0ff', 'b0f1', 'e7fe', 'e7fe', 'e7fe', 'e7fe', 'e7fe', '2050', '9005', 'e7fe', 'e7fe', '202d', '9005', 'e7fe', 'e7fe', 'e7fe', '2041', '9005', 'e7fe', 'e7fe', 'e7fe', '2052', '9005', 'e7fe', 'e7fe', 'e7fe', '204d', '9005', 'e7fe', 'e7fe', 'e7fe', '200a', '9005', 'e7fe', 'e7fe', 'e7fe', 'e7fe', 'e7fe', 'e7fe', 'e7fe', 'e7fe', '2035', '9005', 'e7fe', 'e7fe', '2031', '9005', 'e7fe', 'e7fe', 'e7fe', '2032', '9005', 'e7fe', 'e7fe', 'e7fe', '2042', '9005', 'e7fe', 'e7fe', 'e7fe', '2061', '9005', 'e7fe', 'e7fe', 'e7fe', '206e', '9005', 'e7fe', 'e7fe', 'e7fe', '206b', '9005', 'e7fe', 'e7fe', 'e7fe', 'e7fe', 'e7fd']
LOGGER(AsmParser[save_hexa_as_bin]): Saving the hexadecimal in ../../../src/tests/resources/output_binaries/other/512Bank.bin
LOGGER(AsmReader[read_bin_file]): Reading ../../../src/tests/resources/output_binaries/other/512Bank.bin
LOGGER(Functions[define_label]): Define label .text
LOGGER(Functions[is_label]): Check if .text is a label
LOGGER(Functions[is_label]): .text is not a label
LOGGER(Functions[define_label]): Define label .syntax unified
LOGGER(Functions[is_label]): Check if .syntax unified is a label
LOGGER(Functions[is_label]): .syntax unified is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	67, "2.09"
LOGGER(Functions[is_label]): Check if .eabi_attribute	67, "2.09" is a label
LOGGER(Functions[is_label]): .eabi_attribute	67, "2.09" is not a label
LOGGER(Functions[define_label]): Define label .cpu	cortex-m0
LOGGER(Functions[is_label]): Check if .cpu	cortex-m0 is a label
LOGGER(Functions[is_label]): .cpu	cortex-m0 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	6, 12
LOGGER(Functions[is_label]): Check if .eabi_attribute	6, 12 is a label
LOGGER(Functions[is_label]): .eabi_attribute	6, 12 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	7, 77
LOGGER(Functions[is_label]): Check if .eabi_attribute	7, 77 is a label
LOGGER(Functions[is_label]): .eabi_attribute	7, 77 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	8, 0
LOGGER(Functions[is_label]): Check if .eabi_attribute	8, 0 is a label
LOGGER(Functions[is_label]): .eabi_attribute	8, 0 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	9, 1
LOGGER(Functions[is_label]): Check if .eabi_attribute	9, 1 is a label
LOGGER(Functions[is_label]): .eabi_attribute	9, 1 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	34, 0
LOGGER(Functions[is_label]): Check if .eabi_attribute	34, 0 is a label
LOGGER(Functions[is_label]): .eabi_attribute	34, 0 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	17, 1
LOGGER(Functions[is_label]): Check if .eabi_attribute	17, 1 is a label
LOGGER(Functions[is_label]): .eabi_attribute	17, 1 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	20, 1
LOGGER(Functions[is_label]): Check if .eabi_attribute	20, 1 is a label
LOGGER(Functions[is_label]): .eabi_attribute	20, 1 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	21, 1
LOGGER(Functions[is_label]): Check if .eabi_attribute	21, 1 is a label
LOGGER(Functions[is_label]): .eabi_attribute	21, 1 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	23, 3
LOGGER(Functions[is_label]): Check if .eabi_attribute	23, 3 is a label
LOGGER(Functions[is_label]): .eabi_attribute	23, 3 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	24, 1
LOGGER(Functions[is_label]): Check if .eabi_attribute	24, 1 is a label
LOGGER(Functions[is_label]): .eabi_attribute	24, 1 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	25, 1
LOGGER(Functions[is_label]): Check if .eabi_attribute	25, 1 is a label
LOGGER(Functions[is_label]): .eabi_attribute	25, 1 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	38, 1
LOGGER(Functions[is_label]): Check if .eabi_attribute	38, 1 is a label
LOGGER(Functions[is_label]): .eabi_attribute	38, 1 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	18, 4
LOGGER(Functions[is_label]): Check if .eabi_attribute	18, 4 is a label
LOGGER(Functions[is_label]): .eabi_attribute	18, 4 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	26, 2
LOGGER(Functions[is_label]): Check if .eabi_attribute	26, 2 is a label
LOGGER(Functions[is_label]): .eabi_attribute	26, 2 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	14, 0
LOGGER(Functions[is_label]): Check if .eabi_attribute	14, 0 is a label
LOGGER(Functions[is_label]): .eabi_attribute	14, 0 is not a label
LOGGER(Functions[define_label]): Define label .file	"calckeyb.c"
LOGGER(Functions[is_label]): Check if .file	"calckeyb.c" is a label
LOGGER(Functions[is_label]): .file	"calckeyb.c" is not a label
LOGGER(Functions[define_label]): Define label .globl	run
LOGGER(Functions[is_label]): Check if .globl	run is a label
LOGGER(Functions[is_label]): .globl	run is not a label
LOGGER(Functions[define_label]): Define label .p2align	1
LOGGER(Functions[is_label]): Check if .p2align	1 is a label
LOGGER(Functions[is_label]): .p2align	1 is not a label
LOGGER(Functions[define_label]): Define label .type	run,%function
LOGGER(Functions[is_label]): Check if .type	run,%function is a label
LOGGER(Functions[is_label]): .type	run,%function is not a label
LOGGER(Functions[define_label]): Define label .code	16
LOGGER(Functions[is_label]): Check if .code	16 is a label
LOGGER(Functions[is_label]): .code	16 is not a label
LOGGER(Functions[define_label]): Define label .thumb_func
LOGGER(Functions[is_label]): Check if .thumb_func is a label
LOGGER(Functions[is_label]): .thumb_func is not a label
LOGGER(Functions[define_label]): Define label .fnstart
LOGGER(Functions[is_label]): Check if .fnstart is a label
LOGGER(Functions[is_label]): .fnstart is not a label
LOGGER(Functions[define_label]): Define label .save	{r4, r5, r7, lr}
LOGGER(Functions[is_label]): Check if .save	{r4, r5, r7, lr} is a label
LOGGER(Functions[is_label]): .save	{r4, r5, r7, lr} is not a label
LOGGER(Functions[define_label]): Define label .setfp	r7, sp, #8
LOGGER(Functions[is_label]): Check if .setfp	r7, sp, #8 is a label
LOGGER(Functions[is_label]): .setfp	r7, sp, #8 is not a label
LOGGER(Functions[define_label]): Define label add	r7, sp, #8
LOGGER(Functions[is_label]): Check if add	r7, sp, #8 is a label
LOGGER(Functions[is_label]): add	r7, sp, #8 is not a label
LOGGER(Functions[define_label]): Define label .pad	#144
LOGGER(Functions[is_label]): Check if .pad	#144 is a label
LOGGER(Functions[is_label]): .pad	#144 is not a label
LOGGER(Functions[define_label]): Define label sub	sp, #144
LOGGER(Functions[is_label]): Check if sub	sp, #144 is a label
LOGGER(Functions[is_label]): sub	sp, #144 is not a label
LOGGER(Functions[define_label]): Define label @APP
LOGGER(Functions[is_label]): Check if @APP is a label
LOGGER(Functions[is_label]): @APP is not a label
LOGGER(Functions[define_label]): Define label sub	sp, #508
LOGGER(Functions[is_label]): Check if sub	sp, #508 is a label
LOGGER(Functions[is_label]): sub	sp, #508 is not a label
LOGGER(Functions[define_label]): Define label @NO_APP
LOGGER(Functions[is_label]): Check if @NO_APP is a label
LOGGER(Functions[is_label]): @NO_APP is not a label
LOGGER(Functions[define_label]): Define label @APP
LOGGER(Functions[is_label]): Check if @APP is a label
LOGGER(Functions[is_label]): @APP is not a label
LOGGER(Functions[define_label]): Define label sub	sp, #452
LOGGER(Functions[is_label]): Check if sub	sp, #452 is a label
LOGGER(Functions[is_label]): sub	sp, #452 is not a label
LOGGER(Functions[define_label]): Define label @NO_APP
LOGGER(Functions[is_label]): Check if @NO_APP is a label
LOGGER(Functions[is_label]): @NO_APP is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_1
LOGGER(Functions[is_label]): Check if b	.LBB0_1 is a label
LOGGER(Functions[is_label]): b	.LBB0_1 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_1:
LOGGER(Functions[is_label]): Check if .LBB0_1: is a label
LOGGER(Functions[is_label]): .LBB0_1: is a label
LOGGER(Functions[define_label]): Label .LBB0_1 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_2
LOGGER(Functions[is_label]): Check if b	.LBB0_2 is a label
LOGGER(Functions[is_label]): b	.LBB0_2 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_2:
LOGGER(Functions[is_label]): Check if .LBB0_2: is a label
LOGGER(Functions[is_label]): .LBB0_2: is a label
LOGGER(Functions[define_label]): Label .LBB0_2 defined
LOGGER(Functions[define_label]): Define label movs	r0, #65
LOGGER(Functions[is_label]): Check if movs	r0, #65 is a label
LOGGER(Functions[is_label]): movs	r0, #65 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #80]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #80] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #80] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_3
LOGGER(Functions[is_label]): Check if b	.LBB0_3 is a label
LOGGER(Functions[is_label]): b	.LBB0_3 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_3:
LOGGER(Functions[is_label]): Check if .LBB0_3: is a label
LOGGER(Functions[is_label]): .LBB0_3: is a label
LOGGER(Functions[define_label]): Label .LBB0_3 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_4
LOGGER(Functions[is_label]): Check if b	.LBB0_4 is a label
LOGGER(Functions[is_label]): b	.LBB0_4 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_4:
LOGGER(Functions[is_label]): Check if .LBB0_4: is a label
LOGGER(Functions[is_label]): .LBB0_4: is a label
LOGGER(Functions[define_label]): Label .LBB0_4 defined
LOGGER(Functions[define_label]): Define label movs	r0, #61
LOGGER(Functions[is_label]): Check if movs	r0, #61 is a label
LOGGER(Functions[is_label]): movs	r0, #61 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #80]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #80] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #80] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_5
LOGGER(Functions[is_label]): Check if b	.LBB0_5 is a label
LOGGER(Functions[is_label]): b	.LBB0_5 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_5:
LOGGER(Functions[is_label]): Check if .LBB0_5: is a label
LOGGER(Functions[is_label]): .LBB0_5: is a label
LOGGER(Functions[define_label]): Label .LBB0_5 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_6
LOGGER(Functions[is_label]): Check if b	.LBB0_6 is a label
LOGGER(Functions[is_label]): b	.LBB0_6 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_6:
LOGGER(Functions[is_label]): Check if .LBB0_6: is a label
LOGGER(Functions[is_label]): .LBB0_6: is a label
LOGGER(Functions[define_label]): Label .LBB0_6 defined
LOGGER(Functions[define_label]): Define label movs	r0, #0
LOGGER(Functions[is_label]): Check if movs	r0, #0 is a label
LOGGER(Functions[is_label]): movs	r0, #0 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #48]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #48] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #48] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_7
LOGGER(Functions[is_label]): Check if b	.LBB0_7 is a label
LOGGER(Functions[is_label]): b	.LBB0_7 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_7:
LOGGER(Functions[is_label]): Check if .LBB0_7: is a label
LOGGER(Functions[is_label]): .LBB0_7: is a label
LOGGER(Functions[define_label]): Label .LBB0_7 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_8
LOGGER(Functions[is_label]): Check if b	.LBB0_8 is a label
LOGGER(Functions[is_label]): b	.LBB0_8 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_8:
LOGGER(Functions[is_label]): Check if .LBB0_8: is a label
LOGGER(Functions[is_label]): .LBB0_8: is a label
LOGGER(Functions[define_label]): Label .LBB0_8 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_9
LOGGER(Functions[is_label]): Check if b	.LBB0_9 is a label
LOGGER(Functions[is_label]): b	.LBB0_9 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_9:
LOGGER(Functions[is_label]): Check if .LBB0_9: is a label
LOGGER(Functions[is_label]): .LBB0_9: is a label
LOGGER(Functions[define_label]): Label .LBB0_9 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #104]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #104] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #104] is not a label
LOGGER(Functions[define_label]): Define label cmp	r0, #0
LOGGER(Functions[is_label]): Check if cmp	r0, #0 is a label
LOGGER(Functions[is_label]): cmp	r0, #0 is not a label
LOGGER(Functions[define_label]): Define label bne	.LBB0_11
LOGGER(Functions[is_label]): Check if bne	.LBB0_11 is a label
LOGGER(Functions[is_label]): bne	.LBB0_11 is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_10
LOGGER(Functions[is_label]): Check if b	.LBB0_10 is a label
LOGGER(Functions[is_label]): b	.LBB0_10 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_10:
LOGGER(Functions[is_label]): Check if .LBB0_10: is a label
LOGGER(Functions[is_label]): .LBB0_10: is a label
LOGGER(Functions[define_label]): Label .LBB0_10 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_9
LOGGER(Functions[is_label]): Check if b	.LBB0_9 is a label
LOGGER(Functions[is_label]): b	.LBB0_9 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_11:
LOGGER(Functions[is_label]): Check if .LBB0_11: is a label
LOGGER(Functions[is_label]): .LBB0_11: is a label
LOGGER(Functions[define_label]): Label .LBB0_11 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_12
LOGGER(Functions[is_label]): Check if b	.LBB0_12 is a label
LOGGER(Functions[is_label]): b	.LBB0_12 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_12:
LOGGER(Functions[is_label]): Check if .LBB0_12: is a label
LOGGER(Functions[is_label]): .LBB0_12: is a label
LOGGER(Functions[define_label]): Label .LBB0_12 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #108]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #108] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #108] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #40]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #40] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #40] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #40]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #40] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #40] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #44]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #44] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #44] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #44]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #44] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #44] is not a label
LOGGER(Functions[define_label]): Define label cmp	r0, #10
LOGGER(Functions[is_label]): Check if cmp	r0, #10 is a label
LOGGER(Functions[is_label]): cmp	r0, #10 is not a label
LOGGER(Functions[define_label]): Define label bne	.LBB0_14
LOGGER(Functions[is_label]): Check if bne	.LBB0_14 is a label
LOGGER(Functions[is_label]): bne	.LBB0_14 is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_13
LOGGER(Functions[is_label]): Check if b	.LBB0_13 is a label
LOGGER(Functions[is_label]): b	.LBB0_13 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_13:
LOGGER(Functions[is_label]): Check if .LBB0_13: is a label
LOGGER(Functions[is_label]): .LBB0_13: is a label
LOGGER(Functions[define_label]): Label .LBB0_13 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_20
LOGGER(Functions[is_label]): Check if b	.LBB0_20 is a label
LOGGER(Functions[is_label]): b	.LBB0_20 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_14:
LOGGER(Functions[is_label]): Check if .LBB0_14: is a label
LOGGER(Functions[is_label]): .LBB0_14: is a label
LOGGER(Functions[define_label]): Label .LBB0_14 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #44]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #44] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #44] is not a label
LOGGER(Functions[define_label]): Define label cmp	r0, #48
LOGGER(Functions[is_label]): Check if cmp	r0, #48 is a label
LOGGER(Functions[is_label]): cmp	r0, #48 is not a label
LOGGER(Functions[define_label]): Define label blt	.LBB0_16
LOGGER(Functions[is_label]): Check if blt	.LBB0_16 is a label
LOGGER(Functions[is_label]): blt	.LBB0_16 is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_15
LOGGER(Functions[is_label]): Check if b	.LBB0_15 is a label
LOGGER(Functions[is_label]): b	.LBB0_15 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_15:
LOGGER(Functions[is_label]): Check if .LBB0_15: is a label
LOGGER(Functions[is_label]): .LBB0_15: is a label
LOGGER(Functions[define_label]): Label .LBB0_15 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #44]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #44] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #44] is not a label
LOGGER(Functions[define_label]): Define label cmp	r0, #58
LOGGER(Functions[is_label]): Check if cmp	r0, #58 is a label
LOGGER(Functions[is_label]): cmp	r0, #58 is not a label
LOGGER(Functions[define_label]): Define label blt	.LBB0_17
LOGGER(Functions[is_label]): Check if blt	.LBB0_17 is a label
LOGGER(Functions[is_label]): blt	.LBB0_17 is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_16
LOGGER(Functions[is_label]): Check if b	.LBB0_16 is a label
LOGGER(Functions[is_label]): b	.LBB0_16 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_16:
LOGGER(Functions[is_label]): Check if .LBB0_16: is a label
LOGGER(Functions[is_label]): .LBB0_16: is a label
LOGGER(Functions[define_label]): Label .LBB0_16 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_7
LOGGER(Functions[is_label]): Check if b	.LBB0_7 is a label
LOGGER(Functions[is_label]): b	.LBB0_7 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_17:
LOGGER(Functions[is_label]): Check if .LBB0_17: is a label
LOGGER(Functions[is_label]): .LBB0_17: is a label
LOGGER(Functions[define_label]): Label .LBB0_17 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_18
LOGGER(Functions[is_label]): Check if b	.LBB0_18 is a label
LOGGER(Functions[is_label]): b	.LBB0_18 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_18:
LOGGER(Functions[is_label]): Check if .LBB0_18: is a label
LOGGER(Functions[is_label]): .LBB0_18: is a label
LOGGER(Functions[define_label]): Label .LBB0_18 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #44]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #44] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #44] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #80]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #80] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #80] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_19
LOGGER(Functions[is_label]): Check if b	.LBB0_19 is a label
LOGGER(Functions[is_label]): b	.LBB0_19 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_19:
LOGGER(Functions[is_label]): Check if .LBB0_19: is a label
LOGGER(Functions[is_label]): .LBB0_19: is a label
LOGGER(Functions[define_label]): Label .LBB0_19 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #48]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #48] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #48] is not a label
LOGGER(Functions[define_label]): Define label movs	r1, #10
LOGGER(Functions[is_label]): Check if movs	r1, #10 is a label
LOGGER(Functions[is_label]): movs	r1, #10 is not a label
LOGGER(Functions[define_label]): Define label muls	r1, r0, r1
LOGGER(Functions[is_label]): Check if muls	r1, r0, r1 is a label
LOGGER(Functions[is_label]): muls	r1, r0, r1 is not a label
LOGGER(Functions[define_label]): Define label str	r1, [sp, #48]
LOGGER(Functions[is_label]): Check if str	r1, [sp, #48] is a label
LOGGER(Functions[is_label]): str	r1, [sp, #48] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #44]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #44] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #44] is not a label
LOGGER(Functions[define_label]): Define label ldr	r1, [sp, #48]
LOGGER(Functions[is_label]): Check if ldr	r1, [sp, #48] is a label
LOGGER(Functions[is_label]): ldr	r1, [sp, #48] is not a label
LOGGER(Functions[define_label]): Define label adds	r0, r1, r0
LOGGER(Functions[is_label]): Check if adds	r0, r1, r0 is a label
LOGGER(Functions[is_label]): adds	r0, r1, r0 is not a label
LOGGER(Functions[define_label]): Define label subs	r0, #48
LOGGER(Functions[is_label]): Check if subs	r0, #48 is a label
LOGGER(Functions[is_label]): subs	r0, #48 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #48]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #48] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #48] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_7
LOGGER(Functions[is_label]): Check if b	.LBB0_7 is a label
LOGGER(Functions[is_label]): b	.LBB0_7 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_20:
LOGGER(Functions[is_label]): Check if .LBB0_20: is a label
LOGGER(Functions[is_label]): .LBB0_20: is a label
LOGGER(Functions[define_label]): Label .LBB0_20 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #48]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #48] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #48] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #36]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #36] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #36] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #36]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #36] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #36] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #56]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #56] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #56] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_21
LOGGER(Functions[is_label]): Check if b	.LBB0_21 is a label
LOGGER(Functions[is_label]): b	.LBB0_21 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_21:
LOGGER(Functions[is_label]): Check if .LBB0_21: is a label
LOGGER(Functions[is_label]): .LBB0_21: is a label
LOGGER(Functions[define_label]): Label .LBB0_21 defined
LOGGER(Functions[define_label]): Define label movs	r0, #10
LOGGER(Functions[is_label]): Check if movs	r0, #10 is a label
LOGGER(Functions[is_label]): movs	r0, #10 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #80]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #80] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #80] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_22
LOGGER(Functions[is_label]): Check if b	.LBB0_22 is a label
LOGGER(Functions[is_label]): b	.LBB0_22 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_22:
LOGGER(Functions[is_label]): Check if .LBB0_22: is a label
LOGGER(Functions[is_label]): .LBB0_22: is a label
LOGGER(Functions[define_label]): Label .LBB0_22 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_23
LOGGER(Functions[is_label]): Check if b	.LBB0_23 is a label
LOGGER(Functions[is_label]): b	.LBB0_23 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_23:
LOGGER(Functions[is_label]): Check if .LBB0_23: is a label
LOGGER(Functions[is_label]): .LBB0_23: is a label
LOGGER(Functions[define_label]): Label .LBB0_23 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_24
LOGGER(Functions[is_label]): Check if b	.LBB0_24 is a label
LOGGER(Functions[is_label]): b	.LBB0_24 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_24:
LOGGER(Functions[is_label]): Check if .LBB0_24: is a label
LOGGER(Functions[is_label]): .LBB0_24: is a label
LOGGER(Functions[define_label]): Label .LBB0_24 defined
LOGGER(Functions[define_label]): Define label movs	r0, #66
LOGGER(Functions[is_label]): Check if movs	r0, #66 is a label
LOGGER(Functions[is_label]): movs	r0, #66 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #80]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #80] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #80] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_25
LOGGER(Functions[is_label]): Check if b	.LBB0_25 is a label
LOGGER(Functions[is_label]): b	.LBB0_25 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_25:
LOGGER(Functions[is_label]): Check if .LBB0_25: is a label
LOGGER(Functions[is_label]): .LBB0_25: is a label
LOGGER(Functions[define_label]): Label .LBB0_25 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_26
LOGGER(Functions[is_label]): Check if b	.LBB0_26 is a label
LOGGER(Functions[is_label]): b	.LBB0_26 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_26:
LOGGER(Functions[is_label]): Check if .LBB0_26: is a label
LOGGER(Functions[is_label]): .LBB0_26: is a label
LOGGER(Functions[define_label]): Label .LBB0_26 defined
LOGGER(Functions[define_label]): Define label movs	r0, #61
LOGGER(Functions[is_label]): Check if movs	r0, #61 is a label
LOGGER(Functions[is_label]): movs	r0, #61 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #80]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #80] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #80] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_27
LOGGER(Functions[is_label]): Check if b	.LBB0_27 is a label
LOGGER(Functions[is_label]): b	.LBB0_27 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_27:
LOGGER(Functions[is_label]): Check if .LBB0_27: is a label
LOGGER(Functions[is_label]): .LBB0_27: is a label
LOGGER(Functions[define_label]): Label .LBB0_27 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_28
LOGGER(Functions[is_label]): Check if b	.LBB0_28 is a label
LOGGER(Functions[is_label]): b	.LBB0_28 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_28:
LOGGER(Functions[is_label]): Check if .LBB0_28: is a label
LOGGER(Functions[is_label]): .LBB0_28: is a label
LOGGER(Functions[define_label]): Label .LBB0_28 defined
LOGGER(Functions[define_label]): Define label movs	r0, #0
LOGGER(Functions[is_label]): Check if movs	r0, #0 is a label
LOGGER(Functions[is_label]): movs	r0, #0 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #32]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #32] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #32] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_29
LOGGER(Functions[is_label]): Check if b	.LBB0_29 is a label
LOGGER(Functions[is_label]): b	.LBB0_29 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_29:
LOGGER(Functions[is_label]): Check if .LBB0_29: is a label
LOGGER(Functions[is_label]): .LBB0_29: is a label
LOGGER(Functions[define_label]): Label .LBB0_29 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_30
LOGGER(Functions[is_label]): Check if b	.LBB0_30 is a label
LOGGER(Functions[is_label]): b	.LBB0_30 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_30:
LOGGER(Functions[is_label]): Check if .LBB0_30: is a label
LOGGER(Functions[is_label]): .LBB0_30: is a label
LOGGER(Functions[define_label]): Label .LBB0_30 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_31
LOGGER(Functions[is_label]): Check if b	.LBB0_31 is a label
LOGGER(Functions[is_label]): b	.LBB0_31 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_31:
LOGGER(Functions[is_label]): Check if .LBB0_31: is a label
LOGGER(Functions[is_label]): .LBB0_31: is a label
LOGGER(Functions[define_label]): Label .LBB0_31 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #104]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #104] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #104] is not a label
LOGGER(Functions[define_label]): Define label cmp	r0, #0
LOGGER(Functions[is_label]): Check if cmp	r0, #0 is a label
LOGGER(Functions[is_label]): cmp	r0, #0 is not a label
LOGGER(Functions[define_label]): Define label bne	.LBB0_33
LOGGER(Functions[is_label]): Check if bne	.LBB0_33 is a label
LOGGER(Functions[is_label]): bne	.LBB0_33 is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_32
LOGGER(Functions[is_label]): Check if b	.LBB0_32 is a label
LOGGER(Functions[is_label]): b	.LBB0_32 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_32:
LOGGER(Functions[is_label]): Check if .LBB0_32: is a label
LOGGER(Functions[is_label]): .LBB0_32: is a label
LOGGER(Functions[define_label]): Label .LBB0_32 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_31
LOGGER(Functions[is_label]): Check if b	.LBB0_31 is a label
LOGGER(Functions[is_label]): b	.LBB0_31 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_33:
LOGGER(Functions[is_label]): Check if .LBB0_33: is a label
LOGGER(Functions[is_label]): .LBB0_33: is a label
LOGGER(Functions[define_label]): Label .LBB0_33 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_34
LOGGER(Functions[is_label]): Check if b	.LBB0_34 is a label
LOGGER(Functions[is_label]): b	.LBB0_34 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_34:
LOGGER(Functions[is_label]): Check if .LBB0_34: is a label
LOGGER(Functions[is_label]): .LBB0_34: is a label
LOGGER(Functions[define_label]): Label .LBB0_34 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #108]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #108] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #108] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #24]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #24] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #24] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #24]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #24] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #24] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #28]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #28] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #28] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #28]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #28] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #28] is not a label
LOGGER(Functions[define_label]): Define label cmp	r0, #10
LOGGER(Functions[is_label]): Check if cmp	r0, #10 is a label
LOGGER(Functions[is_label]): cmp	r0, #10 is not a label
LOGGER(Functions[define_label]): Define label bne	.LBB0_36
LOGGER(Functions[is_label]): Check if bne	.LBB0_36 is a label
LOGGER(Functions[is_label]): bne	.LBB0_36 is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_35
LOGGER(Functions[is_label]): Check if b	.LBB0_35 is a label
LOGGER(Functions[is_label]): b	.LBB0_35 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_35:
LOGGER(Functions[is_label]): Check if .LBB0_35: is a label
LOGGER(Functions[is_label]): .LBB0_35: is a label
LOGGER(Functions[define_label]): Label .LBB0_35 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_42
LOGGER(Functions[is_label]): Check if b	.LBB0_42 is a label
LOGGER(Functions[is_label]): b	.LBB0_42 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_36:
LOGGER(Functions[is_label]): Check if .LBB0_36: is a label
LOGGER(Functions[is_label]): .LBB0_36: is a label
LOGGER(Functions[define_label]): Label .LBB0_36 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #28]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #28] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #28] is not a label
LOGGER(Functions[define_label]): Define label cmp	r0, #48
LOGGER(Functions[is_label]): Check if cmp	r0, #48 is a label
LOGGER(Functions[is_label]): cmp	r0, #48 is not a label
LOGGER(Functions[define_label]): Define label blt	.LBB0_38
LOGGER(Functions[is_label]): Check if blt	.LBB0_38 is a label
LOGGER(Functions[is_label]): blt	.LBB0_38 is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_37
LOGGER(Functions[is_label]): Check if b	.LBB0_37 is a label
LOGGER(Functions[is_label]): b	.LBB0_37 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_37:
LOGGER(Functions[is_label]): Check if .LBB0_37: is a label
LOGGER(Functions[is_label]): .LBB0_37: is a label
LOGGER(Functions[define_label]): Label .LBB0_37 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #28]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #28] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #28] is not a label
LOGGER(Functions[define_label]): Define label cmp	r0, #58
LOGGER(Functions[is_label]): Check if cmp	r0, #58 is a label
LOGGER(Functions[is_label]): cmp	r0, #58 is not a label
LOGGER(Functions[define_label]): Define label blt	.LBB0_39
LOGGER(Functions[is_label]): Check if blt	.LBB0_39 is a label
LOGGER(Functions[is_label]): blt	.LBB0_39 is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_38
LOGGER(Functions[is_label]): Check if b	.LBB0_38 is a label
LOGGER(Functions[is_label]): b	.LBB0_38 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_38:
LOGGER(Functions[is_label]): Check if .LBB0_38: is a label
LOGGER(Functions[is_label]): .LBB0_38: is a label
LOGGER(Functions[define_label]): Label .LBB0_38 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_29
LOGGER(Functions[is_label]): Check if b	.LBB0_29 is a label
LOGGER(Functions[is_label]): b	.LBB0_29 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_39:
LOGGER(Functions[is_label]): Check if .LBB0_39: is a label
LOGGER(Functions[is_label]): .LBB0_39: is a label
LOGGER(Functions[define_label]): Label .LBB0_39 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_40
LOGGER(Functions[is_label]): Check if b	.LBB0_40 is a label
LOGGER(Functions[is_label]): b	.LBB0_40 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_40:
LOGGER(Functions[is_label]): Check if .LBB0_40: is a label
LOGGER(Functions[is_label]): .LBB0_40: is a label
LOGGER(Functions[define_label]): Label .LBB0_40 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #28]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #28] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #28] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #80]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #80] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #80] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_41
LOGGER(Functions[is_label]): Check if b	.LBB0_41 is a label
LOGGER(Functions[is_label]): b	.LBB0_41 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_41:
LOGGER(Functions[is_label]): Check if .LBB0_41: is a label
LOGGER(Functions[is_label]): .LBB0_41: is a label
LOGGER(Functions[define_label]): Label .LBB0_41 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #32]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #32] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #32] is not a label
LOGGER(Functions[define_label]): Define label movs	r1, #10
LOGGER(Functions[is_label]): Check if movs	r1, #10 is a label
LOGGER(Functions[is_label]): movs	r1, #10 is not a label
LOGGER(Functions[define_label]): Define label muls	r1, r0, r1
LOGGER(Functions[is_label]): Check if muls	r1, r0, r1 is a label
LOGGER(Functions[is_label]): muls	r1, r0, r1 is not a label
LOGGER(Functions[define_label]): Define label str	r1, [sp, #32]
LOGGER(Functions[is_label]): Check if str	r1, [sp, #32] is a label
LOGGER(Functions[is_label]): str	r1, [sp, #32] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #28]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #28] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #28] is not a label
LOGGER(Functions[define_label]): Define label ldr	r1, [sp, #32]
LOGGER(Functions[is_label]): Check if ldr	r1, [sp, #32] is a label
LOGGER(Functions[is_label]): ldr	r1, [sp, #32] is not a label
LOGGER(Functions[define_label]): Define label adds	r0, r1, r0
LOGGER(Functions[is_label]): Check if adds	r0, r1, r0 is a label
LOGGER(Functions[is_label]): adds	r0, r1, r0 is not a label
LOGGER(Functions[define_label]): Define label subs	r0, #48
LOGGER(Functions[is_label]): Check if subs	r0, #48 is a label
LOGGER(Functions[is_label]): subs	r0, #48 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #32]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #32] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #32] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_29
LOGGER(Functions[is_label]): Check if b	.LBB0_29 is a label
LOGGER(Functions[is_label]): b	.LBB0_29 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_42:
LOGGER(Functions[is_label]): Check if .LBB0_42: is a label
LOGGER(Functions[is_label]): .LBB0_42: is a label
LOGGER(Functions[define_label]): Label .LBB0_42 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #32]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #32] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #32] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #20]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #20] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #20] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #20]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #20] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #20] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #52]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #52] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #52] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_43
LOGGER(Functions[is_label]): Check if b	.LBB0_43 is a label
LOGGER(Functions[is_label]): b	.LBB0_43 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_43:
LOGGER(Functions[is_label]): Check if .LBB0_43: is a label
LOGGER(Functions[is_label]): .LBB0_43: is a label
LOGGER(Functions[define_label]): Label .LBB0_43 defined
LOGGER(Functions[define_label]): Define label movs	r0, #10
LOGGER(Functions[is_label]): Check if movs	r0, #10 is a label
LOGGER(Functions[is_label]): movs	r0, #10 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #80]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #80] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #80] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_44
LOGGER(Functions[is_label]): Check if b	.LBB0_44 is a label
LOGGER(Functions[is_label]): b	.LBB0_44 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_44:
LOGGER(Functions[is_label]): Check if .LBB0_44: is a label
LOGGER(Functions[is_label]): .LBB0_44: is a label
LOGGER(Functions[define_label]): Label .LBB0_44 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_45
LOGGER(Functions[is_label]): Check if b	.LBB0_45 is a label
LOGGER(Functions[is_label]): b	.LBB0_45 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_45:
LOGGER(Functions[is_label]): Check if .LBB0_45: is a label
LOGGER(Functions[is_label]): .LBB0_45: is a label
LOGGER(Functions[define_label]): Label .LBB0_45 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_46
LOGGER(Functions[is_label]): Check if b	.LBB0_46 is a label
LOGGER(Functions[is_label]): b	.LBB0_46 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_46:
LOGGER(Functions[is_label]): Check if .LBB0_46: is a label
LOGGER(Functions[is_label]): .LBB0_46: is a label
LOGGER(Functions[define_label]): Label .LBB0_46 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_47
LOGGER(Functions[is_label]): Check if b	.LBB0_47 is a label
LOGGER(Functions[is_label]): b	.LBB0_47 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_47:
LOGGER(Functions[is_label]): Check if .LBB0_47: is a label
LOGGER(Functions[is_label]): .LBB0_47: is a label
LOGGER(Functions[define_label]): Label .LBB0_47 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_48
LOGGER(Functions[is_label]): Check if b	.LBB0_48 is a label
LOGGER(Functions[is_label]): b	.LBB0_48 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_48:
LOGGER(Functions[is_label]): Check if .LBB0_48: is a label
LOGGER(Functions[is_label]): .LBB0_48: is a label
LOGGER(Functions[define_label]): Label .LBB0_48 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_49
LOGGER(Functions[is_label]): Check if b	.LBB0_49 is a label
LOGGER(Functions[is_label]): b	.LBB0_49 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_49:
LOGGER(Functions[is_label]): Check if .LBB0_49: is a label
LOGGER(Functions[is_label]): .LBB0_49: is a label
LOGGER(Functions[define_label]): Label .LBB0_49 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_50
LOGGER(Functions[is_label]): Check if b	.LBB0_50 is a label
LOGGER(Functions[is_label]): b	.LBB0_50 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_50:
LOGGER(Functions[is_label]): Check if .LBB0_50: is a label
LOGGER(Functions[is_label]): .LBB0_50: is a label
LOGGER(Functions[define_label]): Label .LBB0_50 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_51
LOGGER(Functions[is_label]): Check if b	.LBB0_51 is a label
LOGGER(Functions[is_label]): b	.LBB0_51 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_51:
LOGGER(Functions[is_label]): Check if .LBB0_51: is a label
LOGGER(Functions[is_label]): .LBB0_51: is a label
LOGGER(Functions[define_label]): Label .LBB0_51 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_52
LOGGER(Functions[is_label]): Check if b	.LBB0_52 is a label
LOGGER(Functions[is_label]): b	.LBB0_52 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_52:
LOGGER(Functions[is_label]): Check if .LBB0_52: is a label
LOGGER(Functions[is_label]): .LBB0_52: is a label
LOGGER(Functions[define_label]): Label .LBB0_52 defined
LOGGER(Functions[define_label]): Define label movs	r0, #43
LOGGER(Functions[is_label]): Check if movs	r0, #43 is a label
LOGGER(Functions[is_label]): movs	r0, #43 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #80]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #80] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #80] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_53
LOGGER(Functions[is_label]): Check if b	.LBB0_53 is a label
LOGGER(Functions[is_label]): b	.LBB0_53 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_53:
LOGGER(Functions[is_label]): Check if .LBB0_53: is a label
LOGGER(Functions[is_label]): .LBB0_53: is a label
LOGGER(Functions[define_label]): Label .LBB0_53 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_54
LOGGER(Functions[is_label]): Check if b	.LBB0_54 is a label
LOGGER(Functions[is_label]): b	.LBB0_54 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_54:
LOGGER(Functions[is_label]): Check if .LBB0_54: is a label
LOGGER(Functions[is_label]): .LBB0_54: is a label
LOGGER(Functions[define_label]): Label .LBB0_54 defined
LOGGER(Functions[define_label]): Define label movs	r0, #45
LOGGER(Functions[is_label]): Check if movs	r0, #45 is a label
LOGGER(Functions[is_label]): movs	r0, #45 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #80]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #80] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #80] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_55
LOGGER(Functions[is_label]): Check if b	.LBB0_55 is a label
LOGGER(Functions[is_label]): b	.LBB0_55 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_55:
LOGGER(Functions[is_label]): Check if .LBB0_55: is a label
LOGGER(Functions[is_label]): .LBB0_55: is a label
LOGGER(Functions[define_label]): Label .LBB0_55 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_56
LOGGER(Functions[is_label]): Check if b	.LBB0_56 is a label
LOGGER(Functions[is_label]): b	.LBB0_56 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_56:
LOGGER(Functions[is_label]): Check if .LBB0_56: is a label
LOGGER(Functions[is_label]): .LBB0_56: is a label
LOGGER(Functions[define_label]): Label .LBB0_56 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_57
LOGGER(Functions[is_label]): Check if b	.LBB0_57 is a label
LOGGER(Functions[is_label]): b	.LBB0_57 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_57:
LOGGER(Functions[is_label]): Check if .LBB0_57: is a label
LOGGER(Functions[is_label]): .LBB0_57: is a label
LOGGER(Functions[define_label]): Label .LBB0_57 defined
LOGGER(Functions[define_label]): Define label movs	r0, #42
LOGGER(Functions[is_label]): Check if movs	r0, #42 is a label
LOGGER(Functions[is_label]): movs	r0, #42 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #80]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #80] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #80] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_58
LOGGER(Functions[is_label]): Check if b	.LBB0_58 is a label
LOGGER(Functions[is_label]): b	.LBB0_58 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_58:
LOGGER(Functions[is_label]): Check if .LBB0_58: is a label
LOGGER(Functions[is_label]): .LBB0_58: is a label
LOGGER(Functions[define_label]): Label .LBB0_58 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_59
LOGGER(Functions[is_label]): Check if b	.LBB0_59 is a label
LOGGER(Functions[is_label]): b	.LBB0_59 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_59:
LOGGER(Functions[is_label]): Check if .LBB0_59: is a label
LOGGER(Functions[is_label]): .LBB0_59: is a label
LOGGER(Functions[define_label]): Label .LBB0_59 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_60
LOGGER(Functions[is_label]): Check if b	.LBB0_60 is a label
LOGGER(Functions[is_label]): b	.LBB0_60 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_60:
LOGGER(Functions[is_label]): Check if .LBB0_60: is a label
LOGGER(Functions[is_label]): .LBB0_60: is a label
LOGGER(Functions[define_label]): Label .LBB0_60 defined
LOGGER(Functions[define_label]): Define label movs	r0, #47
LOGGER(Functions[is_label]): Check if movs	r0, #47 is a label
LOGGER(Functions[is_label]): movs	r0, #47 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #80]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #80] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #80] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_61
LOGGER(Functions[is_label]): Check if b	.LBB0_61 is a label
LOGGER(Functions[is_label]): b	.LBB0_61 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_61:
LOGGER(Functions[is_label]): Check if .LBB0_61: is a label
LOGGER(Functions[is_label]): .LBB0_61: is a label
LOGGER(Functions[define_label]): Label .LBB0_61 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_62
LOGGER(Functions[is_label]): Check if b	.LBB0_62 is a label
LOGGER(Functions[is_label]): b	.LBB0_62 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_62:
LOGGER(Functions[is_label]): Check if .LBB0_62: is a label
LOGGER(Functions[is_label]): .LBB0_62: is a label
LOGGER(Functions[define_label]): Label .LBB0_62 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_63
LOGGER(Functions[is_label]): Check if b	.LBB0_63 is a label
LOGGER(Functions[is_label]): b	.LBB0_63 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_63:
LOGGER(Functions[is_label]): Check if .LBB0_63: is a label
LOGGER(Functions[is_label]): .LBB0_63: is a label
LOGGER(Functions[define_label]): Label .LBB0_63 defined
LOGGER(Functions[define_label]): Define label movs	r0, #37
LOGGER(Functions[is_label]): Check if movs	r0, #37 is a label
LOGGER(Functions[is_label]): movs	r0, #37 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #80]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #80] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #80] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_64
LOGGER(Functions[is_label]): Check if b	.LBB0_64 is a label
LOGGER(Functions[is_label]): b	.LBB0_64 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_64:
LOGGER(Functions[is_label]): Check if .LBB0_64: is a label
LOGGER(Functions[is_label]): .LBB0_64: is a label
LOGGER(Functions[define_label]): Label .LBB0_64 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_65
LOGGER(Functions[is_label]): Check if b	.LBB0_65 is a label
LOGGER(Functions[is_label]): b	.LBB0_65 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_65:
LOGGER(Functions[is_label]): Check if .LBB0_65: is a label
LOGGER(Functions[is_label]): .LBB0_65: is a label
LOGGER(Functions[define_label]): Label .LBB0_65 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_66
LOGGER(Functions[is_label]): Check if b	.LBB0_66 is a label
LOGGER(Functions[is_label]): b	.LBB0_66 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_66:
LOGGER(Functions[is_label]): Check if .LBB0_66: is a label
LOGGER(Functions[is_label]): .LBB0_66: is a label
LOGGER(Functions[define_label]): Label .LBB0_66 defined
LOGGER(Functions[define_label]): Define label movs	r0, #38
LOGGER(Functions[is_label]): Check if movs	r0, #38 is a label
LOGGER(Functions[is_label]): movs	r0, #38 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #80]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #80] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #80] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_67
LOGGER(Functions[is_label]): Check if b	.LBB0_67 is a label
LOGGER(Functions[is_label]): b	.LBB0_67 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_67:
LOGGER(Functions[is_label]): Check if .LBB0_67: is a label
LOGGER(Functions[is_label]): .LBB0_67: is a label
LOGGER(Functions[define_label]): Label .LBB0_67 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_68
LOGGER(Functions[is_label]): Check if b	.LBB0_68 is a label
LOGGER(Functions[is_label]): b	.LBB0_68 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_68:
LOGGER(Functions[is_label]): Check if .LBB0_68: is a label
LOGGER(Functions[is_label]): .LBB0_68: is a label
LOGGER(Functions[define_label]): Label .LBB0_68 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_69
LOGGER(Functions[is_label]): Check if b	.LBB0_69 is a label
LOGGER(Functions[is_label]): b	.LBB0_69 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_69:
LOGGER(Functions[is_label]): Check if .LBB0_69: is a label
LOGGER(Functions[is_label]): .LBB0_69: is a label
LOGGER(Functions[define_label]): Label .LBB0_69 defined
LOGGER(Functions[define_label]): Define label movs	r0, #124
LOGGER(Functions[is_label]): Check if movs	r0, #124 is a label
LOGGER(Functions[is_label]): movs	r0, #124 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #80]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #80] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #80] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_70
LOGGER(Functions[is_label]): Check if b	.LBB0_70 is a label
LOGGER(Functions[is_label]): b	.LBB0_70 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_70:
LOGGER(Functions[is_label]): Check if .LBB0_70: is a label
LOGGER(Functions[is_label]): .LBB0_70: is a label
LOGGER(Functions[define_label]): Label .LBB0_70 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_71
LOGGER(Functions[is_label]): Check if b	.LBB0_71 is a label
LOGGER(Functions[is_label]): b	.LBB0_71 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_71:
LOGGER(Functions[is_label]): Check if .LBB0_71: is a label
LOGGER(Functions[is_label]): .LBB0_71: is a label
LOGGER(Functions[define_label]): Label .LBB0_71 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_72
LOGGER(Functions[is_label]): Check if b	.LBB0_72 is a label
LOGGER(Functions[is_label]): b	.LBB0_72 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_72:
LOGGER(Functions[is_label]): Check if .LBB0_72: is a label
LOGGER(Functions[is_label]): .LBB0_72: is a label
LOGGER(Functions[define_label]): Label .LBB0_72 defined
LOGGER(Functions[define_label]): Define label movs	r0, #94
LOGGER(Functions[is_label]): Check if movs	r0, #94 is a label
LOGGER(Functions[is_label]): movs	r0, #94 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #80]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #80] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #80] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_73
LOGGER(Functions[is_label]): Check if b	.LBB0_73 is a label
LOGGER(Functions[is_label]): b	.LBB0_73 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_73:
LOGGER(Functions[is_label]): Check if .LBB0_73: is a label
LOGGER(Functions[is_label]): .LBB0_73: is a label
LOGGER(Functions[define_label]): Label .LBB0_73 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_74
LOGGER(Functions[is_label]): Check if b	.LBB0_74 is a label
LOGGER(Functions[is_label]): b	.LBB0_74 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_74:
LOGGER(Functions[is_label]): Check if .LBB0_74: is a label
LOGGER(Functions[is_label]): .LBB0_74: is a label
LOGGER(Functions[define_label]): Label .LBB0_74 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_75
LOGGER(Functions[is_label]): Check if b	.LBB0_75 is a label
LOGGER(Functions[is_label]): b	.LBB0_75 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_75:
LOGGER(Functions[is_label]): Check if .LBB0_75: is a label
LOGGER(Functions[is_label]): .LBB0_75: is a label
LOGGER(Functions[define_label]): Label .LBB0_75 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_76
LOGGER(Functions[is_label]): Check if b	.LBB0_76 is a label
LOGGER(Functions[is_label]): b	.LBB0_76 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_76:
LOGGER(Functions[is_label]): Check if .LBB0_76: is a label
LOGGER(Functions[is_label]): .LBB0_76: is a label
LOGGER(Functions[define_label]): Label .LBB0_76 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_77
LOGGER(Functions[is_label]): Check if b	.LBB0_77 is a label
LOGGER(Functions[is_label]): b	.LBB0_77 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_77:
LOGGER(Functions[is_label]): Check if .LBB0_77: is a label
LOGGER(Functions[is_label]): .LBB0_77: is a label
LOGGER(Functions[define_label]): Label .LBB0_77 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #104]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #104] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #104] is not a label
LOGGER(Functions[define_label]): Define label cmp	r0, #0
LOGGER(Functions[is_label]): Check if cmp	r0, #0 is a label
LOGGER(Functions[is_label]): cmp	r0, #0 is not a label
LOGGER(Functions[define_label]): Define label bne	.LBB0_79
LOGGER(Functions[is_label]): Check if bne	.LBB0_79 is a label
LOGGER(Functions[is_label]): bne	.LBB0_79 is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_78
LOGGER(Functions[is_label]): Check if b	.LBB0_78 is a label
LOGGER(Functions[is_label]): b	.LBB0_78 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_78:
LOGGER(Functions[is_label]): Check if .LBB0_78: is a label
LOGGER(Functions[is_label]): .LBB0_78: is a label
LOGGER(Functions[define_label]): Label .LBB0_78 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_77
LOGGER(Functions[is_label]): Check if b	.LBB0_77 is a label
LOGGER(Functions[is_label]): b	.LBB0_77 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_79:
LOGGER(Functions[is_label]): Check if .LBB0_79: is a label
LOGGER(Functions[is_label]): .LBB0_79: is a label
LOGGER(Functions[define_label]): Label .LBB0_79 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_80
LOGGER(Functions[is_label]): Check if b	.LBB0_80 is a label
LOGGER(Functions[is_label]): b	.LBB0_80 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_80:
LOGGER(Functions[is_label]): Check if .LBB0_80: is a label
LOGGER(Functions[is_label]): .LBB0_80: is a label
LOGGER(Functions[define_label]): Label .LBB0_80 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #108]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #108] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #108] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #12]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #12] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #12] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #12]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #12] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #12] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #16]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #16] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #16] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #16]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #16] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #16] is not a label
LOGGER(Functions[define_label]): Define label cmp	r0, #37
LOGGER(Functions[is_label]): Check if cmp	r0, #37 is a label
LOGGER(Functions[is_label]): cmp	r0, #37 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp]
LOGGER(Functions[is_label]): Check if str	r0, [sp] is a label
LOGGER(Functions[is_label]): str	r0, [sp] is not a label
LOGGER(Functions[define_label]): Define label beq	.LBB0_92
LOGGER(Functions[is_label]): Check if beq	.LBB0_92 is a label
LOGGER(Functions[is_label]): beq	.LBB0_92 is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_81
LOGGER(Functions[is_label]): Check if b	.LBB0_81 is a label
LOGGER(Functions[is_label]): b	.LBB0_81 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_81:
LOGGER(Functions[is_label]): Check if .LBB0_81: is a label
LOGGER(Functions[is_label]): .LBB0_81: is a label
LOGGER(Functions[define_label]): Label .LBB0_81 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp] is not a label
LOGGER(Functions[define_label]): Define label cmp	r0, #38
LOGGER(Functions[is_label]): Check if cmp	r0, #38 is a label
LOGGER(Functions[is_label]): cmp	r0, #38 is not a label
LOGGER(Functions[define_label]): Define label beq	.LBB0_93
LOGGER(Functions[is_label]): Check if beq	.LBB0_93 is a label
LOGGER(Functions[is_label]): beq	.LBB0_93 is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_82
LOGGER(Functions[is_label]): Check if b	.LBB0_82 is a label
LOGGER(Functions[is_label]): b	.LBB0_82 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_82:
LOGGER(Functions[is_label]): Check if .LBB0_82: is a label
LOGGER(Functions[is_label]): .LBB0_82: is a label
LOGGER(Functions[define_label]): Label .LBB0_82 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp] is not a label
LOGGER(Functions[define_label]): Define label cmp	r0, #42
LOGGER(Functions[is_label]): Check if cmp	r0, #42 is a label
LOGGER(Functions[is_label]): cmp	r0, #42 is not a label
LOGGER(Functions[define_label]): Define label beq	.LBB0_90
LOGGER(Functions[is_label]): Check if beq	.LBB0_90 is a label
LOGGER(Functions[is_label]): beq	.LBB0_90 is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_83
LOGGER(Functions[is_label]): Check if b	.LBB0_83 is a label
LOGGER(Functions[is_label]): b	.LBB0_83 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_83:
LOGGER(Functions[is_label]): Check if .LBB0_83: is a label
LOGGER(Functions[is_label]): .LBB0_83: is a label
LOGGER(Functions[define_label]): Label .LBB0_83 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp] is not a label
LOGGER(Functions[define_label]): Define label cmp	r0, #43
LOGGER(Functions[is_label]): Check if cmp	r0, #43 is a label
LOGGER(Functions[is_label]): cmp	r0, #43 is not a label
LOGGER(Functions[define_label]): Define label beq	.LBB0_88
LOGGER(Functions[is_label]): Check if beq	.LBB0_88 is a label
LOGGER(Functions[is_label]): beq	.LBB0_88 is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_84
LOGGER(Functions[is_label]): Check if b	.LBB0_84 is a label
LOGGER(Functions[is_label]): b	.LBB0_84 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_84:
LOGGER(Functions[is_label]): Check if .LBB0_84: is a label
LOGGER(Functions[is_label]): .LBB0_84: is a label
LOGGER(Functions[define_label]): Label .LBB0_84 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp] is not a label
LOGGER(Functions[define_label]): Define label cmp	r0, #45
LOGGER(Functions[is_label]): Check if cmp	r0, #45 is a label
LOGGER(Functions[is_label]): cmp	r0, #45 is not a label
LOGGER(Functions[define_label]): Define label beq	.LBB0_89
LOGGER(Functions[is_label]): Check if beq	.LBB0_89 is a label
LOGGER(Functions[is_label]): beq	.LBB0_89 is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_85
LOGGER(Functions[is_label]): Check if b	.LBB0_85 is a label
LOGGER(Functions[is_label]): b	.LBB0_85 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_85:
LOGGER(Functions[is_label]): Check if .LBB0_85: is a label
LOGGER(Functions[is_label]): .LBB0_85: is a label
LOGGER(Functions[define_label]): Label .LBB0_85 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp] is not a label
LOGGER(Functions[define_label]): Define label cmp	r0, #47
LOGGER(Functions[is_label]): Check if cmp	r0, #47 is a label
LOGGER(Functions[is_label]): cmp	r0, #47 is not a label
LOGGER(Functions[define_label]): Define label beq	.LBB0_91
LOGGER(Functions[is_label]): Check if beq	.LBB0_91 is a label
LOGGER(Functions[is_label]): beq	.LBB0_91 is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_86
LOGGER(Functions[is_label]): Check if b	.LBB0_86 is a label
LOGGER(Functions[is_label]): b	.LBB0_86 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_86:
LOGGER(Functions[is_label]): Check if .LBB0_86: is a label
LOGGER(Functions[is_label]): .LBB0_86: is a label
LOGGER(Functions[define_label]): Label .LBB0_86 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp] is not a label
LOGGER(Functions[define_label]): Define label cmp	r0, #94
LOGGER(Functions[is_label]): Check if cmp	r0, #94 is a label
LOGGER(Functions[is_label]): cmp	r0, #94 is not a label
LOGGER(Functions[define_label]): Define label beq	.LBB0_95
LOGGER(Functions[is_label]): Check if beq	.LBB0_95 is a label
LOGGER(Functions[is_label]): beq	.LBB0_95 is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_87
LOGGER(Functions[is_label]): Check if b	.LBB0_87 is a label
LOGGER(Functions[is_label]): b	.LBB0_87 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_87:
LOGGER(Functions[is_label]): Check if .LBB0_87: is a label
LOGGER(Functions[is_label]): .LBB0_87: is a label
LOGGER(Functions[define_label]): Label .LBB0_87 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp] is not a label
LOGGER(Functions[define_label]): Define label cmp	r0, #124
LOGGER(Functions[is_label]): Check if cmp	r0, #124 is a label
LOGGER(Functions[is_label]): cmp	r0, #124 is not a label
LOGGER(Functions[define_label]): Define label beq	.LBB0_94
LOGGER(Functions[is_label]): Check if beq	.LBB0_94 is a label
LOGGER(Functions[is_label]): beq	.LBB0_94 is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_96
LOGGER(Functions[is_label]): Check if b	.LBB0_96 is a label
LOGGER(Functions[is_label]): b	.LBB0_96 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_88:
LOGGER(Functions[is_label]): Check if .LBB0_88: is a label
LOGGER(Functions[is_label]): .LBB0_88: is a label
LOGGER(Functions[define_label]): Label .LBB0_88 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #56]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #56] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #56] is not a label
LOGGER(Functions[define_label]): Define label ldr	r1, [sp, #52]
LOGGER(Functions[is_label]): Check if ldr	r1, [sp, #52] is a label
LOGGER(Functions[is_label]): ldr	r1, [sp, #52] is not a label
LOGGER(Functions[define_label]): Define label adds	r0, r0, r1
LOGGER(Functions[is_label]): Check if adds	r0, r0, r1 is a label
LOGGER(Functions[is_label]): adds	r0, r0, r1 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #84]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #84] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #84] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_97
LOGGER(Functions[is_label]): Check if b	.LBB0_97 is a label
LOGGER(Functions[is_label]): b	.LBB0_97 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_89:
LOGGER(Functions[is_label]): Check if .LBB0_89: is a label
LOGGER(Functions[is_label]): .LBB0_89: is a label
LOGGER(Functions[define_label]): Label .LBB0_89 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #56]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #56] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #56] is not a label
LOGGER(Functions[define_label]): Define label ldr	r1, [sp, #52]
LOGGER(Functions[is_label]): Check if ldr	r1, [sp, #52] is a label
LOGGER(Functions[is_label]): ldr	r1, [sp, #52] is not a label
LOGGER(Functions[define_label]): Define label subs	r0, r0, r1
LOGGER(Functions[is_label]): Check if subs	r0, r0, r1 is a label
LOGGER(Functions[is_label]): subs	r0, r0, r1 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #84]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #84] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #84] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_97
LOGGER(Functions[is_label]): Check if b	.LBB0_97 is a label
LOGGER(Functions[is_label]): b	.LBB0_97 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_90:
LOGGER(Functions[is_label]): Check if .LBB0_90: is a label
LOGGER(Functions[is_label]): .LBB0_90: is a label
LOGGER(Functions[define_label]): Label .LBB0_90 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #56]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #56] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #56] is not a label
LOGGER(Functions[define_label]): Define label ldr	r1, [sp, #52]
LOGGER(Functions[is_label]): Check if ldr	r1, [sp, #52] is a label
LOGGER(Functions[is_label]): ldr	r1, [sp, #52] is not a label
LOGGER(Functions[define_label]): Define label muls	r1, r0, r1
LOGGER(Functions[is_label]): Check if muls	r1, r0, r1 is a label
LOGGER(Functions[is_label]): muls	r1, r0, r1 is not a label
LOGGER(Functions[define_label]): Define label str	r1, [sp, #84]
LOGGER(Functions[is_label]): Check if str	r1, [sp, #84] is a label
LOGGER(Functions[is_label]): str	r1, [sp, #84] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_97
LOGGER(Functions[is_label]): Check if b	.LBB0_97 is a label
LOGGER(Functions[is_label]): b	.LBB0_97 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_91:
LOGGER(Functions[is_label]): Check if .LBB0_91: is a label
LOGGER(Functions[is_label]): .LBB0_91: is a label
LOGGER(Functions[define_label]): Label .LBB0_91 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #56]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #56] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #56] is not a label
LOGGER(Functions[define_label]): Define label ldr	r1, [sp, #52]
LOGGER(Functions[is_label]): Check if ldr	r1, [sp, #52] is a label
LOGGER(Functions[is_label]): ldr	r1, [sp, #52] is not a label
LOGGER(Functions[define_label]): Define label @APP
LOGGER(Functions[is_label]): Check if @APP is a label
LOGGER(Functions[is_label]): @APP is not a label
LOGGER(Functions[define_label]): Define label movs	r4, r0
LOGGER(Functions[is_label]): Check if movs	r4, r0 is a label
LOGGER(Functions[is_label]): movs	r4, r0 is not a label
LOGGER(Functions[define_label]): Define label movs	r5, r1
LOGGER(Functions[is_label]): Check if movs	r5, r1 is a label
LOGGER(Functions[is_label]): movs	r5, r1 is not a label
LOGGER(Functions[define_label]): Define label @NO_APP
LOGGER(Functions[is_label]): Check if @NO_APP is a label
LOGGER(Functions[is_label]): @NO_APP is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #128]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #128] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #128] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #8]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #8] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #8] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #8]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #8] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #8] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #84]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #84] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #84] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_97
LOGGER(Functions[is_label]): Check if b	.LBB0_97 is a label
LOGGER(Functions[is_label]): b	.LBB0_97 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_92:
LOGGER(Functions[is_label]): Check if .LBB0_92: is a label
LOGGER(Functions[is_label]): .LBB0_92: is a label
LOGGER(Functions[define_label]): Label .LBB0_92 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #56]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #56] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #56] is not a label
LOGGER(Functions[define_label]): Define label ldr	r1, [sp, #52]
LOGGER(Functions[is_label]): Check if ldr	r1, [sp, #52] is a label
LOGGER(Functions[is_label]): ldr	r1, [sp, #52] is not a label
LOGGER(Functions[define_label]): Define label @APP
LOGGER(Functions[is_label]): Check if @APP is a label
LOGGER(Functions[is_label]): @APP is not a label
LOGGER(Functions[define_label]): Define label movs	r4, r0
LOGGER(Functions[is_label]): Check if movs	r4, r0 is a label
LOGGER(Functions[is_label]): movs	r4, r0 is not a label
LOGGER(Functions[define_label]): Define label movs	r5, r1
LOGGER(Functions[is_label]): Check if movs	r5, r1 is a label
LOGGER(Functions[is_label]): movs	r5, r1 is not a label
LOGGER(Functions[define_label]): Define label @NO_APP
LOGGER(Functions[is_label]): Check if @NO_APP is a label
LOGGER(Functions[is_label]): @NO_APP is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #132]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #132] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #132] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #4]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #4] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #4] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #4]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #4] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #4] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #84]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #84] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #84] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_97
LOGGER(Functions[is_label]): Check if b	.LBB0_97 is a label
LOGGER(Functions[is_label]): b	.LBB0_97 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_93:
LOGGER(Functions[is_label]): Check if .LBB0_93: is a label
LOGGER(Functions[is_label]): .LBB0_93: is a label
LOGGER(Functions[define_label]): Label .LBB0_93 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #56]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #56] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #56] is not a label
LOGGER(Functions[define_label]): Define label ldr	r1, [sp, #52]
LOGGER(Functions[is_label]): Check if ldr	r1, [sp, #52] is a label
LOGGER(Functions[is_label]): ldr	r1, [sp, #52] is not a label
LOGGER(Functions[define_label]): Define label ands	r0, r1
LOGGER(Functions[is_label]): Check if ands	r0, r1 is a label
LOGGER(Functions[is_label]): ands	r0, r1 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #84]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #84] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #84] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_97
LOGGER(Functions[is_label]): Check if b	.LBB0_97 is a label
LOGGER(Functions[is_label]): b	.LBB0_97 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_94:
LOGGER(Functions[is_label]): Check if .LBB0_94: is a label
LOGGER(Functions[is_label]): .LBB0_94: is a label
LOGGER(Functions[define_label]): Label .LBB0_94 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #56]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #56] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #56] is not a label
LOGGER(Functions[define_label]): Define label ldr	r1, [sp, #52]
LOGGER(Functions[is_label]): Check if ldr	r1, [sp, #52] is a label
LOGGER(Functions[is_label]): ldr	r1, [sp, #52] is not a label
LOGGER(Functions[define_label]): Define label orrs	r0, r1
LOGGER(Functions[is_label]): Check if orrs	r0, r1 is a label
LOGGER(Functions[is_label]): orrs	r0, r1 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #84]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #84] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #84] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_97
LOGGER(Functions[is_label]): Check if b	.LBB0_97 is a label
LOGGER(Functions[is_label]): b	.LBB0_97 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_95:
LOGGER(Functions[is_label]): Check if .LBB0_95: is a label
LOGGER(Functions[is_label]): .LBB0_95: is a label
LOGGER(Functions[define_label]): Label .LBB0_95 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #56]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #56] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #56] is not a label
LOGGER(Functions[define_label]): Define label ldr	r1, [sp, #52]
LOGGER(Functions[is_label]): Check if ldr	r1, [sp, #52] is a label
LOGGER(Functions[is_label]): ldr	r1, [sp, #52] is not a label
LOGGER(Functions[define_label]): Define label eors	r0, r1
LOGGER(Functions[is_label]): Check if eors	r0, r1 is a label
LOGGER(Functions[is_label]): eors	r0, r1 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #84]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #84] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #84] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_97
LOGGER(Functions[is_label]): Check if b	.LBB0_97 is a label
LOGGER(Functions[is_label]): b	.LBB0_97 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_96:
LOGGER(Functions[is_label]): Check if .LBB0_96: is a label
LOGGER(Functions[is_label]): .LBB0_96: is a label
LOGGER(Functions[define_label]): Label .LBB0_96 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_75
LOGGER(Functions[is_label]): Check if b	.LBB0_75 is a label
LOGGER(Functions[is_label]): b	.LBB0_75 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_97:
LOGGER(Functions[is_label]): Check if .LBB0_97: is a label
LOGGER(Functions[is_label]): .LBB0_97: is a label
LOGGER(Functions[define_label]): Label .LBB0_97 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_98
LOGGER(Functions[is_label]): Check if b	.LBB0_98 is a label
LOGGER(Functions[is_label]): b	.LBB0_98 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_98:
LOGGER(Functions[is_label]): Check if .LBB0_98: is a label
LOGGER(Functions[is_label]): .LBB0_98: is a label
LOGGER(Functions[define_label]): Label .LBB0_98 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_99
LOGGER(Functions[is_label]): Check if b	.LBB0_99 is a label
LOGGER(Functions[is_label]): b	.LBB0_99 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_99:
LOGGER(Functions[is_label]): Check if .LBB0_99: is a label
LOGGER(Functions[is_label]): .LBB0_99: is a label
LOGGER(Functions[define_label]): Label .LBB0_99 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_100
LOGGER(Functions[is_label]): Check if b	.LBB0_100 is a label
LOGGER(Functions[is_label]): b	.LBB0_100 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_100:
LOGGER(Functions[is_label]): Check if .LBB0_100: is a label
LOGGER(Functions[is_label]): .LBB0_100: is a label
LOGGER(Functions[define_label]): Label .LBB0_100 defined
LOGGER(Functions[define_label]): Define label movs	r0, #10
LOGGER(Functions[is_label]): Check if movs	r0, #10 is a label
LOGGER(Functions[is_label]): movs	r0, #10 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #80]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #80] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #80] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_101
LOGGER(Functions[is_label]): Check if b	.LBB0_101 is a label
LOGGER(Functions[is_label]): b	.LBB0_101 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_101:
LOGGER(Functions[is_label]): Check if .LBB0_101: is a label
LOGGER(Functions[is_label]): .LBB0_101: is a label
LOGGER(Functions[define_label]): Label .LBB0_101 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_102
LOGGER(Functions[is_label]): Check if b	.LBB0_102 is a label
LOGGER(Functions[is_label]): b	.LBB0_102 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_102:
LOGGER(Functions[is_label]): Check if .LBB0_102: is a label
LOGGER(Functions[is_label]): .LBB0_102: is a label
LOGGER(Functions[define_label]): Label .LBB0_102 defined
LOGGER(Functions[define_label]): Define label movs	r0, #82
LOGGER(Functions[is_label]): Check if movs	r0, #82 is a label
LOGGER(Functions[is_label]): movs	r0, #82 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #80]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #80] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #80] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_103
LOGGER(Functions[is_label]): Check if b	.LBB0_103 is a label
LOGGER(Functions[is_label]): b	.LBB0_103 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_103:
LOGGER(Functions[is_label]): Check if .LBB0_103: is a label
LOGGER(Functions[is_label]): .LBB0_103: is a label
LOGGER(Functions[define_label]): Label .LBB0_103 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_104
LOGGER(Functions[is_label]): Check if b	.LBB0_104 is a label
LOGGER(Functions[is_label]): b	.LBB0_104 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_104:
LOGGER(Functions[is_label]): Check if .LBB0_104: is a label
LOGGER(Functions[is_label]): .LBB0_104: is a label
LOGGER(Functions[define_label]): Label .LBB0_104 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_105
LOGGER(Functions[is_label]): Check if b	.LBB0_105 is a label
LOGGER(Functions[is_label]): b	.LBB0_105 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_105:
LOGGER(Functions[is_label]): Check if .LBB0_105: is a label
LOGGER(Functions[is_label]): .LBB0_105: is a label
LOGGER(Functions[define_label]): Label .LBB0_105 defined
LOGGER(Functions[define_label]): Define label movs	r0, #61
LOGGER(Functions[is_label]): Check if movs	r0, #61 is a label
LOGGER(Functions[is_label]): movs	r0, #61 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #80]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #80] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #80] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_106
LOGGER(Functions[is_label]): Check if b	.LBB0_106 is a label
LOGGER(Functions[is_label]): b	.LBB0_106 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_106:
LOGGER(Functions[is_label]): Check if .LBB0_106: is a label
LOGGER(Functions[is_label]): .LBB0_106: is a label
LOGGER(Functions[define_label]): Label .LBB0_106 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_107
LOGGER(Functions[is_label]): Check if b	.LBB0_107 is a label
LOGGER(Functions[is_label]): b	.LBB0_107 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_107:
LOGGER(Functions[is_label]): Check if .LBB0_107: is a label
LOGGER(Functions[is_label]): .LBB0_107: is a label
LOGGER(Functions[define_label]): Label .LBB0_107 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_108
LOGGER(Functions[is_label]): Check if b	.LBB0_108 is a label
LOGGER(Functions[is_label]): b	.LBB0_108 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_108:
LOGGER(Functions[is_label]): Check if .LBB0_108: is a label
LOGGER(Functions[is_label]): .LBB0_108: is a label
LOGGER(Functions[define_label]): Label .LBB0_108 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #124]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #124] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #124] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #76]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #76] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #76] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #76]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #76] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #76] is not a label
LOGGER(Functions[define_label]): Define label cmp	r0, #0
LOGGER(Functions[is_label]): Check if cmp	r0, #0 is a label
LOGGER(Functions[is_label]): cmp	r0, #0 is not a label
LOGGER(Functions[define_label]): Define label bne	.LBB0_112
LOGGER(Functions[is_label]): Check if bne	.LBB0_112 is a label
LOGGER(Functions[is_label]): bne	.LBB0_112 is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_109
LOGGER(Functions[is_label]): Check if b	.LBB0_109 is a label
LOGGER(Functions[is_label]): b	.LBB0_109 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_109:
LOGGER(Functions[is_label]): Check if .LBB0_109: is a label
LOGGER(Functions[is_label]): .LBB0_109: is a label
LOGGER(Functions[define_label]): Label .LBB0_109 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_110
LOGGER(Functions[is_label]): Check if b	.LBB0_110 is a label
LOGGER(Functions[is_label]): b	.LBB0_110 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_110:
LOGGER(Functions[is_label]): Check if .LBB0_110: is a label
LOGGER(Functions[is_label]): .LBB0_110: is a label
LOGGER(Functions[define_label]): Label .LBB0_110 defined
LOGGER(Functions[define_label]): Define label movs	r0, #48
LOGGER(Functions[is_label]): Check if movs	r0, #48 is a label
LOGGER(Functions[is_label]): movs	r0, #48 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #80]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #80] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #80] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_111
LOGGER(Functions[is_label]): Check if b	.LBB0_111 is a label
LOGGER(Functions[is_label]): b	.LBB0_111 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_111:
LOGGER(Functions[is_label]): Check if .LBB0_111: is a label
LOGGER(Functions[is_label]): .LBB0_111: is a label
LOGGER(Functions[define_label]): Label .LBB0_111 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_128
LOGGER(Functions[is_label]): Check if b	.LBB0_128 is a label
LOGGER(Functions[is_label]): b	.LBB0_128 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_112:
LOGGER(Functions[is_label]): Check if .LBB0_112: is a label
LOGGER(Functions[is_label]): .LBB0_112: is a label
LOGGER(Functions[define_label]): Label .LBB0_112 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #84]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #84] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #84] is not a label
LOGGER(Functions[define_label]): Define label cmp	r0, #0
LOGGER(Functions[is_label]): Check if cmp	r0, #0 is a label
LOGGER(Functions[is_label]): cmp	r0, #0 is not a label
LOGGER(Functions[define_label]): Define label bge	.LBB0_116
LOGGER(Functions[is_label]): Check if bge	.LBB0_116 is a label
LOGGER(Functions[is_label]): bge	.LBB0_116 is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_113
LOGGER(Functions[is_label]): Check if b	.LBB0_113 is a label
LOGGER(Functions[is_label]): b	.LBB0_113 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_113:
LOGGER(Functions[is_label]): Check if .LBB0_113: is a label
LOGGER(Functions[is_label]): .LBB0_113: is a label
LOGGER(Functions[define_label]): Label .LBB0_113 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_114
LOGGER(Functions[is_label]): Check if b	.LBB0_114 is a label
LOGGER(Functions[is_label]): b	.LBB0_114 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_114:
LOGGER(Functions[is_label]): Check if .LBB0_114: is a label
LOGGER(Functions[is_label]): .LBB0_114: is a label
LOGGER(Functions[define_label]): Label .LBB0_114 defined
LOGGER(Functions[define_label]): Define label movs	r0, #45
LOGGER(Functions[is_label]): Check if movs	r0, #45 is a label
LOGGER(Functions[is_label]): movs	r0, #45 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #80]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #80] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #80] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_115
LOGGER(Functions[is_label]): Check if b	.LBB0_115 is a label
LOGGER(Functions[is_label]): b	.LBB0_115 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_115:
LOGGER(Functions[is_label]): Check if .LBB0_115: is a label
LOGGER(Functions[is_label]): .LBB0_115: is a label
LOGGER(Functions[define_label]): Label .LBB0_115 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #84]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #84] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #84] is not a label
LOGGER(Functions[define_label]): Define label rsbs	r0, r0, #0
LOGGER(Functions[is_label]): Check if rsbs	r0, r0, #0 is a label
LOGGER(Functions[is_label]): rsbs	r0, r0, #0 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #84]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #84] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #84] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #124]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #124] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #124] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #76]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #76] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #76] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_116
LOGGER(Functions[is_label]): Check if b	.LBB0_116 is a label
LOGGER(Functions[is_label]): b	.LBB0_116 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_116:
LOGGER(Functions[is_label]): Check if .LBB0_116: is a label
LOGGER(Functions[is_label]): .LBB0_116: is a label
LOGGER(Functions[define_label]): Label .LBB0_116 defined
LOGGER(Functions[define_label]): Define label movs	r0, #0
LOGGER(Functions[is_label]): Check if movs	r0, #0 is a label
LOGGER(Functions[is_label]): movs	r0, #0 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #72]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #72] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #72] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #68]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #68] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #68] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_117
LOGGER(Functions[is_label]): Check if b	.LBB0_117 is a label
LOGGER(Functions[is_label]): b	.LBB0_117 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_117:
LOGGER(Functions[is_label]): Check if .LBB0_117: is a label
LOGGER(Functions[is_label]): .LBB0_117: is a label
LOGGER(Functions[define_label]): Label .LBB0_117 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #68]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #68] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #68] is not a label
LOGGER(Functions[define_label]): Define label cmp	r0, #7
LOGGER(Functions[is_label]): Check if cmp	r0, #7 is a label
LOGGER(Functions[is_label]): cmp	r0, #7 is not a label
LOGGER(Functions[define_label]): Define label bhi	.LBB0_127
LOGGER(Functions[is_label]): Check if bhi	.LBB0_127 is a label
LOGGER(Functions[is_label]): bhi	.LBB0_127 is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_118
LOGGER(Functions[is_label]): Check if b	.LBB0_118 is a label
LOGGER(Functions[is_label]): b	.LBB0_118 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_118:
LOGGER(Functions[is_label]): Check if .LBB0_118: is a label
LOGGER(Functions[is_label]): .LBB0_118: is a label
LOGGER(Functions[define_label]): Label .LBB0_118 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #76]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #76] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #76] is not a label
LOGGER(Functions[define_label]): Define label movs	r1, #15
LOGGER(Functions[is_label]): Check if movs	r1, #15 is a label
LOGGER(Functions[is_label]): movs	r1, #15 is not a label
LOGGER(Functions[define_label]): Define label ands	r0, r1
LOGGER(Functions[is_label]): Check if ands	r0, r1 is a label
LOGGER(Functions[is_label]): ands	r0, r1 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #64]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #64] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #64] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #76]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #76] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #76] is not a label
LOGGER(Functions[define_label]): Define label lsrs	r0, r0, #4
LOGGER(Functions[is_label]): Check if lsrs	r0, r0, #4 is a label
LOGGER(Functions[is_label]): lsrs	r0, r0, #4 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #76]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #76] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #76] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #72]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #72] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #72] is not a label
LOGGER(Functions[define_label]): Define label cmp	r0, #0
LOGGER(Functions[is_label]): Check if cmp	r0, #0 is a label
LOGGER(Functions[is_label]): cmp	r0, #0 is not a label
LOGGER(Functions[define_label]): Define label bne	.LBB0_123
LOGGER(Functions[is_label]): Check if bne	.LBB0_123 is a label
LOGGER(Functions[is_label]): bne	.LBB0_123 is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_119
LOGGER(Functions[is_label]): Check if b	.LBB0_119 is a label
LOGGER(Functions[is_label]): b	.LBB0_119 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_119:
LOGGER(Functions[is_label]): Check if .LBB0_119: is a label
LOGGER(Functions[is_label]): .LBB0_119: is a label
LOGGER(Functions[define_label]): Label .LBB0_119 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #64]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #64] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #64] is not a label
LOGGER(Functions[define_label]): Define label cmp	r0, #0
LOGGER(Functions[is_label]): Check if cmp	r0, #0 is a label
LOGGER(Functions[is_label]): cmp	r0, #0 is not a label
LOGGER(Functions[define_label]): Define label beq	.LBB0_121
LOGGER(Functions[is_label]): Check if beq	.LBB0_121 is a label
LOGGER(Functions[is_label]): beq	.LBB0_121 is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_120
LOGGER(Functions[is_label]): Check if b	.LBB0_120 is a label
LOGGER(Functions[is_label]): b	.LBB0_120 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_120:
LOGGER(Functions[is_label]): Check if .LBB0_120: is a label
LOGGER(Functions[is_label]): .LBB0_120: is a label
LOGGER(Functions[define_label]): Label .LBB0_120 defined
LOGGER(Functions[define_label]): Define label movs	r0, #1
LOGGER(Functions[is_label]): Check if movs	r0, #1 is a label
LOGGER(Functions[is_label]): movs	r0, #1 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #72]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #72] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #72] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_122
LOGGER(Functions[is_label]): Check if b	.LBB0_122 is a label
LOGGER(Functions[is_label]): b	.LBB0_122 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_121:
LOGGER(Functions[is_label]): Check if .LBB0_121: is a label
LOGGER(Functions[is_label]): .LBB0_121: is a label
LOGGER(Functions[define_label]): Label .LBB0_121 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_126
LOGGER(Functions[is_label]): Check if b	.LBB0_126 is a label
LOGGER(Functions[is_label]): b	.LBB0_126 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_122:
LOGGER(Functions[is_label]): Check if .LBB0_122: is a label
LOGGER(Functions[is_label]): .LBB0_122: is a label
LOGGER(Functions[define_label]): Label .LBB0_122 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_123
LOGGER(Functions[is_label]): Check if b	.LBB0_123 is a label
LOGGER(Functions[is_label]): b	.LBB0_123 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_123:
LOGGER(Functions[is_label]): Check if .LBB0_123: is a label
LOGGER(Functions[is_label]): .LBB0_123: is a label
LOGGER(Functions[define_label]): Label .LBB0_123 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_124
LOGGER(Functions[is_label]): Check if b	.LBB0_124 is a label
LOGGER(Functions[is_label]): b	.LBB0_124 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_124:
LOGGER(Functions[is_label]): Check if .LBB0_124: is a label
LOGGER(Functions[is_label]): .LBB0_124: is a label
LOGGER(Functions[define_label]): Label .LBB0_124 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #64]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #64] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #64] is not a label
LOGGER(Functions[define_label]): Define label adds	r0, #48
LOGGER(Functions[is_label]): Check if adds	r0, #48 is a label
LOGGER(Functions[is_label]): adds	r0, #48 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #80]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #80] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #80] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_125
LOGGER(Functions[is_label]): Check if b	.LBB0_125 is a label
LOGGER(Functions[is_label]): b	.LBB0_125 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_125:
LOGGER(Functions[is_label]): Check if .LBB0_125: is a label
LOGGER(Functions[is_label]): .LBB0_125: is a label
LOGGER(Functions[define_label]): Label .LBB0_125 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_126
LOGGER(Functions[is_label]): Check if b	.LBB0_126 is a label
LOGGER(Functions[is_label]): b	.LBB0_126 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_126:
LOGGER(Functions[is_label]): Check if .LBB0_126: is a label
LOGGER(Functions[is_label]): .LBB0_126: is a label
LOGGER(Functions[define_label]): Label .LBB0_126 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #68]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #68] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #68] is not a label
LOGGER(Functions[define_label]): Define label adds	r0, r0, #1
LOGGER(Functions[is_label]): Check if adds	r0, r0, #1 is a label
LOGGER(Functions[is_label]): adds	r0, r0, #1 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #68]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #68] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #68] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_117
LOGGER(Functions[is_label]): Check if b	.LBB0_117 is a label
LOGGER(Functions[is_label]): b	.LBB0_117 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_127:
LOGGER(Functions[is_label]): Check if .LBB0_127: is a label
LOGGER(Functions[is_label]): .LBB0_127: is a label
LOGGER(Functions[define_label]): Label .LBB0_127 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_128
LOGGER(Functions[is_label]): Check if b	.LBB0_128 is a label
LOGGER(Functions[is_label]): b	.LBB0_128 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_128:
LOGGER(Functions[is_label]): Check if .LBB0_128: is a label
LOGGER(Functions[is_label]): .LBB0_128: is a label
LOGGER(Functions[define_label]): Label .LBB0_128 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_129
LOGGER(Functions[is_label]): Check if b	.LBB0_129 is a label
LOGGER(Functions[is_label]): b	.LBB0_129 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_129:
LOGGER(Functions[is_label]): Check if .LBB0_129: is a label
LOGGER(Functions[is_label]): .LBB0_129: is a label
LOGGER(Functions[define_label]): Label .LBB0_129 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_130
LOGGER(Functions[is_label]): Check if b	.LBB0_130 is a label
LOGGER(Functions[is_label]): b	.LBB0_130 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_130:
LOGGER(Functions[is_label]): Check if .LBB0_130: is a label
LOGGER(Functions[is_label]): .LBB0_130: is a label
LOGGER(Functions[define_label]): Label .LBB0_130 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #104]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #104] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #104] is not a label
LOGGER(Functions[define_label]): Define label cmp	r0, #0
LOGGER(Functions[is_label]): Check if cmp	r0, #0 is a label
LOGGER(Functions[is_label]): cmp	r0, #0 is not a label
LOGGER(Functions[define_label]): Define label bne	.LBB0_132
LOGGER(Functions[is_label]): Check if bne	.LBB0_132 is a label
LOGGER(Functions[is_label]): bne	.LBB0_132 is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_131
LOGGER(Functions[is_label]): Check if b	.LBB0_131 is a label
LOGGER(Functions[is_label]): b	.LBB0_131 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_131:
LOGGER(Functions[is_label]): Check if .LBB0_131: is a label
LOGGER(Functions[is_label]): .LBB0_131: is a label
LOGGER(Functions[define_label]): Label .LBB0_131 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_130
LOGGER(Functions[is_label]): Check if b	.LBB0_130 is a label
LOGGER(Functions[is_label]): b	.LBB0_130 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_132:
LOGGER(Functions[is_label]): Check if .LBB0_132: is a label
LOGGER(Functions[is_label]): .LBB0_132: is a label
LOGGER(Functions[define_label]): Label .LBB0_132 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_133
LOGGER(Functions[is_label]): Check if b	.LBB0_133 is a label
LOGGER(Functions[is_label]): b	.LBB0_133 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_133:
LOGGER(Functions[is_label]): Check if .LBB0_133: is a label
LOGGER(Functions[is_label]): .LBB0_133: is a label
LOGGER(Functions[define_label]): Label .LBB0_133 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_134
LOGGER(Functions[is_label]): Check if b	.LBB0_134 is a label
LOGGER(Functions[is_label]): b	.LBB0_134 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_134:
LOGGER(Functions[is_label]): Check if .LBB0_134: is a label
LOGGER(Functions[is_label]): .LBB0_134: is a label
LOGGER(Functions[define_label]): Label .LBB0_134 defined
LOGGER(Functions[define_label]): Define label movs	r0, #1
LOGGER(Functions[is_label]): Check if movs	r0, #1 is a label
LOGGER(Functions[is_label]): movs	r0, #1 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #96]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #96] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #96] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_135
LOGGER(Functions[is_label]): Check if b	.LBB0_135 is a label
LOGGER(Functions[is_label]): b	.LBB0_135 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_135:
LOGGER(Functions[is_label]): Check if .LBB0_135: is a label
LOGGER(Functions[is_label]): .LBB0_135: is a label
LOGGER(Functions[define_label]): Label .LBB0_135 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_135
LOGGER(Functions[is_label]): Check if b	.LBB0_135 is a label
LOGGER(Functions[is_label]): b	.LBB0_135 is not a label
LOGGER(Functions[define_label]): Define label .Lfunc_end0:
LOGGER(Functions[is_label]): Check if .Lfunc_end0: is a label
LOGGER(Functions[is_label]): .Lfunc_end0: is a label
LOGGER(Functions[define_label]): Label .Lfunc_end0 defined
LOGGER(Functions[define_label]): Define label .size	run, .Lfunc_end0-run
LOGGER(Functions[is_label]): Check if .size	run, .Lfunc_end0-run is a label
LOGGER(Functions[is_label]): .size	run, .Lfunc_end0-run is not a label
LOGGER(Functions[define_label]): Define label .cantunwind
LOGGER(Functions[is_label]): Check if .cantunwind is a label
LOGGER(Functions[is_label]): .cantunwind is not a label
LOGGER(Functions[define_label]): Define label .fnend
LOGGER(Functions[is_label]): Check if .fnend is a label
LOGGER(Functions[is_label]): .fnend is not a label
LOGGER(Functions[define_label]): Define label .ident	"clang version 8.0.1-9 (tags/RELEASE_801/final)"
LOGGER(Functions[is_label]): Check if .ident	"clang version 8.0.1-9 (tags/RELEASE_801/final)" is a label
LOGGER(Functions[is_label]): .ident	"clang version 8.0.1-9 (tags/RELEASE_801/final)" is not a label
LOGGER(Functions[define_label]): Define label .section	".note.GNU-stack","",%progbits
LOGGER(Functions[is_label]): Check if .section	".note.GNU-stack","",%progbits is a label
LOGGER(Functions[is_label]): .section	".note.GNU-stack","",%progbits is not a label
LOGGER(Functions[define_label]): Define label .addrsig
LOGGER(Functions[is_label]): Check if .addrsig is a label
LOGGER(Functions[is_label]): .addrsig is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	30, 6
LOGGER(Functions[is_label]): Check if .eabi_attribute	30, 6 is a label
LOGGER(Functions[is_label]): .eabi_attribute	30, 6 is not a label
LOGGER(Functions[set_number_of_instructions_labels]): Set number of instructions labels to 361
LOGGER(Functions[set_number_of_labels]): Set number of labels to 541
LOGGER(AsmParser[convert_into_binary]): Error: ['ADD', 'r7,', 'sp,', '#8'] is not a valid instruction
LOGGER(AsmParser[convert_into_binary]): ['SUB', 'sp,', '#144']
LOGGER(AsmParser[call_function]): Calling sub_imm7 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 36: 0100100
LOGGER(AsmInstructions[instruction_sp_imm7]): 1011 00001 0100100
LOGGER(AsmParser[convert_into_binary]): ['SUB', 'sp,', '#508']
LOGGER(AsmParser[call_function]): Calling sub_imm7 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 127: 1111111
LOGGER(AsmInstructions[instruction_sp_imm7]): 1011 00001 1111111
LOGGER(AsmParser[convert_into_binary]): ['SUB', 'sp,', '#452']
LOGGER(AsmParser[call_function]): Calling sub_imm7 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 113: 1110001
LOGGER(AsmInstructions[instruction_sp_imm7]): 1011 00001 1110001
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_1']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_2']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#65']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 65: 01000001
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 01000001
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#80']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 20: 00010100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010100 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_3']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_4']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#61']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 61: 00111101
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00111101
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#80']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 20: 00010100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010100 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_5']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_6']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#0']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00000000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#48']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 12: 00001100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00001100 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_7']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_8']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_9']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#104']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 26: 00011010
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011010 000
LOGGER(AsmParser[convert_into_binary]): ['CMP', 'r0,', '#0']
LOGGER(AsmParser[call_function]): Calling cmp_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 101 000 00000000
LOGGER(AsmParser[convert_into_binary]): ['BNE', '.LBB0_11']
LOGGER(AsmParser[call_function]): Calling bne with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[conditional_branch]): 1101 0001 00000000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_10']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_9']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111001
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111001
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_12']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#108']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 27: 00011011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011011 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#40']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 10: 00001010
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00001010 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#40']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 10: 00001010
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001010 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#44']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 11: 00001011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00001011 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#44']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 11: 00001011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001011 000
LOGGER(AsmParser[convert_into_binary]): ['CMP', 'r0,', '#10']
LOGGER(AsmParser[call_function]): Calling cmp_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 10: 00001010
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 101 000 00001010
LOGGER(AsmParser[convert_into_binary]): ['BNE', '.LBB0_14']
LOGGER(AsmParser[call_function]): Calling bne with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[conditional_branch]): 1101 0001 00000000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_13']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_20']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 21: 00000010101
LOGGER(AsmInstructions[unconditional_branch]): 11100 00000010101
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#44']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 11: 00001011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001011 000
LOGGER(AsmParser[convert_into_binary]): ['CMP', 'r0,', '#48']
LOGGER(AsmParser[call_function]): Calling cmp_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 48: 00110000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 101 000 00110000
LOGGER(AsmParser[convert_into_binary]): ['BLT', '.LBB0_16']
LOGGER(AsmParser[call_function]): Calling blt with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 3: 00000011
LOGGER(AsmInstructions[conditional_branch]): 1101 1011 00000011
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_15']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#44']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 11: 00001011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001011 000
LOGGER(AsmParser[convert_into_binary]): ['CMP', 'r0,', '#58']
LOGGER(AsmParser[call_function]): Calling cmp_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 58: 00111010
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 101 000 00111010
LOGGER(AsmParser[convert_into_binary]): ['BLT', '.LBB0_17']
LOGGER(AsmParser[call_function]): Calling blt with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[conditional_branch]): 1101 1011 00000000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_16']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_7']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111100100
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111100100
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_18']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#44']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 11: 00001011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001011 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#80']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 20: 00010100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010100 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_19']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#48']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 12: 00001100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001100 000
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r1,', '#10']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 10: 00001010
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 001 00001010
LOGGER(AsmParser[convert_into_binary]): ['MULS', 'r1,', 'r0,', 'r1']
LOGGER(AsmParser[call_function]): Calling muls_Rdm_Rn_Rdm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 1101 000 001
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r1,', '#48']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 12: 00001100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00001100 001
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#44']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 11: 00001011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001011 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r1,', '#48']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 12: 00001100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001100 001
LOGGER(AsmParser[convert_into_binary]): ['ADDS', 'r0,', 'r1,', 'r0']
LOGGER(AsmParser[call_function]): Calling adds_Rd_Rn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_register_number]): Get register number from r0: 000
LOGGER(AsmInstructions[instruction_rm_rd_rn]): 00 01100 000 001 000
LOGGER(AsmParser[convert_into_binary]): ['SUBS', 'r0,', '#48']
LOGGER(AsmParser[call_function]): Calling subs_8bit_immediate with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 48: 00110000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 111 000 00110000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#48']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 12: 00001100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00001100 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_7']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111010110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111010110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#48']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 12: 00001100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001100 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#36']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 9: 00001001
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00001001 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#36']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 9: 00001001
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001001 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#56']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 14: 00001110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00001110 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_21']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#10']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 10: 00001010
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00001010
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#80']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 20: 00010100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010100 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_22']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_23']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_24']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#66']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 66: 01000010
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 01000010
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#80']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 20: 00010100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010100 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_25']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_26']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#61']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 61: 00111101
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00111101
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#80']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 20: 00010100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010100 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_27']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_28']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#0']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00000000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#32']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 8: 00001000
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00001000 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_29']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_30']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_31']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#104']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 26: 00011010
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011010 000
LOGGER(AsmParser[convert_into_binary]): ['CMP', 'r0,', '#0']
LOGGER(AsmParser[call_function]): Calling cmp_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 101 000 00000000
LOGGER(AsmParser[convert_into_binary]): ['BNE', '.LBB0_33']
LOGGER(AsmParser[call_function]): Calling bne with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[conditional_branch]): 1101 0001 00000000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_32']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_31']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111001
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111001
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_34']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#108']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 27: 00011011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011011 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#24']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 6: 00000110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000110 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#24']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 6: 00000110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00000110 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#28']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 7: 00000111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000111 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#28']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 7: 00000111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00000111 000
LOGGER(AsmParser[convert_into_binary]): ['CMP', 'r0,', '#10']
LOGGER(AsmParser[call_function]): Calling cmp_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 10: 00001010
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 101 000 00001010
LOGGER(AsmParser[convert_into_binary]): ['BNE', '.LBB0_36']
LOGGER(AsmParser[call_function]): Calling bne with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[conditional_branch]): 1101 0001 00000000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_35']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_42']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 21: 00000010101
LOGGER(AsmInstructions[unconditional_branch]): 11100 00000010101
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#28']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 7: 00000111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00000111 000
LOGGER(AsmParser[convert_into_binary]): ['CMP', 'r0,', '#48']
LOGGER(AsmParser[call_function]): Calling cmp_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 48: 00110000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 101 000 00110000
LOGGER(AsmParser[convert_into_binary]): ['BLT', '.LBB0_38']
LOGGER(AsmParser[call_function]): Calling blt with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 3: 00000011
LOGGER(AsmInstructions[conditional_branch]): 1101 1011 00000011
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_37']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#28']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 7: 00000111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00000111 000
LOGGER(AsmParser[convert_into_binary]): ['CMP', 'r0,', '#58']
LOGGER(AsmParser[call_function]): Calling cmp_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 58: 00111010
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 101 000 00111010
LOGGER(AsmParser[convert_into_binary]): ['BLT', '.LBB0_39']
LOGGER(AsmParser[call_function]): Calling blt with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[conditional_branch]): 1101 1011 00000000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_38']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_29']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111100100
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111100100
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_40']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#28']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 7: 00000111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00000111 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#80']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 20: 00010100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010100 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_41']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#32']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 8: 00001000
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001000 000
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r1,', '#10']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 10: 00001010
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 001 00001010
LOGGER(AsmParser[convert_into_binary]): ['MULS', 'r1,', 'r0,', 'r1']
LOGGER(AsmParser[call_function]): Calling muls_Rdm_Rn_Rdm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 1101 000 001
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r1,', '#32']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 8: 00001000
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00001000 001
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#28']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 7: 00000111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00000111 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r1,', '#32']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 8: 00001000
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001000 001
LOGGER(AsmParser[convert_into_binary]): ['ADDS', 'r0,', 'r1,', 'r0']
LOGGER(AsmParser[call_function]): Calling adds_Rd_Rn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_register_number]): Get register number from r0: 000
LOGGER(AsmInstructions[instruction_rm_rd_rn]): 00 01100 000 001 000
LOGGER(AsmParser[convert_into_binary]): ['SUBS', 'r0,', '#48']
LOGGER(AsmParser[call_function]): Calling subs_8bit_immediate with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 48: 00110000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 111 000 00110000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#32']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 8: 00001000
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00001000 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_29']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111010110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111010110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#32']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 8: 00001000
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#20']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 5: 00000101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000101 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#20']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 5: 00000101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00000101 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#52']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 13: 00001101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00001101 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_43']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#10']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 10: 00001010
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00001010
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#80']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 20: 00010100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010100 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_44']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_45']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_46']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_47']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_48']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_49']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_50']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_51']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_52']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#43']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 43: 00101011
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00101011
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#80']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 20: 00010100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010100 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_53']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_54']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#45']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 45: 00101101
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00101101
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#80']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 20: 00010100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010100 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_55']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_56']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_57']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#42']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 42: 00101010
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00101010
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#80']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 20: 00010100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010100 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_58']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_59']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_60']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#47']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 47: 00101111
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00101111
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#80']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 20: 00010100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010100 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_61']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_62']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_63']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#37']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 37: 00100101
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00100101
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#80']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 20: 00010100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010100 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_64']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_65']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_66']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#38']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 38: 00100110
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00100110
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#80']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 20: 00010100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010100 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_67']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_68']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_69']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#124']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 124: 01111100
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 01111100
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#80']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 20: 00010100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010100 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_70']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_71']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_72']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#94']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 94: 01011110
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 01011110
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#80']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 20: 00010100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010100 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_73']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_74']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_75']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_76']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_77']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#104']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 26: 00011010
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011010 000
LOGGER(AsmParser[convert_into_binary]): ['CMP', 'r0,', '#0']
LOGGER(AsmParser[call_function]): Calling cmp_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 101 000 00000000
LOGGER(AsmParser[convert_into_binary]): ['BNE', '.LBB0_79']
LOGGER(AsmParser[call_function]): Calling bne with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[conditional_branch]): 1101 0001 00000000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_78']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_77']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111001
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111001
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_80']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#108']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 27: 00011011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011011 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#12']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 3: 00000011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000011 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#12']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 3: 00000011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00000011 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#16']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 4: 00000100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000100 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#16']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 4: 00000100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00000100 000
LOGGER(AsmParser[convert_into_binary]): ['CMP', 'r0,', '#37']
LOGGER(AsmParser[call_function]): Calling cmp_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 37: 00100101
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 101 000 00100101
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#0']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000000 000
LOGGER(AsmParser[convert_into_binary]): ['BEQ', '.LBB0_92']
LOGGER(AsmParser[call_function]): Calling beq with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 51: 00110011
LOGGER(AsmInstructions[conditional_branch]): 1101 0000 00110011
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_81']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#0']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00000000 000
LOGGER(AsmParser[convert_into_binary]): ['CMP', 'r0,', '#38']
LOGGER(AsmParser[call_function]): Calling cmp_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 38: 00100110
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 101 000 00100110
LOGGER(AsmParser[convert_into_binary]): ['BEQ', '.LBB0_93']
LOGGER(AsmParser[call_function]): Calling beq with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 56: 00111000
LOGGER(AsmInstructions[conditional_branch]): 1101 0000 00111000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_82']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#0']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00000000 000
LOGGER(AsmParser[convert_into_binary]): ['CMP', 'r0,', '#42']
LOGGER(AsmParser[call_function]): Calling cmp_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 42: 00101010
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 101 000 00101010
LOGGER(AsmParser[convert_into_binary]): ['BEQ', '.LBB0_90']
LOGGER(AsmParser[call_function]): Calling beq with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 29: 00011101
LOGGER(AsmInstructions[conditional_branch]): 1101 0000 00011101
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_83']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#0']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00000000 000
LOGGER(AsmParser[convert_into_binary]): ['CMP', 'r0,', '#43']
LOGGER(AsmParser[call_function]): Calling cmp_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 43: 00101011
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 101 000 00101011
LOGGER(AsmParser[convert_into_binary]): ['BEQ', '.LBB0_88']
LOGGER(AsmParser[call_function]): Calling beq with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 15: 00001111
LOGGER(AsmInstructions[conditional_branch]): 1101 0000 00001111
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_84']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#0']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00000000 000
LOGGER(AsmParser[convert_into_binary]): ['CMP', 'r0,', '#45']
LOGGER(AsmParser[call_function]): Calling cmp_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 45: 00101101
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 101 000 00101101
LOGGER(AsmParser[convert_into_binary]): ['BEQ', '.LBB0_89']
LOGGER(AsmParser[call_function]): Calling beq with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 16: 00010000
LOGGER(AsmInstructions[conditional_branch]): 1101 0000 00010000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_85']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#0']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00000000 000
LOGGER(AsmParser[convert_into_binary]): ['CMP', 'r0,', '#47']
LOGGER(AsmParser[call_function]): Calling cmp_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 47: 00101111
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 101 000 00101111
LOGGER(AsmParser[convert_into_binary]): ['BEQ', '.LBB0_91']
LOGGER(AsmParser[call_function]): Calling beq with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 22: 00010110
LOGGER(AsmInstructions[conditional_branch]): 1101 0000 00010110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_86']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#0']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00000000 000
LOGGER(AsmParser[convert_into_binary]): ['CMP', 'r0,', '#94']
LOGGER(AsmParser[call_function]): Calling cmp_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 94: 01011110
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 101 000 01011110
LOGGER(AsmParser[convert_into_binary]): ['BEQ', '.LBB0_95']
LOGGER(AsmParser[call_function]): Calling beq with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 46: 00101110
LOGGER(AsmInstructions[conditional_branch]): 1101 0000 00101110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_87']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#0']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00000000 000
LOGGER(AsmParser[convert_into_binary]): ['CMP', 'r0,', '#124']
LOGGER(AsmParser[call_function]): Calling cmp_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 124: 01111100
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 101 000 01111100
LOGGER(AsmParser[convert_into_binary]): ['BEQ', '.LBB0_94']
LOGGER(AsmParser[call_function]): Calling beq with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 37: 00100101
LOGGER(AsmInstructions[conditional_branch]): 1101 0000 00100101
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_96']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 46: 00000101110
LOGGER(AsmInstructions[unconditional_branch]): 11100 00000101110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#56']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 14: 00001110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001110 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r1,', '#52']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 13: 00001101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001101 001
LOGGER(AsmParser[convert_into_binary]): ['ADDS', 'r0,', 'r0,', 'r1']
LOGGER(AsmParser[call_function]): Calling adds_Rd_Rn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r1: 001
LOGGER(AsmInstructions[instruction_rm_rd_rn]): 00 01100 001 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#84']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 21: 00010101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010101 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_97']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 42: 00000101010
LOGGER(AsmInstructions[unconditional_branch]): 11100 00000101010
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#56']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 14: 00001110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001110 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r1,', '#52']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 13: 00001101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001101 001
LOGGER(AsmParser[convert_into_binary]): ['SUBS', 'r0,', 'r0,', 'r1']
LOGGER(AsmParser[call_function]): Calling subs_Rd_Rn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r1: 001
LOGGER(AsmInstructions[instruction_rm_rd_rn]): 00 01101 001 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#84']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 21: 00010101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010101 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_97']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 37: 00000100101
LOGGER(AsmInstructions[unconditional_branch]): 11100 00000100101
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#56']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 14: 00001110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001110 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r1,', '#52']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 13: 00001101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001101 001
LOGGER(AsmParser[convert_into_binary]): ['MULS', 'r1,', 'r0,', 'r1']
LOGGER(AsmParser[call_function]): Calling muls_Rdm_Rn_Rdm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 1101 000 001
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r1,', '#84']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 21: 00010101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010101 001
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_97']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 32: 00000100000
LOGGER(AsmInstructions[unconditional_branch]): 11100 00000100000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#56']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 14: 00001110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001110 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r1,', '#52']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 13: 00001101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001101 001
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r4,', 'r0']
LOGGER(AsmParser[call_function]): Calling movs_Rd_Rn with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r4,: 100
LOGGER(AsmInstructions[get_register_number]): Get register number from r0: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 000 00000 000 100
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r5,', 'r1']
LOGGER(AsmParser[call_function]): Calling movs_Rd_Rn with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r5,: 101
LOGGER(AsmInstructions[get_register_number]): Get register number from r1: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 000 00000 001 101
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#128']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 32: 00100000
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00100000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#8']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 2: 00000010
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000010 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#8']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 2: 00000010
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00000010 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#84']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 21: 00010101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010101 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_97']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 23: 00000010111
LOGGER(AsmInstructions[unconditional_branch]): 11100 00000010111
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#56']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 14: 00001110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001110 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r1,', '#52']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 13: 00001101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001101 001
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r4,', 'r0']
LOGGER(AsmParser[call_function]): Calling movs_Rd_Rn with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r4,: 100
LOGGER(AsmInstructions[get_register_number]): Get register number from r0: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 000 00000 000 100
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r5,', 'r1']
LOGGER(AsmParser[call_function]): Calling movs_Rd_Rn with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r5,: 101
LOGGER(AsmInstructions[get_register_number]): Get register number from r1: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 000 00000 001 101
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#132']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 33: 00100001
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00100001 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#4']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 00000001
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000001 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#4']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 00000001
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00000001 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#84']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 21: 00010101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010101 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_97']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 14: 00000001110
LOGGER(AsmInstructions[unconditional_branch]): 11100 00000001110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#56']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 14: 00001110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001110 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r1,', '#52']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 13: 00001101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001101 001
LOGGER(AsmParser[convert_into_binary]): ['ANDS', 'r0,', 'r1']
LOGGER(AsmParser[call_function]): Calling ands_Rdn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r1: 001
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 0000 001 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#84']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 21: 00010101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010101 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_97']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 9: 00000001001
LOGGER(AsmInstructions[unconditional_branch]): 11100 00000001001
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#56']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 14: 00001110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001110 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r1,', '#52']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 13: 00001101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001101 001
LOGGER(AsmParser[convert_into_binary]): ['ORRS', 'r0,', 'r1']
LOGGER(AsmParser[call_function]): Calling orrs_Rdn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r1: 001
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 1100 001 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#84']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 21: 00010101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010101 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_97']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 4: 00000000100
LOGGER(AsmInstructions[unconditional_branch]): 11100 00000000100
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#56']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 14: 00001110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001110 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r1,', '#52']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 13: 00001101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001101 001
LOGGER(AsmParser[convert_into_binary]): ['EORS', 'r0,', 'r1']
LOGGER(AsmParser[call_function]): Calling eors_Rdn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r1: 001
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 0001 001 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#84']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 21: 00010101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010101 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_97']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111111
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111111
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_75']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11110100000
LOGGER(AsmInstructions[unconditional_branch]): 11100 11110100000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_98']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_99']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_100']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#10']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 10: 00001010
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00001010
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#80']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 20: 00010100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010100 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_101']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_102']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#82']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 82: 01010010
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 01010010
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#80']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 20: 00010100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010100 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_103']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_104']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_105']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#61']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 61: 00111101
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00111101
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#80']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 20: 00010100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010100 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_106']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_107']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_108']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#124']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 31: 00011111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011111 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#76']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 19: 00010011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010011 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#76']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 19: 00010011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00010011 000
LOGGER(AsmParser[convert_into_binary]): ['CMP', 'r0,', '#0']
LOGGER(AsmParser[call_function]): Calling cmp_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 101 000 00000000
LOGGER(AsmParser[convert_into_binary]): ['BNE', '.LBB0_112']
LOGGER(AsmParser[call_function]): Calling bne with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 4: 00000100
LOGGER(AsmInstructions[conditional_branch]): 1101 0001 00000100
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_109']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_110']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#48']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 48: 00110000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00110000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#80']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 20: 00010100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010100 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_111']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_128']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 51: 00000110011
LOGGER(AsmInstructions[unconditional_branch]): 11100 00000110011
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#84']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 21: 00010101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00010101 000
LOGGER(AsmParser[convert_into_binary]): ['CMP', 'r0,', '#0']
LOGGER(AsmParser[call_function]): Calling cmp_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 101 000 00000000
LOGGER(AsmParser[convert_into_binary]): ['BGE', '.LBB0_116']
LOGGER(AsmParser[call_function]): Calling bge with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 9: 00001001
LOGGER(AsmInstructions[conditional_branch]): 1101 1010 00001001
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_113']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_114']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#45']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 45: 00101101
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00101101
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#80']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 20: 00010100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010100 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_115']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#84']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 21: 00010101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00010101 000
LOGGER(AsmParser[convert_into_binary]): ['RSBS', 'r0,', 'r0,', '#0']
LOGGER(AsmParser[call_function]): Calling rsbs_Rd_Rn with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 1001 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#84']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 21: 00010101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010101 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#124']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 31: 00011111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011111 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#76']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 19: 00010011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010011 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_116']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#0']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00000000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#72']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 18: 00010010
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010010 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#68']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 17: 00010001
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010001 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_117']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#68']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 17: 00010001
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00010001 000
LOGGER(AsmParser[convert_into_binary]): ['CMP', 'r0,', '#7']
LOGGER(AsmParser[call_function]): Calling cmp_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 7: 00000111
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 101 000 00000111
LOGGER(AsmParser[convert_into_binary]): ['BHI', '.LBB0_127']
LOGGER(AsmParser[call_function]): Calling bhi with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 29: 00011101
LOGGER(AsmInstructions[conditional_branch]): 1101 1000 00011101
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_118']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#76']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 19: 00010011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00010011 000
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r1,', '#15']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 15: 00001111
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 001 00001111
LOGGER(AsmParser[convert_into_binary]): ['ANDS', 'r0,', 'r1']
LOGGER(AsmParser[call_function]): Calling ands_Rdn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r1: 001
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 0000 001 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#64']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 16: 00010000
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010000 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#76']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 19: 00010011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00010011 000
LOGGER(AsmParser[convert_into_binary]): ['LSRS', 'r0,', 'r0,', '#4']
LOGGER(AsmParser[call_function]): Calling lsrs_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 4: 00100
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 001 00100 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#76']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 19: 00010011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010011 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#72']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 18: 00010010
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00010010 000
LOGGER(AsmParser[convert_into_binary]): ['CMP', 'r0,', '#0']
LOGGER(AsmParser[call_function]): Calling cmp_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 101 000 00000000
LOGGER(AsmParser[convert_into_binary]): ['BNE', '.LBB0_123']
LOGGER(AsmParser[call_function]): Calling bne with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 8: 00001000
LOGGER(AsmInstructions[conditional_branch]): 1101 0001 00001000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_119']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#64']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 16: 00010000
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00010000 000
LOGGER(AsmParser[convert_into_binary]): ['CMP', 'r0,', '#0']
LOGGER(AsmParser[call_function]): Calling cmp_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 101 000 00000000
LOGGER(AsmParser[convert_into_binary]): ['BEQ', '.LBB0_121']
LOGGER(AsmParser[call_function]): Calling beq with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 2: 00000010
LOGGER(AsmInstructions[conditional_branch]): 1101 0000 00000010
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_120']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#1']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 00000001
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00000001
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#72']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 18: 00010010
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010010 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_122']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111111
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111111
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_126']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 5: 00000000101
LOGGER(AsmInstructions[unconditional_branch]): 11100 00000000101
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_123']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_124']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#64']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 16: 00010000
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00010000 000
LOGGER(AsmParser[convert_into_binary]): ['ADDS', 'r0,', '#48']
LOGGER(AsmParser[call_function]): Calling adds_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 48: 00110000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 110 000 00110000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#80']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 20: 00010100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010100 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_125']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_126']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#68']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 17: 00010001
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00010001 000
LOGGER(AsmParser[convert_into_binary]): ['ADDS', 'r0,', 'r0,', '#1']
LOGGER(AsmParser[call_function]): Calling adds_Rd_Rn_imm3 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 001
LOGGER(AsmInstructions[instruction_imm3_rd_rn]): 00 01110 001 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#68']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 17: 00010001
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010001 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_117']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111011100
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111011100
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_128']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_129']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_130']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#104']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 26: 00011010
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011010 000
LOGGER(AsmParser[convert_into_binary]): ['CMP', 'r0,', '#0']
LOGGER(AsmParser[call_function]): Calling cmp_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 101 000 00000000
LOGGER(AsmParser[convert_into_binary]): ['BNE', '.LBB0_132']
LOGGER(AsmParser[call_function]): Calling bne with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[conditional_branch]): 1101 0001 00000000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_131']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_130']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111001
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111001
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_133']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_134']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#1']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 00000001
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00000001
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#96']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 24: 00011000
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011000 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_135']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_135']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111101
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111101
LOGGER(AsmParser[binary_to_hexa]): Converting binary to hexadecimal
LOGGER(AsmParser[binary_to_hexa]): ['b0a4', 'b0ff', 'b0f1', 'e7fe', 'e7fe', '2041', '9014', 'e7fe', 'e7fe', '203d', '9014', 'e7fe', 'e7fe', '2000', '900c', 'e7fe', 'e7fe', 'e7fe', '981a', '2800', 'd100', 'e7fe', 'e7f9', 'e7fe', '981b', '900a', '980a', '900b', '980b', '280a', 'd100', 'e7fe', 'e015', '980b', '2830', 'db03', 'e7fe', '980b', '283a', 'db00', 'e7fe', 'e7e4', 'e7fe', '980b', '9014', 'e7fe', '980c', '210a', '4341', '910c', '980b', '990c', '1808', '3830', '900c', 'e7d6', '980c', '9009', '9809', '900e', 'e7fe', '200a', '9014', 'e7fe', 'e7fe', 'e7fe', '2042', '9014', 'e7fe', 'e7fe', '203d', '9014', 'e7fe', 'e7fe', '2000', '9008', 'e7fe', 'e7fe', 'e7fe', '981a', '2800', 'd100', 'e7fe', 'e7f9', 'e7fe', '981b', '9006', '9806', '9007', '9807', '280a', 'd100', 'e7fe', 'e015', '9807', '2830', 'db03', 'e7fe', '9807', '283a', 'db00', 'e7fe', 'e7e4', 'e7fe', '9807', '9014', 'e7fe', '9808', '210a', '4341', '9108', '9807', '9908', '1808', '3830', '9008', 'e7d6', '9808', '9005', '9805', '900d', 'e7fe', '200a', '9014', 'e7fe', 'e7fe', 'e7fe', 'e7fe', 'e7fe', 'e7fe', 'e7fe', 'e7fe', 'e7fe', '202b', '9014', 'e7fe', 'e7fe', '202d', '9014', 'e7fe', 'e7fe', 'e7fe', '202a', '9014', 'e7fe', 'e7fe', 'e7fe', '202f', '9014', 'e7fe', 'e7fe', 'e7fe', '2025', '9014', 'e7fe', 'e7fe', 'e7fe', '2026', '9014', 'e7fe', 'e7fe', 'e7fe', '207c', '9014', 'e7fe', 'e7fe', 'e7fe', '205e', '9014', 'e7fe', 'e7fe', 'e7fe', 'e7fe', 'e7fe', '981a', '2800', 'd100', 'e7fe', 'e7f9', 'e7fe', '981b', '9003', '9803', '9004', '9804', '2825', '9000', 'd033', 'e7fe', '9800', '2826', 'd038', 'e7fe', '9800', '282a', 'd01d', 'e7fe', '9800', '282b', 'd00f', 'e7fe', '9800', '282d', 'd010', 'e7fe', '9800', '282f', 'd016', 'e7fe', '9800', '285e', 'd02e', 'e7fe', '9800', '287c', 'd025', 'e02e', '980e', '990d', '1840', '9015', 'e02a', '980e', '990d', '1a40', '9015', 'e025', '980e', '990d', '4341', '9115', 'e020', '980e', '990d', '0004', '000d', '9820', '9002', '9802', '9015', 'e017', '980e', '990d', '0004', '000d', '9821', '9001', '9801', '9015', 'e00e', '980e', '990d', '4008', '9015', 'e009', '980e', '990d', '4308', '9015', 'e004', '980e', '990d', '4048', '9015', 'e7ff', 'e7a0', 'e7fe', 'e7fe', 'e7fe', '200a', '9014', 'e7fe', 'e7fe', '2052', '9014', 'e7fe', 'e7fe', 'e7fe', '203d', '9014', 'e7fe', 'e7fe', 'e7fe', '981f', '9013', '9813', '2800', 'd104', 'e7fe', 'e7fe', '2030', '9014', 'e7fe', 'e033', '9815', '2800', 'da09', 'e7fe', 'e7fe', '202d', '9014', 'e7fe', '9815', '4240', '9015', '981f', '9013', 'e7fe', '2000', '9012', '9011', 'e7fe', '9811', '2807', 'd81d', 'e7fe', '9813', '210f', '4008', '9010', '9813', '0900', '9013', '9812', '2800', 'd108', 'e7fe', '9810', '2800', 'd002', 'e7fe', '2001', '9012', 'e7ff', 'e005', 'e7fe', 'e7fe', '9810', '3030', '9014', 'e7fe', 'e7fe', '9811', '1c40', '9011', 'e7dc', 'e7fe', 'e7fe', 'e7fe', '981a', '2800', 'd100', 'e7fe', 'e7f9', 'e7fe', 'e7fe', '2001', '9018', 'e7fe', 'e7fd']
LOGGER(AsmParser[save_hexa_as_bin]): Saving the hexadecimal in ../../../src/tests/resources/output_binaries/other/calckeyb.bin
LOGGER(AsmReader[read_bin_file]): Reading ../../../src/tests/resources/output_binaries/other/calckeyb.bin
LOGGER(AsmParser[show_difference]): Expected/Actual: [92mb0a4[0m/b0a4 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92mb0ff[0m/b0ff [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92mb0f1[0m/b0f1 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2041[0m/2041 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9014[0m/9014 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m203d[0m/203d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9014[0m/9014 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2000[0m/2000 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m900c[0m/900c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981a[0m/981a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2800[0m/2800 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92md100[0m/d100 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7f9[0m/e7f9 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981b[0m/981b [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m900a[0m/900a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m980a[0m/980a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m900b[0m/900b [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m980b[0m/980b [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m280a[0m/280a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92md100[0m/d100 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me015[0m/e015 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m980b[0m/980b [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2830[0m/2830 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92mdb03[0m/db03 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m980b[0m/980b [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m283a[0m/283a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92mdb00[0m/db00 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7e4[0m/e7e4 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m980b[0m/980b [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9014[0m/9014 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m980c[0m/980c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m210a[0m/210a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m4341[0m/4341 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m910c[0m/910c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m980b[0m/980b [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m990c[0m/990c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m1808[0m/1808 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m3830[0m/3830 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m900c[0m/900c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7d6[0m/e7d6 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m980c[0m/980c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9009[0m/9009 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9809[0m/9809 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m900e[0m/900e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m200a[0m/200a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9014[0m/9014 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2042[0m/2042 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9014[0m/9014 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m203d[0m/203d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9014[0m/9014 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2000[0m/2000 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9008[0m/9008 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981a[0m/981a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2800[0m/2800 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92md100[0m/d100 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7f9[0m/e7f9 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981b[0m/981b [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9006[0m/9006 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9806[0m/9806 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9007[0m/9007 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9807[0m/9807 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m280a[0m/280a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92md100[0m/d100 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me015[0m/e015 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9807[0m/9807 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2830[0m/2830 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92mdb03[0m/db03 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9807[0m/9807 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m283a[0m/283a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92mdb00[0m/db00 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7e4[0m/e7e4 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9807[0m/9807 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9014[0m/9014 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9808[0m/9808 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m210a[0m/210a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m4341[0m/4341 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9108[0m/9108 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9807[0m/9807 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9908[0m/9908 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m1808[0m/1808 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m3830[0m/3830 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9008[0m/9008 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7d6[0m/e7d6 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9808[0m/9808 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9005[0m/9005 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9805[0m/9805 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m900d[0m/900d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m200a[0m/200a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9014[0m/9014 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m202b[0m/202b [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9014[0m/9014 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m202d[0m/202d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9014[0m/9014 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m202a[0m/202a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9014[0m/9014 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m202f[0m/202f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9014[0m/9014 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2025[0m/2025 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9014[0m/9014 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2026[0m/2026 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9014[0m/9014 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m207c[0m/207c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9014[0m/9014 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m205e[0m/205e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9014[0m/9014 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981a[0m/981a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2800[0m/2800 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92md100[0m/d100 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7f9[0m/e7f9 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981b[0m/981b [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9003[0m/9003 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9803[0m/9803 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9004[0m/9004 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9804[0m/9804 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2825[0m/2825 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9000[0m/9000 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92md033[0m/d033 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9800[0m/9800 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2826[0m/2826 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92md038[0m/d038 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9800[0m/9800 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m282a[0m/282a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92md01d[0m/d01d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9800[0m/9800 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m282b[0m/282b [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92md00f[0m/d00f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9800[0m/9800 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m282d[0m/282d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92md010[0m/d010 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9800[0m/9800 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m282f[0m/282f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92md016[0m/d016 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9800[0m/9800 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m285e[0m/285e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92md02e[0m/d02e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9800[0m/9800 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m287c[0m/287c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92md025[0m/d025 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me02e[0m/e02e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m980e[0m/980e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m990d[0m/990d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m1840[0m/1840 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9015[0m/9015 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me02a[0m/e02a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m980e[0m/980e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m990d[0m/990d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m1a40[0m/1a40 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9015[0m/9015 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me025[0m/e025 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m980e[0m/980e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m990d[0m/990d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m4341[0m/4341 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9115[0m/9115 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me020[0m/e020 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m980e[0m/980e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m990d[0m/990d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0004[0m/0004 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m000d[0m/000d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9820[0m/9820 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9002[0m/9002 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9802[0m/9802 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9015[0m/9015 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me017[0m/e017 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m980e[0m/980e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m990d[0m/990d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0004[0m/0004 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m000d[0m/000d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9821[0m/9821 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9001[0m/9001 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9801[0m/9801 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9015[0m/9015 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me00e[0m/e00e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m980e[0m/980e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m990d[0m/990d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m4008[0m/4008 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9015[0m/9015 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me009[0m/e009 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m980e[0m/980e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m990d[0m/990d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m4308[0m/4308 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9015[0m/9015 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me004[0m/e004 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m980e[0m/980e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m990d[0m/990d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m4048[0m/4048 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9015[0m/9015 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7ff[0m/e7ff [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7a0[0m/e7a0 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m200a[0m/200a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9014[0m/9014 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2052[0m/2052 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9014[0m/9014 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m203d[0m/203d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9014[0m/9014 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981f[0m/981f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9013[0m/9013 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9813[0m/9813 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2800[0m/2800 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92md104[0m/d104 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2030[0m/2030 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9014[0m/9014 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me033[0m/e033 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9815[0m/9815 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2800[0m/2800 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92mda09[0m/da09 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m202d[0m/202d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9014[0m/9014 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9815[0m/9815 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m4240[0m/4240 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9015[0m/9015 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981f[0m/981f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9013[0m/9013 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2000[0m/2000 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9012[0m/9012 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9011[0m/9011 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9811[0m/9811 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2807[0m/2807 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92md81d[0m/d81d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9813[0m/9813 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m210f[0m/210f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m4008[0m/4008 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9010[0m/9010 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9813[0m/9813 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0900[0m/0900 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9013[0m/9013 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9812[0m/9812 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2800[0m/2800 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92md108[0m/d108 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9810[0m/9810 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2800[0m/2800 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92md002[0m/d002 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2001[0m/2001 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9012[0m/9012 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7ff[0m/e7ff [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me005[0m/e005 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9810[0m/9810 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m3030[0m/3030 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9014[0m/9014 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9811[0m/9811 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m1c40[0m/1c40 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9011[0m/9011 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7dc[0m/e7dc [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981a[0m/981a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2800[0m/2800 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92md100[0m/d100 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7f9[0m/e7f9 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2001[0m/2001 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9018[0m/9018 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fd[0m/e7fd [OK]

LOGGER(AsmParser[show_difference]): Percentage of Correctness: 100.00%
LOGGER(Functions[define_label]): Define label .text
LOGGER(Functions[is_label]): Check if .text is a label
LOGGER(Functions[is_label]): .text is not a label
LOGGER(Functions[define_label]): Define label .syntax unified
LOGGER(Functions[is_label]): Check if .syntax unified is a label
LOGGER(Functions[is_label]): .syntax unified is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	67, "2.09"
LOGGER(Functions[is_label]): Check if .eabi_attribute	67, "2.09" is a label
LOGGER(Functions[is_label]): .eabi_attribute	67, "2.09" is not a label
LOGGER(Functions[define_label]): Define label .cpu	cortex-m0
LOGGER(Functions[is_label]): Check if .cpu	cortex-m0 is a label
LOGGER(Functions[is_label]): .cpu	cortex-m0 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	6, 12
LOGGER(Functions[is_label]): Check if .eabi_attribute	6, 12 is a label
LOGGER(Functions[is_label]): .eabi_attribute	6, 12 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	7, 77
LOGGER(Functions[is_label]): Check if .eabi_attribute	7, 77 is a label
LOGGER(Functions[is_label]): .eabi_attribute	7, 77 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	8, 0
LOGGER(Functions[is_label]): Check if .eabi_attribute	8, 0 is a label
LOGGER(Functions[is_label]): .eabi_attribute	8, 0 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	9, 1
LOGGER(Functions[is_label]): Check if .eabi_attribute	9, 1 is a label
LOGGER(Functions[is_label]): .eabi_attribute	9, 1 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	34, 0
LOGGER(Functions[is_label]): Check if .eabi_attribute	34, 0 is a label
LOGGER(Functions[is_label]): .eabi_attribute	34, 0 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	17, 1
LOGGER(Functions[is_label]): Check if .eabi_attribute	17, 1 is a label
LOGGER(Functions[is_label]): .eabi_attribute	17, 1 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	20, 1
LOGGER(Functions[is_label]): Check if .eabi_attribute	20, 1 is a label
LOGGER(Functions[is_label]): .eabi_attribute	20, 1 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	21, 1
LOGGER(Functions[is_label]): Check if .eabi_attribute	21, 1 is a label
LOGGER(Functions[is_label]): .eabi_attribute	21, 1 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	23, 3
LOGGER(Functions[is_label]): Check if .eabi_attribute	23, 3 is a label
LOGGER(Functions[is_label]): .eabi_attribute	23, 3 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	24, 1
LOGGER(Functions[is_label]): Check if .eabi_attribute	24, 1 is a label
LOGGER(Functions[is_label]): .eabi_attribute	24, 1 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	25, 1
LOGGER(Functions[is_label]): Check if .eabi_attribute	25, 1 is a label
LOGGER(Functions[is_label]): .eabi_attribute	25, 1 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	38, 1
LOGGER(Functions[is_label]): Check if .eabi_attribute	38, 1 is a label
LOGGER(Functions[is_label]): .eabi_attribute	38, 1 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	18, 4
LOGGER(Functions[is_label]): Check if .eabi_attribute	18, 4 is a label
LOGGER(Functions[is_label]): .eabi_attribute	18, 4 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	26, 2
LOGGER(Functions[is_label]): Check if .eabi_attribute	26, 2 is a label
LOGGER(Functions[is_label]): .eabi_attribute	26, 2 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	14, 0
LOGGER(Functions[is_label]): Check if .eabi_attribute	14, 0 is a label
LOGGER(Functions[is_label]): .eabi_attribute	14, 0 is not a label
LOGGER(Functions[define_label]): Define label .file	"calculator.c"
LOGGER(Functions[is_label]): Check if .file	"calculator.c" is a label
LOGGER(Functions[is_label]): .file	"calculator.c" is not a label
LOGGER(Functions[define_label]): Define label .globl	run
LOGGER(Functions[is_label]): Check if .globl	run is a label
LOGGER(Functions[is_label]): .globl	run is not a label
LOGGER(Functions[define_label]): Define label .p2align	1
LOGGER(Functions[is_label]): Check if .p2align	1 is a label
LOGGER(Functions[is_label]): .p2align	1 is not a label
LOGGER(Functions[define_label]): Define label .type	run,%function
LOGGER(Functions[is_label]): Check if .type	run,%function is a label
LOGGER(Functions[is_label]): .type	run,%function is not a label
LOGGER(Functions[define_label]): Define label .code	16
LOGGER(Functions[is_label]): Check if .code	16 is a label
LOGGER(Functions[is_label]): .code	16 is not a label
LOGGER(Functions[define_label]): Define label .thumb_func
LOGGER(Functions[is_label]): Check if .thumb_func is a label
LOGGER(Functions[is_label]): .thumb_func is not a label
LOGGER(Functions[define_label]): Define label .fnstart
LOGGER(Functions[is_label]): Check if .fnstart is a label
LOGGER(Functions[is_label]): .fnstart is not a label
LOGGER(Functions[define_label]): Define label .pad	#100
LOGGER(Functions[is_label]): Check if .pad	#100 is a label
LOGGER(Functions[is_label]): .pad	#100 is not a label
LOGGER(Functions[define_label]): Define label sub	sp, #100
LOGGER(Functions[is_label]): Check if sub	sp, #100 is a label
LOGGER(Functions[is_label]): sub	sp, #100 is not a label
LOGGER(Functions[define_label]): Define label @APP
LOGGER(Functions[is_label]): Check if @APP is a label
LOGGER(Functions[is_label]): @APP is not a label
LOGGER(Functions[define_label]): Define label sub	sp, #508
LOGGER(Functions[is_label]): Check if sub	sp, #508 is a label
LOGGER(Functions[is_label]): sub	sp, #508 is not a label
LOGGER(Functions[define_label]): Define label @NO_APP
LOGGER(Functions[is_label]): Check if @NO_APP is a label
LOGGER(Functions[is_label]): @NO_APP is not a label
LOGGER(Functions[define_label]): Define label @APP
LOGGER(Functions[is_label]): Check if @APP is a label
LOGGER(Functions[is_label]): @APP is not a label
LOGGER(Functions[define_label]): Define label sub	sp, #452
LOGGER(Functions[is_label]): Check if sub	sp, #452 is a label
LOGGER(Functions[is_label]): sub	sp, #452 is not a label
LOGGER(Functions[define_label]): Define label @NO_APP
LOGGER(Functions[is_label]): Check if @NO_APP is a label
LOGGER(Functions[is_label]): @NO_APP is not a label
LOGGER(Functions[define_label]): Define label movs	r0, #0
LOGGER(Functions[is_label]): Check if movs	r0, #0 is a label
LOGGER(Functions[is_label]): movs	r0, #0 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #12]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #12] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #12] is not a label
LOGGER(Functions[define_label]): Define label movs	r0, #1
LOGGER(Functions[is_label]): Check if movs	r0, #1 is a label
LOGGER(Functions[is_label]): movs	r0, #1 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #8]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #8] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #8] is not a label
LOGGER(Functions[define_label]): Define label movs	r0, #2
LOGGER(Functions[is_label]): Check if movs	r0, #2 is a label
LOGGER(Functions[is_label]): movs	r0, #2 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #4]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #4] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #4] is not a label
LOGGER(Functions[define_label]): Define label movs	r0, #3
LOGGER(Functions[is_label]): Check if movs	r0, #3 is a label
LOGGER(Functions[is_label]): movs	r0, #3 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp]
LOGGER(Functions[is_label]): Check if str	r0, [sp] is a label
LOGGER(Functions[is_label]): str	r0, [sp] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_1
LOGGER(Functions[is_label]): Check if b	.LBB0_1 is a label
LOGGER(Functions[is_label]): b	.LBB0_1 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_1:
LOGGER(Functions[is_label]): Check if .LBB0_1: is a label
LOGGER(Functions[is_label]): .LBB0_1: is a label
LOGGER(Functions[define_label]): Label .LBB0_1 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #56]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #56] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #56] is not a label
LOGGER(Functions[define_label]): Define label ldr	r1, [sp, #12]
LOGGER(Functions[is_label]): Check if ldr	r1, [sp, #12] is a label
LOGGER(Functions[is_label]): ldr	r1, [sp, #12] is not a label
LOGGER(Functions[define_label]): Define label cmp	r0, r1
LOGGER(Functions[is_label]): Check if cmp	r0, r1 is a label
LOGGER(Functions[is_label]): cmp	r0, r1 is not a label
LOGGER(Functions[define_label]): Define label bne	.LBB0_3
LOGGER(Functions[is_label]): Check if bne	.LBB0_3 is a label
LOGGER(Functions[is_label]): bne	.LBB0_3 is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_2
LOGGER(Functions[is_label]): Check if b	.LBB0_2 is a label
LOGGER(Functions[is_label]): b	.LBB0_2 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_2:
LOGGER(Functions[is_label]): Check if .LBB0_2: is a label
LOGGER(Functions[is_label]): .LBB0_2: is a label
LOGGER(Functions[define_label]): Label .LBB0_2 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #48]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #48] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #48] is not a label
LOGGER(Functions[define_label]): Define label ldr	r1, [sp, #52]
LOGGER(Functions[is_label]): Check if ldr	r1, [sp, #52] is a label
LOGGER(Functions[is_label]): ldr	r1, [sp, #52] is not a label
LOGGER(Functions[define_label]): Define label adds	r0, r0, r1
LOGGER(Functions[is_label]): Check if adds	r0, r0, r1 is a label
LOGGER(Functions[is_label]): adds	r0, r0, r1 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #40]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #40] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #40] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_12
LOGGER(Functions[is_label]): Check if b	.LBB0_12 is a label
LOGGER(Functions[is_label]): b	.LBB0_12 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_3:
LOGGER(Functions[is_label]): Check if .LBB0_3: is a label
LOGGER(Functions[is_label]): .LBB0_3: is a label
LOGGER(Functions[define_label]): Label .LBB0_3 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #56]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #56] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #56] is not a label
LOGGER(Functions[define_label]): Define label ldr	r1, [sp, #8]
LOGGER(Functions[is_label]): Check if ldr	r1, [sp, #8] is a label
LOGGER(Functions[is_label]): ldr	r1, [sp, #8] is not a label
LOGGER(Functions[define_label]): Define label cmp	r0, r1
LOGGER(Functions[is_label]): Check if cmp	r0, r1 is a label
LOGGER(Functions[is_label]): cmp	r0, r1 is not a label
LOGGER(Functions[define_label]): Define label bne	.LBB0_5
LOGGER(Functions[is_label]): Check if bne	.LBB0_5 is a label
LOGGER(Functions[is_label]): bne	.LBB0_5 is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_4
LOGGER(Functions[is_label]): Check if b	.LBB0_4 is a label
LOGGER(Functions[is_label]): b	.LBB0_4 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_4:
LOGGER(Functions[is_label]): Check if .LBB0_4: is a label
LOGGER(Functions[is_label]): .LBB0_4: is a label
LOGGER(Functions[define_label]): Label .LBB0_4 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #48]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #48] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #48] is not a label
LOGGER(Functions[define_label]): Define label ldr	r1, [sp, #52]
LOGGER(Functions[is_label]): Check if ldr	r1, [sp, #52] is a label
LOGGER(Functions[is_label]): ldr	r1, [sp, #52] is not a label
LOGGER(Functions[define_label]): Define label subs	r0, r0, r1
LOGGER(Functions[is_label]): Check if subs	r0, r0, r1 is a label
LOGGER(Functions[is_label]): subs	r0, r0, r1 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #40]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #40] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #40] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_11
LOGGER(Functions[is_label]): Check if b	.LBB0_11 is a label
LOGGER(Functions[is_label]): b	.LBB0_11 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_5:
LOGGER(Functions[is_label]): Check if .LBB0_5: is a label
LOGGER(Functions[is_label]): .LBB0_5: is a label
LOGGER(Functions[define_label]): Label .LBB0_5 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #56]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #56] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #56] is not a label
LOGGER(Functions[define_label]): Define label ldr	r1, [sp, #4]
LOGGER(Functions[is_label]): Check if ldr	r1, [sp, #4] is a label
LOGGER(Functions[is_label]): ldr	r1, [sp, #4] is not a label
LOGGER(Functions[define_label]): Define label cmp	r0, r1
LOGGER(Functions[is_label]): Check if cmp	r0, r1 is a label
LOGGER(Functions[is_label]): cmp	r0, r1 is not a label
LOGGER(Functions[define_label]): Define label bne	.LBB0_7
LOGGER(Functions[is_label]): Check if bne	.LBB0_7 is a label
LOGGER(Functions[is_label]): bne	.LBB0_7 is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_6
LOGGER(Functions[is_label]): Check if b	.LBB0_6 is a label
LOGGER(Functions[is_label]): b	.LBB0_6 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_6:
LOGGER(Functions[is_label]): Check if .LBB0_6: is a label
LOGGER(Functions[is_label]): .LBB0_6: is a label
LOGGER(Functions[define_label]): Label .LBB0_6 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #48]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #48] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #48] is not a label
LOGGER(Functions[define_label]): Define label ldr	r1, [sp, #52]
LOGGER(Functions[is_label]): Check if ldr	r1, [sp, #52] is a label
LOGGER(Functions[is_label]): ldr	r1, [sp, #52] is not a label
LOGGER(Functions[define_label]): Define label muls	r1, r0, r1
LOGGER(Functions[is_label]): Check if muls	r1, r0, r1 is a label
LOGGER(Functions[is_label]): muls	r1, r0, r1 is not a label
LOGGER(Functions[define_label]): Define label str	r1, [sp, #40]
LOGGER(Functions[is_label]): Check if str	r1, [sp, #40] is a label
LOGGER(Functions[is_label]): str	r1, [sp, #40] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_10
LOGGER(Functions[is_label]): Check if b	.LBB0_10 is a label
LOGGER(Functions[is_label]): b	.LBB0_10 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_7:
LOGGER(Functions[is_label]): Check if .LBB0_7: is a label
LOGGER(Functions[is_label]): .LBB0_7: is a label
LOGGER(Functions[define_label]): Label .LBB0_7 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #56]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #56] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #56] is not a label
LOGGER(Functions[define_label]): Define label ldr	r1, [sp]
LOGGER(Functions[is_label]): Check if ldr	r1, [sp] is a label
LOGGER(Functions[is_label]): ldr	r1, [sp] is not a label
LOGGER(Functions[define_label]): Define label cmp	r0, r1
LOGGER(Functions[is_label]): Check if cmp	r0, r1 is a label
LOGGER(Functions[is_label]): cmp	r0, r1 is not a label
LOGGER(Functions[define_label]): Define label bne	.LBB0_9
LOGGER(Functions[is_label]): Check if bne	.LBB0_9 is a label
LOGGER(Functions[is_label]): bne	.LBB0_9 is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_8
LOGGER(Functions[is_label]): Check if b	.LBB0_8 is a label
LOGGER(Functions[is_label]): b	.LBB0_8 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_8:
LOGGER(Functions[is_label]): Check if .LBB0_8: is a label
LOGGER(Functions[is_label]): .LBB0_8: is a label
LOGGER(Functions[define_label]): Label .LBB0_8 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #48]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #48] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #48] is not a label
LOGGER(Functions[define_label]): Define label ldr	r1, [sp, #52]
LOGGER(Functions[is_label]): Check if ldr	r1, [sp, #52] is a label
LOGGER(Functions[is_label]): ldr	r1, [sp, #52] is not a label
LOGGER(Functions[define_label]): Define label lsls	r0, r1
LOGGER(Functions[is_label]): Check if lsls	r0, r1 is a label
LOGGER(Functions[is_label]): lsls	r0, r1 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #40]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #40] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #40] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_9
LOGGER(Functions[is_label]): Check if b	.LBB0_9 is a label
LOGGER(Functions[is_label]): b	.LBB0_9 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_9:
LOGGER(Functions[is_label]): Check if .LBB0_9: is a label
LOGGER(Functions[is_label]): .LBB0_9: is a label
LOGGER(Functions[define_label]): Label .LBB0_9 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_10
LOGGER(Functions[is_label]): Check if b	.LBB0_10 is a label
LOGGER(Functions[is_label]): b	.LBB0_10 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_10:
LOGGER(Functions[is_label]): Check if .LBB0_10: is a label
LOGGER(Functions[is_label]): .LBB0_10: is a label
LOGGER(Functions[define_label]): Label .LBB0_10 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_11
LOGGER(Functions[is_label]): Check if b	.LBB0_11 is a label
LOGGER(Functions[is_label]): b	.LBB0_11 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_11:
LOGGER(Functions[is_label]): Check if .LBB0_11: is a label
LOGGER(Functions[is_label]): .LBB0_11: is a label
LOGGER(Functions[define_label]): Label .LBB0_11 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_12
LOGGER(Functions[is_label]): Check if b	.LBB0_12 is a label
LOGGER(Functions[is_label]): b	.LBB0_12 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_12:
LOGGER(Functions[is_label]): Check if .LBB0_12: is a label
LOGGER(Functions[is_label]): .LBB0_12: is a label
LOGGER(Functions[define_label]): Label .LBB0_12 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_1
LOGGER(Functions[is_label]): Check if b	.LBB0_1 is a label
LOGGER(Functions[is_label]): b	.LBB0_1 is not a label
LOGGER(Functions[define_label]): Define label .Lfunc_end0:
LOGGER(Functions[is_label]): Check if .Lfunc_end0: is a label
LOGGER(Functions[is_label]): .Lfunc_end0: is a label
LOGGER(Functions[define_label]): Label .Lfunc_end0 defined
LOGGER(Functions[define_label]): Define label .size	run, .Lfunc_end0-run
LOGGER(Functions[is_label]): Check if .size	run, .Lfunc_end0-run is a label
LOGGER(Functions[is_label]): .size	run, .Lfunc_end0-run is not a label
LOGGER(Functions[define_label]): Define label .cantunwind
LOGGER(Functions[is_label]): Check if .cantunwind is a label
LOGGER(Functions[is_label]): .cantunwind is not a label
LOGGER(Functions[define_label]): Define label .fnend
LOGGER(Functions[is_label]): Check if .fnend is a label
LOGGER(Functions[is_label]): .fnend is not a label
LOGGER(Functions[define_label]): Define label .ident	"clang version 8.0.1-9 (tags/RELEASE_801/final)"
LOGGER(Functions[is_label]): Check if .ident	"clang version 8.0.1-9 (tags/RELEASE_801/final)" is a label
LOGGER(Functions[is_label]): .ident	"clang version 8.0.1-9 (tags/RELEASE_801/final)" is not a label
LOGGER(Functions[define_label]): Define label .section	".note.GNU-stack","",%progbits
LOGGER(Functions[is_label]): Check if .section	".note.GNU-stack","",%progbits is a label
LOGGER(Functions[is_label]): .section	".note.GNU-stack","",%progbits is not a label
LOGGER(Functions[define_label]): Define label .addrsig
LOGGER(Functions[is_label]): Check if .addrsig is a label
LOGGER(Functions[is_label]): .addrsig is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	30, 6
LOGGER(Functions[is_label]): Check if .eabi_attribute	30, 6 is a label
LOGGER(Functions[is_label]): .eabi_attribute	30, 6 is not a label
LOGGER(Functions[set_number_of_instructions_labels]): Set number of instructions labels to 56
LOGGER(Functions[set_number_of_labels]): Set number of labels to 107
LOGGER(AsmParser[convert_into_binary]): ['SUB', 'sp,', '#100']
LOGGER(AsmParser[call_function]): Calling sub_imm7 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 25: 0011001
LOGGER(AsmInstructions[instruction_sp_imm7]): 1011 00001 0011001
LOGGER(AsmParser[convert_into_binary]): ['SUB', 'sp,', '#508']
LOGGER(AsmParser[call_function]): Calling sub_imm7 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 127: 1111111
LOGGER(AsmInstructions[instruction_sp_imm7]): 1011 00001 1111111
LOGGER(AsmParser[convert_into_binary]): ['SUB', 'sp,', '#452']
LOGGER(AsmParser[call_function]): Calling sub_imm7 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 113: 1110001
LOGGER(AsmInstructions[instruction_sp_imm7]): 1011 00001 1110001
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#0']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00000000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#12']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 3: 00000011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000011 000
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#1']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 00000001
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00000001
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#8']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 2: 00000010
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000010 000
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#2']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 2: 00000010
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00000010
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#4']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 00000001
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000001 000
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#3']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 3: 00000011
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00000011
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#0']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000000 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_1']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#56']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 14: 00001110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001110 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r1,', '#12']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 3: 00000011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00000011 001
LOGGER(AsmParser[convert_into_binary]): ['CMP', 'r0,', 'r1']
LOGGER(AsmParser[call_function]): Calling cmp_Rn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r1: 001
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 1010 001 000
LOGGER(AsmParser[convert_into_binary]): ['BNE', '.LBB0_3']
LOGGER(AsmParser[call_function]): Calling bne with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 4: 00000100
LOGGER(AsmInstructions[conditional_branch]): 1101 0001 00000100
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_2']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#48']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 12: 00001100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001100 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r1,', '#52']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 13: 00001101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001101 001
LOGGER(AsmParser[convert_into_binary]): ['ADDS', 'r0,', 'r0,', 'r1']
LOGGER(AsmParser[call_function]): Calling adds_Rd_Rn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r1: 001
LOGGER(AsmInstructions[instruction_rm_rd_rn]): 00 01100 001 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#40']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 10: 00001010
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00001010 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_12']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 31: 00000011111
LOGGER(AsmInstructions[unconditional_branch]): 11100 00000011111
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#56']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 14: 00001110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001110 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r1,', '#8']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 2: 00000010
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00000010 001
LOGGER(AsmParser[convert_into_binary]): ['CMP', 'r0,', 'r1']
LOGGER(AsmParser[call_function]): Calling cmp_Rn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r1: 001
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 1010 001 000
LOGGER(AsmParser[convert_into_binary]): ['BNE', '.LBB0_5']
LOGGER(AsmParser[call_function]): Calling bne with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 4: 00000100
LOGGER(AsmInstructions[conditional_branch]): 1101 0001 00000100
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_4']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#48']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 12: 00001100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001100 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r1,', '#52']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 13: 00001101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001101 001
LOGGER(AsmParser[convert_into_binary]): ['SUBS', 'r0,', 'r0,', 'r1']
LOGGER(AsmParser[call_function]): Calling subs_Rd_Rn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r1: 001
LOGGER(AsmInstructions[instruction_rm_rd_rn]): 00 01101 001 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#40']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 10: 00001010
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00001010 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_11']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 20: 00000010100
LOGGER(AsmInstructions[unconditional_branch]): 11100 00000010100
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#56']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 14: 00001110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001110 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r1,', '#4']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 00000001
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00000001 001
LOGGER(AsmParser[convert_into_binary]): ['CMP', 'r0,', 'r1']
LOGGER(AsmParser[call_function]): Calling cmp_Rn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r1: 001
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 1010 001 000
LOGGER(AsmParser[convert_into_binary]): ['BNE', '.LBB0_7']
LOGGER(AsmParser[call_function]): Calling bne with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 4: 00000100
LOGGER(AsmInstructions[conditional_branch]): 1101 0001 00000100
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_6']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#48']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 12: 00001100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001100 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r1,', '#52']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 13: 00001101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001101 001
LOGGER(AsmParser[convert_into_binary]): ['MULS', 'r1,', 'r0,', 'r1']
LOGGER(AsmParser[call_function]): Calling muls_Rdm_Rn_Rdm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 1101 000 001
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r1,', '#40']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 10: 00001010
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00001010 001
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_10']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 9: 00000001001
LOGGER(AsmInstructions[unconditional_branch]): 11100 00000001001
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#56']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 14: 00001110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001110 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r1,', '#0']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00000000 001
LOGGER(AsmParser[convert_into_binary]): ['CMP', 'r0,', 'r1']
LOGGER(AsmParser[call_function]): Calling cmp_Rn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r1: 001
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 1010 001 000
LOGGER(AsmParser[convert_into_binary]): ['BNE', '.LBB0_9']
LOGGER(AsmParser[call_function]): Calling bne with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 4: 00000100
LOGGER(AsmInstructions[conditional_branch]): 1101 0001 00000100
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_8']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#48']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 12: 00001100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001100 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r1,', '#52']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 13: 00001101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001101 001
LOGGER(AsmParser[convert_into_binary]): ['LSLS', 'r0,', 'r1']
LOGGER(AsmParser[call_function]): Calling lsls_Rdn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r1: 001
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 0010 001 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#40']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 10: 00001010
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00001010 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_9']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_10']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_11']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_12']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_1']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111010010
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111010010
LOGGER(AsmParser[binary_to_hexa]): Converting binary to hexadecimal
LOGGER(AsmParser[binary_to_hexa]): ['b099', 'b0ff', 'b0f1', '2000', '9003', '2001', '9002', '2002', '9001', '2003', '9000', 'e7fe', '980e', '9903', '4288', 'd104', 'e7fe', '980c', '990d', '1840', '900a', 'e01f', '980e', '9902', '4288', 'd104', 'e7fe', '980c', '990d', '1a40', '900a', 'e014', '980e', '9901', '4288', 'd104', 'e7fe', '980c', '990d', '4341', '910a', 'e009', '980e', '9900', '4288', 'd104', 'e7fe', '980c', '990d', '4088', '900a', 'e7fe', 'e7fe', 'e7fe', 'e7fe', 'e7d2']
LOGGER(AsmParser[save_hexa_as_bin]): Saving the hexadecimal in ../../../src/tests/resources/output_binaries/other/calculator.bin
LOGGER(AsmReader[read_bin_file]): Reading ../../../src/tests/resources/output_binaries/other/calculator.bin
LOGGER(AsmParser[show_difference]): Expected/Actual: [92mb099[0m/b099 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92mb0ff[0m/b0ff [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92mb0f1[0m/b0f1 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2000[0m/2000 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9003[0m/9003 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2001[0m/2001 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9002[0m/9002 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2002[0m/2002 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9001[0m/9001 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2003[0m/2003 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9000[0m/9000 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m980e[0m/980e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9903[0m/9903 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m4288[0m/4288 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92md104[0m/d104 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m980c[0m/980c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m990d[0m/990d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m1840[0m/1840 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m900a[0m/900a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me01f[0m/e01f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m980e[0m/980e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9902[0m/9902 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m4288[0m/4288 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92md104[0m/d104 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m980c[0m/980c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m990d[0m/990d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m1a40[0m/1a40 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m900a[0m/900a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me014[0m/e014 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m980e[0m/980e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9901[0m/9901 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m4288[0m/4288 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92md104[0m/d104 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m980c[0m/980c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m990d[0m/990d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m4341[0m/4341 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m910a[0m/910a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me009[0m/e009 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m980e[0m/980e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9900[0m/9900 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m4288[0m/4288 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92md104[0m/d104 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m980c[0m/980c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m990d[0m/990d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m4088[0m/4088 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m900a[0m/900a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7d2[0m/e7d2 [OK]

LOGGER(AsmParser[show_difference]): Percentage of Correctness: 100.00%
LOGGER(Functions[define_label]): Define label sub sp, #12
LOGGER(Functions[is_label]): Check if sub sp, #12 is a label
LOGGER(Functions[is_label]): sub sp, #12 is not a label
LOGGER(Functions[define_label]): Define label movs r0, #0
LOGGER(Functions[is_label]): Check if movs r0, #0 is a label
LOGGER(Functions[is_label]): movs r0, #0 is not a label
LOGGER(Functions[define_label]): Define label str r0, [sp, #8]
LOGGER(Functions[is_label]): Check if str r0, [sp, #8] is a label
LOGGER(Functions[is_label]): str r0, [sp, #8] is not a label
LOGGER(Functions[define_label]): Define label movs r1, #1
LOGGER(Functions[is_label]): Check if movs r1, #1 is a label
LOGGER(Functions[is_label]): movs r1, #1 is not a label
LOGGER(Functions[define_label]): Define label str r1, [sp, #4]
LOGGER(Functions[is_label]): Check if str r1, [sp, #4] is a label
LOGGER(Functions[is_label]): str r1, [sp, #4] is not a label
LOGGER(Functions[define_label]): Define label ldr r1, [sp, #8]
LOGGER(Functions[is_label]): Check if ldr r1, [sp, #8] is a label
LOGGER(Functions[is_label]): ldr r1, [sp, #8] is not a label
LOGGER(Functions[define_label]): Define label ldr r2, [sp, #4]
LOGGER(Functions[is_label]): Check if ldr r2, [sp, #4] is a label
LOGGER(Functions[is_label]): ldr r2, [sp, #4] is not a label
LOGGER(Functions[define_label]): Define label adds r1, r1, r2
LOGGER(Functions[is_label]): Check if adds r1, r1, r2 is a label
LOGGER(Functions[is_label]): adds r1, r1, r2 is not a label
LOGGER(Functions[define_label]): Define label str r1, [sp]
LOGGER(Functions[is_label]): Check if str r1, [sp] is a label
LOGGER(Functions[is_label]): str r1, [sp] is not a label
LOGGER(Functions[define_label]): Define label add sp, #12
LOGGER(Functions[is_label]): Check if add sp, #12 is a label
LOGGER(Functions[is_label]): add sp, #12 is not a label
LOGGER(Functions[set_number_of_instructions_labels]): Set number of instructions labels to 10
LOGGER(Functions[set_number_of_labels]): Set number of labels to 10
LOGGER(AsmParser[convert_into_binary]): ['SUB', 'sp,', '#12']
LOGGER(AsmParser[call_function]): Calling sub_imm7 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 3: 0000011
LOGGER(AsmInstructions[instruction_sp_imm7]): 1011 00001 0000011
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#0']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00000000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#8']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 2: 00000010
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000010 000
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r1,', '#1']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 00000001
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 001 00000001
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r1,', '#4']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 00000001
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000001 001
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r1,', '#8']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 2: 00000010
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00000010 001
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r2,', '#4']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 00000001
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00000001 010
LOGGER(AsmParser[convert_into_binary]): ['ADDS', 'r1,', 'r1,', 'r2']
LOGGER(AsmParser[call_function]): Calling adds_Rd_Rn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_register_number]): Get register number from r2: 010
LOGGER(AsmInstructions[instruction_rm_rd_rn]): 00 01100 010 001 001
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r1,', '#0']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000000 001
LOGGER(AsmParser[convert_into_binary]): ['ADD', 'sp,', '#12']
LOGGER(AsmParser[call_function]): Calling add_imm7 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 3: 0000011
LOGGER(AsmInstructions[instruction_sp_imm7]): 1011 00000 0000011
LOGGER(AsmParser[binary_to_hexa]): Converting binary to hexadecimal
LOGGER(AsmParser[binary_to_hexa]): ['b083', '2000', '9002', '2101', '9101', '9902', '9a01', '1889', '9100', 'b003']
LOGGER(AsmParser[save_hexa_as_bin]): Saving the hexadecimal in ../../../src/tests/resources/output_binaries/other/default_example.bin
LOGGER(AsmReader[read_bin_file]): Reading ../../../src/tests/resources/output_binaries/other/default_example.bin
LOGGER(AsmParser[show_difference]): Expected/Actual: [92mb083[0m/b083 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2000[0m/2000 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9002[0m/9002 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2101[0m/2101 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9101[0m/9101 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9902[0m/9902 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9a01[0m/9a01 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m1889[0m/1889 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9100[0m/9100 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92mb003[0m/b003 [OK]

LOGGER(AsmParser[show_difference]): Percentage of Correctness: 100.00%
LOGGER(Functions[define_label]): Define label .text
LOGGER(Functions[is_label]): Check if .text is a label
LOGGER(Functions[is_label]): .text is not a label
LOGGER(Functions[define_label]): Define label .syntax unified
LOGGER(Functions[is_label]): Check if .syntax unified is a label
LOGGER(Functions[is_label]): .syntax unified is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	67, "2.09"
LOGGER(Functions[is_label]): Check if .eabi_attribute	67, "2.09" is a label
LOGGER(Functions[is_label]): .eabi_attribute	67, "2.09" is not a label
LOGGER(Functions[define_label]): Define label .cpu	cortex-m0
LOGGER(Functions[is_label]): Check if .cpu	cortex-m0 is a label
LOGGER(Functions[is_label]): .cpu	cortex-m0 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	6, 12
LOGGER(Functions[is_label]): Check if .eabi_attribute	6, 12 is a label
LOGGER(Functions[is_label]): .eabi_attribute	6, 12 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	7, 77
LOGGER(Functions[is_label]): Check if .eabi_attribute	7, 77 is a label
LOGGER(Functions[is_label]): .eabi_attribute	7, 77 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	8, 0
LOGGER(Functions[is_label]): Check if .eabi_attribute	8, 0 is a label
LOGGER(Functions[is_label]): .eabi_attribute	8, 0 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	9, 1
LOGGER(Functions[is_label]): Check if .eabi_attribute	9, 1 is a label
LOGGER(Functions[is_label]): .eabi_attribute	9, 1 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	34, 0
LOGGER(Functions[is_label]): Check if .eabi_attribute	34, 0 is a label
LOGGER(Functions[is_label]): .eabi_attribute	34, 0 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	17, 1
LOGGER(Functions[is_label]): Check if .eabi_attribute	17, 1 is a label
LOGGER(Functions[is_label]): .eabi_attribute	17, 1 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	20, 1
LOGGER(Functions[is_label]): Check if .eabi_attribute	20, 1 is a label
LOGGER(Functions[is_label]): .eabi_attribute	20, 1 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	21, 1
LOGGER(Functions[is_label]): Check if .eabi_attribute	21, 1 is a label
LOGGER(Functions[is_label]): .eabi_attribute	21, 1 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	23, 3
LOGGER(Functions[is_label]): Check if .eabi_attribute	23, 3 is a label
LOGGER(Functions[is_label]): .eabi_attribute	23, 3 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	24, 1
LOGGER(Functions[is_label]): Check if .eabi_attribute	24, 1 is a label
LOGGER(Functions[is_label]): .eabi_attribute	24, 1 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	25, 1
LOGGER(Functions[is_label]): Check if .eabi_attribute	25, 1 is a label
LOGGER(Functions[is_label]): .eabi_attribute	25, 1 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	38, 1
LOGGER(Functions[is_label]): Check if .eabi_attribute	38, 1 is a label
LOGGER(Functions[is_label]): .eabi_attribute	38, 1 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	18, 4
LOGGER(Functions[is_label]): Check if .eabi_attribute	18, 4 is a label
LOGGER(Functions[is_label]): .eabi_attribute	18, 4 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	26, 2
LOGGER(Functions[is_label]): Check if .eabi_attribute	26, 2 is a label
LOGGER(Functions[is_label]): .eabi_attribute	26, 2 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	14, 0
LOGGER(Functions[is_label]): Check if .eabi_attribute	14, 0 is a label
LOGGER(Functions[is_label]): .eabi_attribute	14, 0 is not a label
LOGGER(Functions[define_label]): Define label .file	"simple_add.c"
LOGGER(Functions[is_label]): Check if .file	"simple_add.c" is a label
LOGGER(Functions[is_label]): .file	"simple_add.c" is not a label
LOGGER(Functions[define_label]): Define label .globl	run
LOGGER(Functions[is_label]): Check if .globl	run is a label
LOGGER(Functions[is_label]): .globl	run is not a label
LOGGER(Functions[define_label]): Define label .p2align	1
LOGGER(Functions[is_label]): Check if .p2align	1 is a label
LOGGER(Functions[is_label]): .p2align	1 is not a label
LOGGER(Functions[define_label]): Define label .type	run,%function
LOGGER(Functions[is_label]): Check if .type	run,%function is a label
LOGGER(Functions[is_label]): .type	run,%function is not a label
LOGGER(Functions[define_label]): Define label .code	16
LOGGER(Functions[is_label]): Check if .code	16 is a label
LOGGER(Functions[is_label]): .code	16 is not a label
LOGGER(Functions[define_label]): Define label .thumb_func
LOGGER(Functions[is_label]): Check if .thumb_func is a label
LOGGER(Functions[is_label]): .thumb_func is not a label
LOGGER(Functions[define_label]): Define label .fnstart
LOGGER(Functions[is_label]): Check if .fnstart is a label
LOGGER(Functions[is_label]): .fnstart is not a label
LOGGER(Functions[define_label]): Define label .pad	#96
LOGGER(Functions[is_label]): Check if .pad	#96 is a label
LOGGER(Functions[is_label]): .pad	#96 is not a label
LOGGER(Functions[define_label]): Define label sub	sp, #96
LOGGER(Functions[is_label]): Check if sub	sp, #96 is a label
LOGGER(Functions[is_label]): sub	sp, #96 is not a label
LOGGER(Functions[define_label]): Define label @APP
LOGGER(Functions[is_label]): Check if @APP is a label
LOGGER(Functions[is_label]): @APP is not a label
LOGGER(Functions[define_label]): Define label sub	sp, #508
LOGGER(Functions[is_label]): Check if sub	sp, #508 is a label
LOGGER(Functions[is_label]): sub	sp, #508 is not a label
LOGGER(Functions[define_label]): Define label @NO_APP
LOGGER(Functions[is_label]): Check if @NO_APP is a label
LOGGER(Functions[is_label]): @NO_APP is not a label
LOGGER(Functions[define_label]): Define label @APP
LOGGER(Functions[is_label]): Check if @APP is a label
LOGGER(Functions[is_label]): @APP is not a label
LOGGER(Functions[define_label]): Define label sub	sp, #452
LOGGER(Functions[is_label]): Check if sub	sp, #452 is a label
LOGGER(Functions[is_label]): sub	sp, #452 is not a label
LOGGER(Functions[define_label]): Define label @NO_APP
LOGGER(Functions[is_label]): Check if @NO_APP is a label
LOGGER(Functions[is_label]): @NO_APP is not a label
LOGGER(Functions[define_label]): Define label movs	r0, #1
LOGGER(Functions[is_label]): Check if movs	r0, #1 is a label
LOGGER(Functions[is_label]): movs	r0, #1 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #8]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #8] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #8] is not a label
LOGGER(Functions[define_label]): Define label movs	r0, #2
LOGGER(Functions[is_label]): Check if movs	r0, #2 is a label
LOGGER(Functions[is_label]): movs	r0, #2 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #4]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #4] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #4] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #8]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #8] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #8] is not a label
LOGGER(Functions[define_label]): Define label ldr	r1, [sp, #4]
LOGGER(Functions[is_label]): Check if ldr	r1, [sp, #4] is a label
LOGGER(Functions[is_label]): ldr	r1, [sp, #4] is not a label
LOGGER(Functions[define_label]): Define label adds	r0, r0, r1
LOGGER(Functions[is_label]): Check if adds	r0, r0, r1 is a label
LOGGER(Functions[is_label]): adds	r0, r0, r1 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp]
LOGGER(Functions[is_label]): Check if str	r0, [sp] is a label
LOGGER(Functions[is_label]): str	r0, [sp] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #36]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #36] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #36] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_1
LOGGER(Functions[is_label]): Check if b	.LBB0_1 is a label
LOGGER(Functions[is_label]): b	.LBB0_1 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_1:
LOGGER(Functions[is_label]): Check if .LBB0_1: is a label
LOGGER(Functions[is_label]): .LBB0_1: is a label
LOGGER(Functions[define_label]): Label .LBB0_1 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_2
LOGGER(Functions[is_label]): Check if b	.LBB0_2 is a label
LOGGER(Functions[is_label]): b	.LBB0_2 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_2:
LOGGER(Functions[is_label]): Check if .LBB0_2: is a label
LOGGER(Functions[is_label]): .LBB0_2: is a label
LOGGER(Functions[define_label]): Label .LBB0_2 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_2
LOGGER(Functions[is_label]): Check if b	.LBB0_2 is a label
LOGGER(Functions[is_label]): b	.LBB0_2 is not a label
LOGGER(Functions[define_label]): Define label .Lfunc_end0:
LOGGER(Functions[is_label]): Check if .Lfunc_end0: is a label
LOGGER(Functions[is_label]): .Lfunc_end0: is a label
LOGGER(Functions[define_label]): Label .Lfunc_end0 defined
LOGGER(Functions[define_label]): Define label .size	run, .Lfunc_end0-run
LOGGER(Functions[is_label]): Check if .size	run, .Lfunc_end0-run is a label
LOGGER(Functions[is_label]): .size	run, .Lfunc_end0-run is not a label
LOGGER(Functions[define_label]): Define label .cantunwind
LOGGER(Functions[is_label]): Check if .cantunwind is a label
LOGGER(Functions[is_label]): .cantunwind is not a label
LOGGER(Functions[define_label]): Define label .fnend
LOGGER(Functions[is_label]): Check if .fnend is a label
LOGGER(Functions[is_label]): .fnend is not a label
LOGGER(Functions[define_label]): Define label .ident	"clang version 8.0.1-9 (tags/RELEASE_801/final)"
LOGGER(Functions[is_label]): Check if .ident	"clang version 8.0.1-9 (tags/RELEASE_801/final)" is a label
LOGGER(Functions[is_label]): .ident	"clang version 8.0.1-9 (tags/RELEASE_801/final)" is not a label
LOGGER(Functions[define_label]): Define label .section	".note.GNU-stack","",%progbits
LOGGER(Functions[is_label]): Check if .section	".note.GNU-stack","",%progbits is a label
LOGGER(Functions[is_label]): .section	".note.GNU-stack","",%progbits is not a label
LOGGER(Functions[define_label]): Define label .addrsig
LOGGER(Functions[is_label]): Check if .addrsig is a label
LOGGER(Functions[is_label]): .addrsig is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	30, 6
LOGGER(Functions[is_label]): Check if .eabi_attribute	30, 6 is a label
LOGGER(Functions[is_label]): .eabi_attribute	30, 6 is not a label
LOGGER(Functions[set_number_of_instructions_labels]): Set number of instructions labels to 16
LOGGER(Functions[set_number_of_labels]): Set number of labels to 57
LOGGER(AsmParser[convert_into_binary]): ['SUB', 'sp,', '#96']
LOGGER(AsmParser[call_function]): Calling sub_imm7 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 24: 0011000
LOGGER(AsmInstructions[instruction_sp_imm7]): 1011 00001 0011000
LOGGER(AsmParser[convert_into_binary]): ['SUB', 'sp,', '#508']
LOGGER(AsmParser[call_function]): Calling sub_imm7 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 127: 1111111
LOGGER(AsmInstructions[instruction_sp_imm7]): 1011 00001 1111111
LOGGER(AsmParser[convert_into_binary]): ['SUB', 'sp,', '#452']
LOGGER(AsmParser[call_function]): Calling sub_imm7 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 113: 1110001
LOGGER(AsmInstructions[instruction_sp_imm7]): 1011 00001 1110001
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#1']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 00000001
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00000001
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#8']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 2: 00000010
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000010 000
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#2']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 2: 00000010
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00000010
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#4']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 00000001
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000001 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#8']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 2: 00000010
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00000010 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r1,', '#4']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 00000001
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00000001 001
LOGGER(AsmParser[convert_into_binary]): ['ADDS', 'r0,', 'r0,', 'r1']
LOGGER(AsmParser[call_function]): Calling adds_Rd_Rn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r1: 001
LOGGER(AsmInstructions[instruction_rm_rd_rn]): 00 01100 001 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#0']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000000 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#0']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00000000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#36']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 9: 00001001
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00001001 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_1']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_2']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_2']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111101
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111101
LOGGER(AsmParser[binary_to_hexa]): Converting binary to hexadecimal
LOGGER(AsmParser[binary_to_hexa]): ['b098', 'b0ff', 'b0f1', '2001', '9002', '2002', '9001', '9802', '9901', '1840', '9000', '9800', '9009', 'e7fe', 'e7fe', 'e7fd']
LOGGER(AsmParser[save_hexa_as_bin]): Saving the hexadecimal in ../../../src/tests/resources/output_binaries/other/simple_add.bin
LOGGER(AsmReader[read_bin_file]): Reading ../../../src/tests/resources/output_binaries/other/simple_add.bin
LOGGER(AsmParser[show_difference]): Expected/Actual: [92mb098[0m/b098 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92mb0ff[0m/b0ff [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92mb0f1[0m/b0f1 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2001[0m/2001 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9002[0m/9002 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2002[0m/2002 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9001[0m/9001 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9802[0m/9802 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9901[0m/9901 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m1840[0m/1840 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9000[0m/9000 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9800[0m/9800 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9009[0m/9009 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fd[0m/e7fd [OK]

LOGGER(AsmParser[show_difference]): Percentage of Correctness: 100.00%
LOGGER(Functions[define_label]): Define label SBCS R0, R1
LOGGER(Functions[is_label]): Check if SBCS R0, R1 is a label
LOGGER(Functions[is_label]): SBCS R0, R1 is not a label
LOGGER(Functions[set_number_of_instructions_labels]): Set number of instructions labels to 1
LOGGER(Functions[set_number_of_labels]): Set number of labels to 1
LOGGER(AsmParser[convert_into_binary]): ['SBCS', 'R0,', 'R1']
LOGGER(AsmParser[call_function]): Calling sbcs_Rdn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r1: 001
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 0110 001 000
LOGGER(AsmParser[binary_to_hexa]): Converting binary to hexadecimal
LOGGER(AsmParser[binary_to_hexa]): ['4188']
LOGGER(AsmParser[save_hexa_as_bin]): Saving the hexadecimal in ../../../src/tests/resources/output_binaries/other/test.bin
LOGGER(AsmReader[read_bin_file]): Reading ../../../src/tests/resources/output_binaries/other/test.bin
LOGGER(Functions[define_label]): Define label .text
LOGGER(Functions[is_label]): Check if .text is a label
LOGGER(Functions[is_label]): .text is not a label
LOGGER(Functions[define_label]): Define label .syntax unified
LOGGER(Functions[is_label]): Check if .syntax unified is a label
LOGGER(Functions[is_label]): .syntax unified is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	67, "2.09"
LOGGER(Functions[is_label]): Check if .eabi_attribute	67, "2.09" is a label
LOGGER(Functions[is_label]): .eabi_attribute	67, "2.09" is not a label
LOGGER(Functions[define_label]): Define label .cpu	cortex-m0
LOGGER(Functions[is_label]): Check if .cpu	cortex-m0 is a label
LOGGER(Functions[is_label]): .cpu	cortex-m0 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	6, 12
LOGGER(Functions[is_label]): Check if .eabi_attribute	6, 12 is a label
LOGGER(Functions[is_label]): .eabi_attribute	6, 12 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	7, 77
LOGGER(Functions[is_label]): Check if .eabi_attribute	7, 77 is a label
LOGGER(Functions[is_label]): .eabi_attribute	7, 77 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	8, 0
LOGGER(Functions[is_label]): Check if .eabi_attribute	8, 0 is a label
LOGGER(Functions[is_label]): .eabi_attribute	8, 0 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	9, 1
LOGGER(Functions[is_label]): Check if .eabi_attribute	9, 1 is a label
LOGGER(Functions[is_label]): .eabi_attribute	9, 1 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	34, 0
LOGGER(Functions[is_label]): Check if .eabi_attribute	34, 0 is a label
LOGGER(Functions[is_label]): .eabi_attribute	34, 0 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	17, 1
LOGGER(Functions[is_label]): Check if .eabi_attribute	17, 1 is a label
LOGGER(Functions[is_label]): .eabi_attribute	17, 1 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	20, 1
LOGGER(Functions[is_label]): Check if .eabi_attribute	20, 1 is a label
LOGGER(Functions[is_label]): .eabi_attribute	20, 1 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	21, 1
LOGGER(Functions[is_label]): Check if .eabi_attribute	21, 1 is a label
LOGGER(Functions[is_label]): .eabi_attribute	21, 1 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	23, 3
LOGGER(Functions[is_label]): Check if .eabi_attribute	23, 3 is a label
LOGGER(Functions[is_label]): .eabi_attribute	23, 3 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	23, 3
LOGGER(Functions[is_label]): Check if .eabi_attribute	23, 3 is a label
LOGGER(Functions[is_label]): .eabi_attribute	23, 3 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	24, 1
LOGGER(Functions[is_label]): Check if .eabi_attribute	24, 1 is a label
LOGGER(Functions[is_label]): .eabi_attribute	24, 1 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	25, 1
LOGGER(Functions[is_label]): Check if .eabi_attribute	25, 1 is a label
LOGGER(Functions[is_label]): .eabi_attribute	25, 1 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	38, 1
LOGGER(Functions[is_label]): Check if .eabi_attribute	38, 1 is a label
LOGGER(Functions[is_label]): .eabi_attribute	38, 1 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	18, 4
LOGGER(Functions[is_label]): Check if .eabi_attribute	18, 4 is a label
LOGGER(Functions[is_label]): .eabi_attribute	18, 4 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	26, 2
LOGGER(Functions[is_label]): Check if .eabi_attribute	26, 2 is a label
LOGGER(Functions[is_label]): .eabi_attribute	26, 2 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	14, 0
LOGGER(Functions[is_label]): Check if .eabi_attribute	14, 0 is a label
LOGGER(Functions[is_label]): .eabi_attribute	14, 0 is not a label
LOGGER(Functions[define_label]): Define label .file	"testfp.c"
LOGGER(Functions[is_label]): Check if .file	"testfp.c" is a label
LOGGER(Functions[is_label]): .file	"testfp.c" is not a label
LOGGER(Functions[define_label]): Define label .globl	run
LOGGER(Functions[is_label]): Check if .globl	run is a label
LOGGER(Functions[is_label]): .globl	run is not a label
LOGGER(Functions[define_label]): Define label .p2align	1
LOGGER(Functions[is_label]): Check if .p2align	1 is a label
LOGGER(Functions[is_label]): .p2align	1 is not a label
LOGGER(Functions[define_label]): Define label .type	run,%function
LOGGER(Functions[is_label]): Check if .type	run,%function is a label
LOGGER(Functions[is_label]): .type	run,%function is not a label
LOGGER(Functions[define_label]): Define label .code	16
LOGGER(Functions[is_label]): Check if .code	16 is a label
LOGGER(Functions[is_label]): .code	16 is not a label
LOGGER(Functions[define_label]): Define label .thumb_func
LOGGER(Functions[is_label]): Check if .thumb_func is a label
LOGGER(Functions[is_label]): .thumb_func is not a label
LOGGER(Functions[define_label]): Define label .fnstart
LOGGER(Functions[is_label]): Check if .fnstart is a label
LOGGER(Functions[is_label]): .fnstart is not a label
LOGGER(Functions[define_label]): Define label .save	{r4, r5, r7, lr}
LOGGER(Functions[is_label]): Check if .save	{r4, r5, r7, lr} is a label
LOGGER(Functions[is_label]): .save	{r4, r5, r7, lr} is not a label
LOGGER(Functions[define_label]): Define label .setfp	r7, sp, #8
LOGGER(Functions[is_label]): Check if .setfp	r7, sp, #8 is a label
LOGGER(Functions[is_label]): .setfp	r7, sp, #8 is not a label
LOGGER(Functions[define_label]): Define label add	r7, sp, #8
LOGGER(Functions[is_label]): Check if add	r7, sp, #8 is a label
LOGGER(Functions[is_label]): add	r7, sp, #8 is not a label
LOGGER(Functions[define_label]): Define label .pad	#188
LOGGER(Functions[is_label]): Check if .pad	#188 is a label
LOGGER(Functions[is_label]): .pad	#188 is not a label
LOGGER(Functions[define_label]): Define label sub	sp, #188
LOGGER(Functions[is_label]): Check if sub	sp, #188 is a label
LOGGER(Functions[is_label]): sub	sp, #188 is not a label
LOGGER(Functions[define_label]): Define label @APP
LOGGER(Functions[is_label]): Check if @APP is a label
LOGGER(Functions[is_label]): @APP is not a label
LOGGER(Functions[define_label]): Define label sub	sp, #508
LOGGER(Functions[is_label]): Check if sub	sp, #508 is a label
LOGGER(Functions[is_label]): sub	sp, #508 is not a label
LOGGER(Functions[define_label]): Define label @NO_APP
LOGGER(Functions[is_label]): Check if @NO_APP is a label
LOGGER(Functions[is_label]): @NO_APP is not a label
LOGGER(Functions[define_label]): Define label @APP
LOGGER(Functions[is_label]): Check if @APP is a label
LOGGER(Functions[is_label]): @APP is not a label
LOGGER(Functions[define_label]): Define label sub	sp, #452
LOGGER(Functions[is_label]): Check if sub	sp, #452 is a label
LOGGER(Functions[is_label]): sub	sp, #452 is not a label
LOGGER(Functions[define_label]): Define label @NO_APP
LOGGER(Functions[is_label]): Check if @NO_APP is a label
LOGGER(Functions[is_label]): @NO_APP is not a label
LOGGER(Functions[define_label]): Define label movs	r0, #7
LOGGER(Functions[is_label]): Check if movs	r0, #7 is a label
LOGGER(Functions[is_label]): movs	r0, #7 is not a label
LOGGER(Functions[define_label]): Define label lsls	r0, r0, #15
LOGGER(Functions[is_label]): Check if lsls	r0, r0, #15 is a label
LOGGER(Functions[is_label]): lsls	r0, r0, #15 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #100]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #100] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #100] is not a label
LOGGER(Functions[define_label]): Define label movs	r0, #15
LOGGER(Functions[is_label]): Check if movs	r0, #15 is a label
LOGGER(Functions[is_label]): movs	r0, #15 is not a label
LOGGER(Functions[define_label]): Define label lsls	r0, r0, #15
LOGGER(Functions[is_label]): Check if lsls	r0, r0, #15 is a label
LOGGER(Functions[is_label]): lsls	r0, r0, #15 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #96]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #96] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #96] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #100]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #100] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #100] is not a label
LOGGER(Functions[define_label]): Define label lsrs	r0, r0, #8
LOGGER(Functions[is_label]): Check if lsrs	r0, r0, #8 is a label
LOGGER(Functions[is_label]): lsrs	r0, r0, #8 is not a label
LOGGER(Functions[define_label]): Define label ldr	r1, [sp, #96]
LOGGER(Functions[is_label]): Check if ldr	r1, [sp, #96] is a label
LOGGER(Functions[is_label]): ldr	r1, [sp, #96] is not a label
LOGGER(Functions[define_label]): Define label lsrs	r1, r1, #8
LOGGER(Functions[is_label]): Check if lsrs	r1, r1, #8 is a label
LOGGER(Functions[is_label]): lsrs	r1, r1, #8 is not a label
LOGGER(Functions[define_label]): Define label muls	r1, r0, r1
LOGGER(Functions[is_label]): Check if muls	r1, r0, r1 is a label
LOGGER(Functions[is_label]): muls	r1, r0, r1 is not a label
LOGGER(Functions[define_label]): Define label str	r1, [sp, #92]
LOGGER(Functions[is_label]): Check if str	r1, [sp, #92] is a label
LOGGER(Functions[is_label]): str	r1, [sp, #92] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_1
LOGGER(Functions[is_label]): Check if b	.LBB0_1 is a label
LOGGER(Functions[is_label]): b	.LBB0_1 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_1:
LOGGER(Functions[is_label]): Check if .LBB0_1: is a label
LOGGER(Functions[is_label]): .LBB0_1: is a label
LOGGER(Functions[define_label]): Label .LBB0_1 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #100]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #100] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #100] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #88]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #88] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #88] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #88]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #88] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #88] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #16]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #16] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #16] is not a label
LOGGER(Functions[define_label]): Define label ldr	r2, [sp, #16]
LOGGER(Functions[is_label]): Check if ldr	r2, [sp, #16] is a label
LOGGER(Functions[is_label]): ldr	r2, [sp, #16] is not a label
LOGGER(Functions[define_label]): Define label @APP
LOGGER(Functions[is_label]): Check if @APP is a label
LOGGER(Functions[is_label]): @APP is not a label
LOGGER(Functions[define_label]): Define label movs	r0, r2
LOGGER(Functions[is_label]): Check if movs	r0, r2 is a label
LOGGER(Functions[is_label]): movs	r0, r2 is not a label
LOGGER(Functions[define_label]): Define label lsrs	r1, r0, #16
LOGGER(Functions[is_label]): Check if lsrs	r1, r0, #16 is a label
LOGGER(Functions[is_label]): lsrs	r1, r0, #16 is not a label
LOGGER(Functions[define_label]): Define label @NO_APP
LOGGER(Functions[is_label]): Check if @NO_APP is a label
LOGGER(Functions[is_label]): @NO_APP is not a label
LOGGER(Functions[define_label]): Define label str	r1, [sp, #84]
LOGGER(Functions[is_label]): Check if str	r1, [sp, #84] is a label
LOGGER(Functions[is_label]): str	r1, [sp, #84] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #84]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #84] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #84] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #128]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #128] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #128] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_2
LOGGER(Functions[is_label]): Check if b	.LBB0_2 is a label
LOGGER(Functions[is_label]): b	.LBB0_2 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_2:
LOGGER(Functions[is_label]): Check if .LBB0_2: is a label
LOGGER(Functions[is_label]): .LBB0_2: is a label
LOGGER(Functions[define_label]): Label .LBB0_2 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #168]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #168] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #168] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label lsrs	r0, r0, #12
LOGGER(Functions[is_label]): Check if lsrs	r0, r0, #12 is a label
LOGGER(Functions[is_label]): lsrs	r0, r0, #12 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label movs	r0, #0
LOGGER(Functions[is_label]): Check if movs	r0, #0 is a label
LOGGER(Functions[is_label]): movs	r0, #0 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #116]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #116] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #116] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #112]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #112] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #112] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_3
LOGGER(Functions[is_label]): Check if b	.LBB0_3 is a label
LOGGER(Functions[is_label]): b	.LBB0_3 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_3:
LOGGER(Functions[is_label]): Check if .LBB0_3: is a label
LOGGER(Functions[is_label]): .LBB0_3: is a label
LOGGER(Functions[define_label]): Label .LBB0_3 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #112]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #112] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #112] is not a label
LOGGER(Functions[define_label]): Define label cmp	r0, #4
LOGGER(Functions[is_label]): Check if cmp	r0, #4 is a label
LOGGER(Functions[is_label]): cmp	r0, #4 is not a label
LOGGER(Functions[define_label]): Define label bhi	.LBB0_8
LOGGER(Functions[is_label]): Check if bhi	.LBB0_8 is a label
LOGGER(Functions[is_label]): bhi	.LBB0_8 is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_4
LOGGER(Functions[is_label]): Check if b	.LBB0_4 is a label
LOGGER(Functions[is_label]): b	.LBB0_4 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_4:
LOGGER(Functions[is_label]): Check if .LBB0_4: is a label
LOGGER(Functions[is_label]): .LBB0_4: is a label
LOGGER(Functions[define_label]): Label .LBB0_4 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label movs	r1, #15
LOGGER(Functions[is_label]): Check if movs	r1, #15 is a label
LOGGER(Functions[is_label]): movs	r1, #15 is not a label
LOGGER(Functions[define_label]): Define label ands	r0, r1
LOGGER(Functions[is_label]): Check if ands	r0, r1 is a label
LOGGER(Functions[is_label]): ands	r0, r1 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #108]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #108] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #108] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label lsrs	r0, r0, #4
LOGGER(Functions[is_label]): Check if lsrs	r0, r0, #4 is a label
LOGGER(Functions[is_label]): lsrs	r0, r0, #4 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_5
LOGGER(Functions[is_label]): Check if b	.LBB0_5 is a label
LOGGER(Functions[is_label]): b	.LBB0_5 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_5:
LOGGER(Functions[is_label]): Check if .LBB0_5: is a label
LOGGER(Functions[is_label]): .LBB0_5: is a label
LOGGER(Functions[define_label]): Label .LBB0_5 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #108]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #108] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #108] is not a label
LOGGER(Functions[define_label]): Define label adds	r0, #48
LOGGER(Functions[is_label]): Check if adds	r0, #48 is a label
LOGGER(Functions[is_label]): adds	r0, #48 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #124]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #124] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #124] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_6
LOGGER(Functions[is_label]): Check if b	.LBB0_6 is a label
LOGGER(Functions[is_label]): b	.LBB0_6 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_6:
LOGGER(Functions[is_label]): Check if .LBB0_6: is a label
LOGGER(Functions[is_label]): .LBB0_6: is a label
LOGGER(Functions[define_label]): Label .LBB0_6 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_7
LOGGER(Functions[is_label]): Check if b	.LBB0_7 is a label
LOGGER(Functions[is_label]): b	.LBB0_7 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_7:
LOGGER(Functions[is_label]): Check if .LBB0_7: is a label
LOGGER(Functions[is_label]): .LBB0_7: is a label
LOGGER(Functions[define_label]): Label .LBB0_7 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #112]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #112] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #112] is not a label
LOGGER(Functions[define_label]): Define label adds	r0, r0, #1
LOGGER(Functions[is_label]): Check if adds	r0, r0, #1 is a label
LOGGER(Functions[is_label]): adds	r0, r0, #1 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #112]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #112] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #112] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_3
LOGGER(Functions[is_label]): Check if b	.LBB0_3 is a label
LOGGER(Functions[is_label]): b	.LBB0_3 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_8:
LOGGER(Functions[is_label]): Check if .LBB0_8: is a label
LOGGER(Functions[is_label]): .LBB0_8: is a label
LOGGER(Functions[define_label]): Label .LBB0_8 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_9
LOGGER(Functions[is_label]): Check if b	.LBB0_9 is a label
LOGGER(Functions[is_label]): b	.LBB0_9 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_9:
LOGGER(Functions[is_label]): Check if .LBB0_9: is a label
LOGGER(Functions[is_label]): .LBB0_9: is a label
LOGGER(Functions[define_label]): Label .LBB0_9 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #88]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #88] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #88] is not a label
LOGGER(Functions[define_label]): Define label @APP
LOGGER(Functions[is_label]): Check if @APP is a label
LOGGER(Functions[is_label]): @APP is not a label
LOGGER(Functions[define_label]): Define label lsls	r2, r0, #16
LOGGER(Functions[is_label]): Check if lsls	r2, r0, #16 is a label
LOGGER(Functions[is_label]): lsls	r2, r0, #16 is not a label
LOGGER(Functions[define_label]): Define label lsrs	r2, r2, #16
LOGGER(Functions[is_label]): Check if lsrs	r2, r2, #16 is a label
LOGGER(Functions[is_label]): lsrs	r2, r2, #16 is not a label
LOGGER(Functions[define_label]): Define label movs	r1, #100
LOGGER(Functions[is_label]): Check if movs	r1, #100 is a label
LOGGER(Functions[is_label]): movs	r1, #100 is not a label
LOGGER(Functions[define_label]): Define label muls	r2, r1, r2
LOGGER(Functions[is_label]): Check if muls	r2, r1, r2 is a label
LOGGER(Functions[is_label]): muls	r2, r1, r2 is not a label
LOGGER(Functions[define_label]): Define label muls	r2, r1, r2
LOGGER(Functions[is_label]): Check if muls	r2, r1, r2 is a label
LOGGER(Functions[is_label]): muls	r2, r1, r2 is not a label
LOGGER(Functions[define_label]): Define label lsrs	r3, r2, #16
LOGGER(Functions[is_label]): Check if lsrs	r3, r2, #16 is a label
LOGGER(Functions[is_label]): lsrs	r3, r2, #16 is not a label
LOGGER(Functions[define_label]): Define label @NO_APP
LOGGER(Functions[is_label]): Check if @NO_APP is a label
LOGGER(Functions[is_label]): @NO_APP is not a label
LOGGER(Functions[define_label]): Define label str	r3, [sp, #84]
LOGGER(Functions[is_label]): Check if str	r3, [sp, #84] is a label
LOGGER(Functions[is_label]): str	r3, [sp, #84] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #84]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #84] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #84] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #128]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #128] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #128] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_10
LOGGER(Functions[is_label]): Check if b	.LBB0_10 is a label
LOGGER(Functions[is_label]): b	.LBB0_10 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_10:
LOGGER(Functions[is_label]): Check if .LBB0_10: is a label
LOGGER(Functions[is_label]): .LBB0_10: is a label
LOGGER(Functions[define_label]): Label .LBB0_10 defined
LOGGER(Functions[define_label]): Define label movs	r0, #46
LOGGER(Functions[is_label]): Check if movs	r0, #46 is a label
LOGGER(Functions[is_label]): movs	r0, #46 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #124]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #124] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #124] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_11
LOGGER(Functions[is_label]): Check if b	.LBB0_11 is a label
LOGGER(Functions[is_label]): b	.LBB0_11 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_11:
LOGGER(Functions[is_label]): Check if .LBB0_11: is a label
LOGGER(Functions[is_label]): .LBB0_11: is a label
LOGGER(Functions[define_label]): Label .LBB0_11 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_12
LOGGER(Functions[is_label]): Check if b	.LBB0_12 is a label
LOGGER(Functions[is_label]): b	.LBB0_12 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_12:
LOGGER(Functions[is_label]): Check if .LBB0_12: is a label
LOGGER(Functions[is_label]): .LBB0_12: is a label
LOGGER(Functions[define_label]): Label .LBB0_12 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #168]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #168] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #168] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label lsrs	r0, r0, #16
LOGGER(Functions[is_label]): Check if lsrs	r0, r0, #16 is a label
LOGGER(Functions[is_label]): lsrs	r0, r0, #16 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label movs	r0, #0
LOGGER(Functions[is_label]): Check if movs	r0, #0 is a label
LOGGER(Functions[is_label]): movs	r0, #0 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #116]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #116] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #116] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #112]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #112] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #112] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_13
LOGGER(Functions[is_label]): Check if b	.LBB0_13 is a label
LOGGER(Functions[is_label]): b	.LBB0_13 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_13:
LOGGER(Functions[is_label]): Check if .LBB0_13: is a label
LOGGER(Functions[is_label]): .LBB0_13: is a label
LOGGER(Functions[define_label]): Label .LBB0_13 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #112]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #112] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #112] is not a label
LOGGER(Functions[define_label]): Define label cmp	r0, #3
LOGGER(Functions[is_label]): Check if cmp	r0, #3 is a label
LOGGER(Functions[is_label]): cmp	r0, #3 is not a label
LOGGER(Functions[define_label]): Define label bhi	.LBB0_18
LOGGER(Functions[is_label]): Check if bhi	.LBB0_18 is a label
LOGGER(Functions[is_label]): bhi	.LBB0_18 is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_14
LOGGER(Functions[is_label]): Check if b	.LBB0_14 is a label
LOGGER(Functions[is_label]): b	.LBB0_14 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_14:
LOGGER(Functions[is_label]): Check if .LBB0_14: is a label
LOGGER(Functions[is_label]): .LBB0_14: is a label
LOGGER(Functions[define_label]): Label .LBB0_14 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label movs	r1, #15
LOGGER(Functions[is_label]): Check if movs	r1, #15 is a label
LOGGER(Functions[is_label]): movs	r1, #15 is not a label
LOGGER(Functions[define_label]): Define label ands	r0, r1
LOGGER(Functions[is_label]): Check if ands	r0, r1 is a label
LOGGER(Functions[is_label]): ands	r0, r1 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #108]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #108] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #108] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label lsrs	r0, r0, #4
LOGGER(Functions[is_label]): Check if lsrs	r0, r0, #4 is a label
LOGGER(Functions[is_label]): lsrs	r0, r0, #4 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_15
LOGGER(Functions[is_label]): Check if b	.LBB0_15 is a label
LOGGER(Functions[is_label]): b	.LBB0_15 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_15:
LOGGER(Functions[is_label]): Check if .LBB0_15: is a label
LOGGER(Functions[is_label]): .LBB0_15: is a label
LOGGER(Functions[define_label]): Label .LBB0_15 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #108]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #108] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #108] is not a label
LOGGER(Functions[define_label]): Define label adds	r0, #48
LOGGER(Functions[is_label]): Check if adds	r0, #48 is a label
LOGGER(Functions[is_label]): adds	r0, #48 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #124]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #124] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #124] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_16
LOGGER(Functions[is_label]): Check if b	.LBB0_16 is a label
LOGGER(Functions[is_label]): b	.LBB0_16 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_16:
LOGGER(Functions[is_label]): Check if .LBB0_16: is a label
LOGGER(Functions[is_label]): .LBB0_16: is a label
LOGGER(Functions[define_label]): Label .LBB0_16 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_17
LOGGER(Functions[is_label]): Check if b	.LBB0_17 is a label
LOGGER(Functions[is_label]): b	.LBB0_17 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_17:
LOGGER(Functions[is_label]): Check if .LBB0_17: is a label
LOGGER(Functions[is_label]): .LBB0_17: is a label
LOGGER(Functions[define_label]): Label .LBB0_17 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #112]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #112] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #112] is not a label
LOGGER(Functions[define_label]): Define label adds	r0, r0, #1
LOGGER(Functions[is_label]): Check if adds	r0, r0, #1 is a label
LOGGER(Functions[is_label]): adds	r0, r0, #1 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #112]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #112] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #112] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_13
LOGGER(Functions[is_label]): Check if b	.LBB0_13 is a label
LOGGER(Functions[is_label]): b	.LBB0_13 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_18:
LOGGER(Functions[is_label]): Check if .LBB0_18: is a label
LOGGER(Functions[is_label]): .LBB0_18: is a label
LOGGER(Functions[define_label]): Label .LBB0_18 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_19
LOGGER(Functions[is_label]): Check if b	.LBB0_19 is a label
LOGGER(Functions[is_label]): b	.LBB0_19 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_19:
LOGGER(Functions[is_label]): Check if .LBB0_19: is a label
LOGGER(Functions[is_label]): .LBB0_19: is a label
LOGGER(Functions[define_label]): Label .LBB0_19 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_20
LOGGER(Functions[is_label]): Check if b	.LBB0_20 is a label
LOGGER(Functions[is_label]): b	.LBB0_20 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_20:
LOGGER(Functions[is_label]): Check if .LBB0_20: is a label
LOGGER(Functions[is_label]): .LBB0_20: is a label
LOGGER(Functions[define_label]): Label .LBB0_20 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_21
LOGGER(Functions[is_label]): Check if b	.LBB0_21 is a label
LOGGER(Functions[is_label]): b	.LBB0_21 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_21:
LOGGER(Functions[is_label]): Check if .LBB0_21: is a label
LOGGER(Functions[is_label]): .LBB0_21: is a label
LOGGER(Functions[define_label]): Label .LBB0_21 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_22
LOGGER(Functions[is_label]): Check if b	.LBB0_22 is a label
LOGGER(Functions[is_label]): b	.LBB0_22 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_22:
LOGGER(Functions[is_label]): Check if .LBB0_22: is a label
LOGGER(Functions[is_label]): .LBB0_22: is a label
LOGGER(Functions[define_label]): Label .LBB0_22 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_23
LOGGER(Functions[is_label]): Check if b	.LBB0_23 is a label
LOGGER(Functions[is_label]): b	.LBB0_23 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_23:
LOGGER(Functions[is_label]): Check if .LBB0_23: is a label
LOGGER(Functions[is_label]): .LBB0_23: is a label
LOGGER(Functions[define_label]): Label .LBB0_23 defined
LOGGER(Functions[define_label]): Define label movs	r0, #32
LOGGER(Functions[is_label]): Check if movs	r0, #32 is a label
LOGGER(Functions[is_label]): movs	r0, #32 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #124]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #124] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #124] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_24
LOGGER(Functions[is_label]): Check if b	.LBB0_24 is a label
LOGGER(Functions[is_label]): b	.LBB0_24 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_24:
LOGGER(Functions[is_label]): Check if .LBB0_24: is a label
LOGGER(Functions[is_label]): .LBB0_24: is a label
LOGGER(Functions[define_label]): Label .LBB0_24 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_25
LOGGER(Functions[is_label]): Check if b	.LBB0_25 is a label
LOGGER(Functions[is_label]): b	.LBB0_25 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_25:
LOGGER(Functions[is_label]): Check if .LBB0_25: is a label
LOGGER(Functions[is_label]): .LBB0_25: is a label
LOGGER(Functions[define_label]): Label .LBB0_25 defined
LOGGER(Functions[define_label]): Define label movs	r0, #42
LOGGER(Functions[is_label]): Check if movs	r0, #42 is a label
LOGGER(Functions[is_label]): movs	r0, #42 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #124]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #124] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #124] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_26
LOGGER(Functions[is_label]): Check if b	.LBB0_26 is a label
LOGGER(Functions[is_label]): b	.LBB0_26 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_26:
LOGGER(Functions[is_label]): Check if .LBB0_26: is a label
LOGGER(Functions[is_label]): .LBB0_26: is a label
LOGGER(Functions[define_label]): Label .LBB0_26 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_27
LOGGER(Functions[is_label]): Check if b	.LBB0_27 is a label
LOGGER(Functions[is_label]): b	.LBB0_27 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_27:
LOGGER(Functions[is_label]): Check if .LBB0_27: is a label
LOGGER(Functions[is_label]): .LBB0_27: is a label
LOGGER(Functions[define_label]): Label .LBB0_27 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_28
LOGGER(Functions[is_label]): Check if b	.LBB0_28 is a label
LOGGER(Functions[is_label]): b	.LBB0_28 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_28:
LOGGER(Functions[is_label]): Check if .LBB0_28: is a label
LOGGER(Functions[is_label]): .LBB0_28: is a label
LOGGER(Functions[define_label]): Label .LBB0_28 defined
LOGGER(Functions[define_label]): Define label movs	r0, #32
LOGGER(Functions[is_label]): Check if movs	r0, #32 is a label
LOGGER(Functions[is_label]): movs	r0, #32 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #124]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #124] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #124] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_29
LOGGER(Functions[is_label]): Check if b	.LBB0_29 is a label
LOGGER(Functions[is_label]): b	.LBB0_29 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_29:
LOGGER(Functions[is_label]): Check if .LBB0_29: is a label
LOGGER(Functions[is_label]): .LBB0_29: is a label
LOGGER(Functions[define_label]): Label .LBB0_29 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_30
LOGGER(Functions[is_label]): Check if b	.LBB0_30 is a label
LOGGER(Functions[is_label]): b	.LBB0_30 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_30:
LOGGER(Functions[is_label]): Check if .LBB0_30: is a label
LOGGER(Functions[is_label]): .LBB0_30: is a label
LOGGER(Functions[define_label]): Label .LBB0_30 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_31
LOGGER(Functions[is_label]): Check if b	.LBB0_31 is a label
LOGGER(Functions[is_label]): b	.LBB0_31 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_31:
LOGGER(Functions[is_label]): Check if .LBB0_31: is a label
LOGGER(Functions[is_label]): .LBB0_31: is a label
LOGGER(Functions[define_label]): Label .LBB0_31 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #96]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #96] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #96] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #80]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #80] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #80] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #80]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #80] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #80] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #12]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #12] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #12] is not a label
LOGGER(Functions[define_label]): Define label ldr	r2, [sp, #12]
LOGGER(Functions[is_label]): Check if ldr	r2, [sp, #12] is a label
LOGGER(Functions[is_label]): ldr	r2, [sp, #12] is not a label
LOGGER(Functions[define_label]): Define label @APP
LOGGER(Functions[is_label]): Check if @APP is a label
LOGGER(Functions[is_label]): @APP is not a label
LOGGER(Functions[define_label]): Define label movs	r0, r2
LOGGER(Functions[is_label]): Check if movs	r0, r2 is a label
LOGGER(Functions[is_label]): movs	r0, r2 is not a label
LOGGER(Functions[define_label]): Define label lsrs	r1, r0, #16
LOGGER(Functions[is_label]): Check if lsrs	r1, r0, #16 is a label
LOGGER(Functions[is_label]): lsrs	r1, r0, #16 is not a label
LOGGER(Functions[define_label]): Define label @NO_APP
LOGGER(Functions[is_label]): Check if @NO_APP is a label
LOGGER(Functions[is_label]): @NO_APP is not a label
LOGGER(Functions[define_label]): Define label str	r1, [sp, #76]
LOGGER(Functions[is_label]): Check if str	r1, [sp, #76] is a label
LOGGER(Functions[is_label]): str	r1, [sp, #76] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #76]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #76] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #76] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #128]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #128] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #128] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_32
LOGGER(Functions[is_label]): Check if b	.LBB0_32 is a label
LOGGER(Functions[is_label]): b	.LBB0_32 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_32:
LOGGER(Functions[is_label]): Check if .LBB0_32: is a label
LOGGER(Functions[is_label]): .LBB0_32: is a label
LOGGER(Functions[define_label]): Label .LBB0_32 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #168]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #168] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #168] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label lsrs	r0, r0, #12
LOGGER(Functions[is_label]): Check if lsrs	r0, r0, #12 is a label
LOGGER(Functions[is_label]): lsrs	r0, r0, #12 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label movs	r0, #0
LOGGER(Functions[is_label]): Check if movs	r0, #0 is a label
LOGGER(Functions[is_label]): movs	r0, #0 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #116]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #116] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #116] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #112]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #112] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #112] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_33
LOGGER(Functions[is_label]): Check if b	.LBB0_33 is a label
LOGGER(Functions[is_label]): b	.LBB0_33 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_33:
LOGGER(Functions[is_label]): Check if .LBB0_33: is a label
LOGGER(Functions[is_label]): .LBB0_33: is a label
LOGGER(Functions[define_label]): Label .LBB0_33 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #112]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #112] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #112] is not a label
LOGGER(Functions[define_label]): Define label cmp	r0, #4
LOGGER(Functions[is_label]): Check if cmp	r0, #4 is a label
LOGGER(Functions[is_label]): cmp	r0, #4 is not a label
LOGGER(Functions[define_label]): Define label bhi	.LBB0_38
LOGGER(Functions[is_label]): Check if bhi	.LBB0_38 is a label
LOGGER(Functions[is_label]): bhi	.LBB0_38 is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_34
LOGGER(Functions[is_label]): Check if b	.LBB0_34 is a label
LOGGER(Functions[is_label]): b	.LBB0_34 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_34:
LOGGER(Functions[is_label]): Check if .LBB0_34: is a label
LOGGER(Functions[is_label]): .LBB0_34: is a label
LOGGER(Functions[define_label]): Label .LBB0_34 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label movs	r1, #15
LOGGER(Functions[is_label]): Check if movs	r1, #15 is a label
LOGGER(Functions[is_label]): movs	r1, #15 is not a label
LOGGER(Functions[define_label]): Define label ands	r0, r1
LOGGER(Functions[is_label]): Check if ands	r0, r1 is a label
LOGGER(Functions[is_label]): ands	r0, r1 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #108]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #108] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #108] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label lsrs	r0, r0, #4
LOGGER(Functions[is_label]): Check if lsrs	r0, r0, #4 is a label
LOGGER(Functions[is_label]): lsrs	r0, r0, #4 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_35
LOGGER(Functions[is_label]): Check if b	.LBB0_35 is a label
LOGGER(Functions[is_label]): b	.LBB0_35 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_35:
LOGGER(Functions[is_label]): Check if .LBB0_35: is a label
LOGGER(Functions[is_label]): .LBB0_35: is a label
LOGGER(Functions[define_label]): Label .LBB0_35 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #108]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #108] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #108] is not a label
LOGGER(Functions[define_label]): Define label adds	r0, #48
LOGGER(Functions[is_label]): Check if adds	r0, #48 is a label
LOGGER(Functions[is_label]): adds	r0, #48 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #124]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #124] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #124] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_36
LOGGER(Functions[is_label]): Check if b	.LBB0_36 is a label
LOGGER(Functions[is_label]): b	.LBB0_36 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_36:
LOGGER(Functions[is_label]): Check if .LBB0_36: is a label
LOGGER(Functions[is_label]): .LBB0_36: is a label
LOGGER(Functions[define_label]): Label .LBB0_36 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_37
LOGGER(Functions[is_label]): Check if b	.LBB0_37 is a label
LOGGER(Functions[is_label]): b	.LBB0_37 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_37:
LOGGER(Functions[is_label]): Check if .LBB0_37: is a label
LOGGER(Functions[is_label]): .LBB0_37: is a label
LOGGER(Functions[define_label]): Label .LBB0_37 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #112]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #112] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #112] is not a label
LOGGER(Functions[define_label]): Define label adds	r0, r0, #1
LOGGER(Functions[is_label]): Check if adds	r0, r0, #1 is a label
LOGGER(Functions[is_label]): adds	r0, r0, #1 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #112]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #112] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #112] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_33
LOGGER(Functions[is_label]): Check if b	.LBB0_33 is a label
LOGGER(Functions[is_label]): b	.LBB0_33 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_38:
LOGGER(Functions[is_label]): Check if .LBB0_38: is a label
LOGGER(Functions[is_label]): .LBB0_38: is a label
LOGGER(Functions[define_label]): Label .LBB0_38 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_39
LOGGER(Functions[is_label]): Check if b	.LBB0_39 is a label
LOGGER(Functions[is_label]): b	.LBB0_39 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_39:
LOGGER(Functions[is_label]): Check if .LBB0_39: is a label
LOGGER(Functions[is_label]): .LBB0_39: is a label
LOGGER(Functions[define_label]): Label .LBB0_39 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #80]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #80] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #80] is not a label
LOGGER(Functions[define_label]): Define label @APP
LOGGER(Functions[is_label]): Check if @APP is a label
LOGGER(Functions[is_label]): @APP is not a label
LOGGER(Functions[define_label]): Define label lsls	r2, r0, #16
LOGGER(Functions[is_label]): Check if lsls	r2, r0, #16 is a label
LOGGER(Functions[is_label]): lsls	r2, r0, #16 is not a label
LOGGER(Functions[define_label]): Define label lsrs	r2, r2, #16
LOGGER(Functions[is_label]): Check if lsrs	r2, r2, #16 is a label
LOGGER(Functions[is_label]): lsrs	r2, r2, #16 is not a label
LOGGER(Functions[define_label]): Define label movs	r1, #100
LOGGER(Functions[is_label]): Check if movs	r1, #100 is a label
LOGGER(Functions[is_label]): movs	r1, #100 is not a label
LOGGER(Functions[define_label]): Define label muls	r2, r1, r2
LOGGER(Functions[is_label]): Check if muls	r2, r1, r2 is a label
LOGGER(Functions[is_label]): muls	r2, r1, r2 is not a label
LOGGER(Functions[define_label]): Define label muls	r2, r1, r2
LOGGER(Functions[is_label]): Check if muls	r2, r1, r2 is a label
LOGGER(Functions[is_label]): muls	r2, r1, r2 is not a label
LOGGER(Functions[define_label]): Define label lsrs	r3, r2, #16
LOGGER(Functions[is_label]): Check if lsrs	r3, r2, #16 is a label
LOGGER(Functions[is_label]): lsrs	r3, r2, #16 is not a label
LOGGER(Functions[define_label]): Define label @NO_APP
LOGGER(Functions[is_label]): Check if @NO_APP is a label
LOGGER(Functions[is_label]): @NO_APP is not a label
LOGGER(Functions[define_label]): Define label str	r3, [sp, #76]
LOGGER(Functions[is_label]): Check if str	r3, [sp, #76] is a label
LOGGER(Functions[is_label]): str	r3, [sp, #76] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #76]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #76] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #76] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #128]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #128] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #128] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_40
LOGGER(Functions[is_label]): Check if b	.LBB0_40 is a label
LOGGER(Functions[is_label]): b	.LBB0_40 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_40:
LOGGER(Functions[is_label]): Check if .LBB0_40: is a label
LOGGER(Functions[is_label]): .LBB0_40: is a label
LOGGER(Functions[define_label]): Label .LBB0_40 defined
LOGGER(Functions[define_label]): Define label movs	r0, #46
LOGGER(Functions[is_label]): Check if movs	r0, #46 is a label
LOGGER(Functions[is_label]): movs	r0, #46 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #124]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #124] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #124] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_41
LOGGER(Functions[is_label]): Check if b	.LBB0_41 is a label
LOGGER(Functions[is_label]): b	.LBB0_41 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_41:
LOGGER(Functions[is_label]): Check if .LBB0_41: is a label
LOGGER(Functions[is_label]): .LBB0_41: is a label
LOGGER(Functions[define_label]): Label .LBB0_41 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_42
LOGGER(Functions[is_label]): Check if b	.LBB0_42 is a label
LOGGER(Functions[is_label]): b	.LBB0_42 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_42:
LOGGER(Functions[is_label]): Check if .LBB0_42: is a label
LOGGER(Functions[is_label]): .LBB0_42: is a label
LOGGER(Functions[define_label]): Label .LBB0_42 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #168]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #168] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #168] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label lsrs	r0, r0, #16
LOGGER(Functions[is_label]): Check if lsrs	r0, r0, #16 is a label
LOGGER(Functions[is_label]): lsrs	r0, r0, #16 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label movs	r0, #0
LOGGER(Functions[is_label]): Check if movs	r0, #0 is a label
LOGGER(Functions[is_label]): movs	r0, #0 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #116]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #116] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #116] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #112]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #112] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #112] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_43
LOGGER(Functions[is_label]): Check if b	.LBB0_43 is a label
LOGGER(Functions[is_label]): b	.LBB0_43 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_43:
LOGGER(Functions[is_label]): Check if .LBB0_43: is a label
LOGGER(Functions[is_label]): .LBB0_43: is a label
LOGGER(Functions[define_label]): Label .LBB0_43 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #112]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #112] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #112] is not a label
LOGGER(Functions[define_label]): Define label cmp	r0, #3
LOGGER(Functions[is_label]): Check if cmp	r0, #3 is a label
LOGGER(Functions[is_label]): cmp	r0, #3 is not a label
LOGGER(Functions[define_label]): Define label bhi	.LBB0_48
LOGGER(Functions[is_label]): Check if bhi	.LBB0_48 is a label
LOGGER(Functions[is_label]): bhi	.LBB0_48 is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_44
LOGGER(Functions[is_label]): Check if b	.LBB0_44 is a label
LOGGER(Functions[is_label]): b	.LBB0_44 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_44:
LOGGER(Functions[is_label]): Check if .LBB0_44: is a label
LOGGER(Functions[is_label]): .LBB0_44: is a label
LOGGER(Functions[define_label]): Label .LBB0_44 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label movs	r1, #15
LOGGER(Functions[is_label]): Check if movs	r1, #15 is a label
LOGGER(Functions[is_label]): movs	r1, #15 is not a label
LOGGER(Functions[define_label]): Define label ands	r0, r1
LOGGER(Functions[is_label]): Check if ands	r0, r1 is a label
LOGGER(Functions[is_label]): ands	r0, r1 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #108]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #108] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #108] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label lsrs	r0, r0, #4
LOGGER(Functions[is_label]): Check if lsrs	r0, r0, #4 is a label
LOGGER(Functions[is_label]): lsrs	r0, r0, #4 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_45
LOGGER(Functions[is_label]): Check if b	.LBB0_45 is a label
LOGGER(Functions[is_label]): b	.LBB0_45 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_45:
LOGGER(Functions[is_label]): Check if .LBB0_45: is a label
LOGGER(Functions[is_label]): .LBB0_45: is a label
LOGGER(Functions[define_label]): Label .LBB0_45 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #108]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #108] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #108] is not a label
LOGGER(Functions[define_label]): Define label adds	r0, #48
LOGGER(Functions[is_label]): Check if adds	r0, #48 is a label
LOGGER(Functions[is_label]): adds	r0, #48 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #124]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #124] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #124] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_46
LOGGER(Functions[is_label]): Check if b	.LBB0_46 is a label
LOGGER(Functions[is_label]): b	.LBB0_46 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_46:
LOGGER(Functions[is_label]): Check if .LBB0_46: is a label
LOGGER(Functions[is_label]): .LBB0_46: is a label
LOGGER(Functions[define_label]): Label .LBB0_46 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_47
LOGGER(Functions[is_label]): Check if b	.LBB0_47 is a label
LOGGER(Functions[is_label]): b	.LBB0_47 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_47:
LOGGER(Functions[is_label]): Check if .LBB0_47: is a label
LOGGER(Functions[is_label]): .LBB0_47: is a label
LOGGER(Functions[define_label]): Label .LBB0_47 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #112]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #112] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #112] is not a label
LOGGER(Functions[define_label]): Define label adds	r0, r0, #1
LOGGER(Functions[is_label]): Check if adds	r0, r0, #1 is a label
LOGGER(Functions[is_label]): adds	r0, r0, #1 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #112]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #112] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #112] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_43
LOGGER(Functions[is_label]): Check if b	.LBB0_43 is a label
LOGGER(Functions[is_label]): b	.LBB0_43 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_48:
LOGGER(Functions[is_label]): Check if .LBB0_48: is a label
LOGGER(Functions[is_label]): .LBB0_48: is a label
LOGGER(Functions[define_label]): Label .LBB0_48 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_49
LOGGER(Functions[is_label]): Check if b	.LBB0_49 is a label
LOGGER(Functions[is_label]): b	.LBB0_49 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_49:
LOGGER(Functions[is_label]): Check if .LBB0_49: is a label
LOGGER(Functions[is_label]): .LBB0_49: is a label
LOGGER(Functions[define_label]): Label .LBB0_49 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_50
LOGGER(Functions[is_label]): Check if b	.LBB0_50 is a label
LOGGER(Functions[is_label]): b	.LBB0_50 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_50:
LOGGER(Functions[is_label]): Check if .LBB0_50: is a label
LOGGER(Functions[is_label]): .LBB0_50: is a label
LOGGER(Functions[define_label]): Label .LBB0_50 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_51
LOGGER(Functions[is_label]): Check if b	.LBB0_51 is a label
LOGGER(Functions[is_label]): b	.LBB0_51 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_51:
LOGGER(Functions[is_label]): Check if .LBB0_51: is a label
LOGGER(Functions[is_label]): .LBB0_51: is a label
LOGGER(Functions[define_label]): Label .LBB0_51 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_52
LOGGER(Functions[is_label]): Check if b	.LBB0_52 is a label
LOGGER(Functions[is_label]): b	.LBB0_52 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_52:
LOGGER(Functions[is_label]): Check if .LBB0_52: is a label
LOGGER(Functions[is_label]): .LBB0_52: is a label
LOGGER(Functions[define_label]): Label .LBB0_52 defined
LOGGER(Functions[define_label]): Define label movs	r0, #61
LOGGER(Functions[is_label]): Check if movs	r0, #61 is a label
LOGGER(Functions[is_label]): movs	r0, #61 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #124]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #124] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #124] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_53
LOGGER(Functions[is_label]): Check if b	.LBB0_53 is a label
LOGGER(Functions[is_label]): b	.LBB0_53 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_53:
LOGGER(Functions[is_label]): Check if .LBB0_53: is a label
LOGGER(Functions[is_label]): .LBB0_53: is a label
LOGGER(Functions[define_label]): Label .LBB0_53 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_54
LOGGER(Functions[is_label]): Check if b	.LBB0_54 is a label
LOGGER(Functions[is_label]): b	.LBB0_54 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_54:
LOGGER(Functions[is_label]): Check if .LBB0_54: is a label
LOGGER(Functions[is_label]): .LBB0_54: is a label
LOGGER(Functions[define_label]): Label .LBB0_54 defined
LOGGER(Functions[define_label]): Define label movs	r0, #10
LOGGER(Functions[is_label]): Check if movs	r0, #10 is a label
LOGGER(Functions[is_label]): movs	r0, #10 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #124]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #124] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #124] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_55
LOGGER(Functions[is_label]): Check if b	.LBB0_55 is a label
LOGGER(Functions[is_label]): b	.LBB0_55 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_55:
LOGGER(Functions[is_label]): Check if .LBB0_55: is a label
LOGGER(Functions[is_label]): .LBB0_55: is a label
LOGGER(Functions[define_label]): Label .LBB0_55 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_56
LOGGER(Functions[is_label]): Check if b	.LBB0_56 is a label
LOGGER(Functions[is_label]): b	.LBB0_56 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_56:
LOGGER(Functions[is_label]): Check if .LBB0_56: is a label
LOGGER(Functions[is_label]): .LBB0_56: is a label
LOGGER(Functions[define_label]): Label .LBB0_56 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_57
LOGGER(Functions[is_label]): Check if b	.LBB0_57 is a label
LOGGER(Functions[is_label]): b	.LBB0_57 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_57:
LOGGER(Functions[is_label]): Check if .LBB0_57: is a label
LOGGER(Functions[is_label]): .LBB0_57: is a label
LOGGER(Functions[define_label]): Label .LBB0_57 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #92]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #92] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #92] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #72]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #72] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #72] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #72]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #72] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #72] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #8]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #8] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #8] is not a label
LOGGER(Functions[define_label]): Define label ldr	r2, [sp, #8]
LOGGER(Functions[is_label]): Check if ldr	r2, [sp, #8] is a label
LOGGER(Functions[is_label]): ldr	r2, [sp, #8] is not a label
LOGGER(Functions[define_label]): Define label @APP
LOGGER(Functions[is_label]): Check if @APP is a label
LOGGER(Functions[is_label]): @APP is not a label
LOGGER(Functions[define_label]): Define label movs	r0, r2
LOGGER(Functions[is_label]): Check if movs	r0, r2 is a label
LOGGER(Functions[is_label]): movs	r0, r2 is not a label
LOGGER(Functions[define_label]): Define label lsrs	r1, r0, #16
LOGGER(Functions[is_label]): Check if lsrs	r1, r0, #16 is a label
LOGGER(Functions[is_label]): lsrs	r1, r0, #16 is not a label
LOGGER(Functions[define_label]): Define label @NO_APP
LOGGER(Functions[is_label]): Check if @NO_APP is a label
LOGGER(Functions[is_label]): @NO_APP is not a label
LOGGER(Functions[define_label]): Define label str	r1, [sp, #68]
LOGGER(Functions[is_label]): Check if str	r1, [sp, #68] is a label
LOGGER(Functions[is_label]): str	r1, [sp, #68] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #68]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #68] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #68] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #128]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #128] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #128] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_58
LOGGER(Functions[is_label]): Check if b	.LBB0_58 is a label
LOGGER(Functions[is_label]): b	.LBB0_58 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_58:
LOGGER(Functions[is_label]): Check if .LBB0_58: is a label
LOGGER(Functions[is_label]): .LBB0_58: is a label
LOGGER(Functions[define_label]): Label .LBB0_58 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #168]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #168] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #168] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label lsrs	r0, r0, #12
LOGGER(Functions[is_label]): Check if lsrs	r0, r0, #12 is a label
LOGGER(Functions[is_label]): lsrs	r0, r0, #12 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label movs	r0, #0
LOGGER(Functions[is_label]): Check if movs	r0, #0 is a label
LOGGER(Functions[is_label]): movs	r0, #0 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #116]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #116] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #116] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #112]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #112] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #112] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_59
LOGGER(Functions[is_label]): Check if b	.LBB0_59 is a label
LOGGER(Functions[is_label]): b	.LBB0_59 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_59:
LOGGER(Functions[is_label]): Check if .LBB0_59: is a label
LOGGER(Functions[is_label]): .LBB0_59: is a label
LOGGER(Functions[define_label]): Label .LBB0_59 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #112]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #112] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #112] is not a label
LOGGER(Functions[define_label]): Define label cmp	r0, #4
LOGGER(Functions[is_label]): Check if cmp	r0, #4 is a label
LOGGER(Functions[is_label]): cmp	r0, #4 is not a label
LOGGER(Functions[define_label]): Define label bhi	.LBB0_64
LOGGER(Functions[is_label]): Check if bhi	.LBB0_64 is a label
LOGGER(Functions[is_label]): bhi	.LBB0_64 is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_60
LOGGER(Functions[is_label]): Check if b	.LBB0_60 is a label
LOGGER(Functions[is_label]): b	.LBB0_60 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_60:
LOGGER(Functions[is_label]): Check if .LBB0_60: is a label
LOGGER(Functions[is_label]): .LBB0_60: is a label
LOGGER(Functions[define_label]): Label .LBB0_60 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label movs	r1, #15
LOGGER(Functions[is_label]): Check if movs	r1, #15 is a label
LOGGER(Functions[is_label]): movs	r1, #15 is not a label
LOGGER(Functions[define_label]): Define label ands	r0, r1
LOGGER(Functions[is_label]): Check if ands	r0, r1 is a label
LOGGER(Functions[is_label]): ands	r0, r1 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #108]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #108] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #108] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label lsrs	r0, r0, #4
LOGGER(Functions[is_label]): Check if lsrs	r0, r0, #4 is a label
LOGGER(Functions[is_label]): lsrs	r0, r0, #4 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_61
LOGGER(Functions[is_label]): Check if b	.LBB0_61 is a label
LOGGER(Functions[is_label]): b	.LBB0_61 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_61:
LOGGER(Functions[is_label]): Check if .LBB0_61: is a label
LOGGER(Functions[is_label]): .LBB0_61: is a label
LOGGER(Functions[define_label]): Label .LBB0_61 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #108]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #108] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #108] is not a label
LOGGER(Functions[define_label]): Define label adds	r0, #48
LOGGER(Functions[is_label]): Check if adds	r0, #48 is a label
LOGGER(Functions[is_label]): adds	r0, #48 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #124]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #124] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #124] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_62
LOGGER(Functions[is_label]): Check if b	.LBB0_62 is a label
LOGGER(Functions[is_label]): b	.LBB0_62 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_62:
LOGGER(Functions[is_label]): Check if .LBB0_62: is a label
LOGGER(Functions[is_label]): .LBB0_62: is a label
LOGGER(Functions[define_label]): Label .LBB0_62 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_63
LOGGER(Functions[is_label]): Check if b	.LBB0_63 is a label
LOGGER(Functions[is_label]): b	.LBB0_63 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_63:
LOGGER(Functions[is_label]): Check if .LBB0_63: is a label
LOGGER(Functions[is_label]): .LBB0_63: is a label
LOGGER(Functions[define_label]): Label .LBB0_63 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #112]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #112] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #112] is not a label
LOGGER(Functions[define_label]): Define label adds	r0, r0, #1
LOGGER(Functions[is_label]): Check if adds	r0, r0, #1 is a label
LOGGER(Functions[is_label]): adds	r0, r0, #1 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #112]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #112] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #112] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_59
LOGGER(Functions[is_label]): Check if b	.LBB0_59 is a label
LOGGER(Functions[is_label]): b	.LBB0_59 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_64:
LOGGER(Functions[is_label]): Check if .LBB0_64: is a label
LOGGER(Functions[is_label]): .LBB0_64: is a label
LOGGER(Functions[define_label]): Label .LBB0_64 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_65
LOGGER(Functions[is_label]): Check if b	.LBB0_65 is a label
LOGGER(Functions[is_label]): b	.LBB0_65 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_65:
LOGGER(Functions[is_label]): Check if .LBB0_65: is a label
LOGGER(Functions[is_label]): .LBB0_65: is a label
LOGGER(Functions[define_label]): Label .LBB0_65 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #72]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #72] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #72] is not a label
LOGGER(Functions[define_label]): Define label @APP
LOGGER(Functions[is_label]): Check if @APP is a label
LOGGER(Functions[is_label]): @APP is not a label
LOGGER(Functions[define_label]): Define label lsls	r2, r0, #16
LOGGER(Functions[is_label]): Check if lsls	r2, r0, #16 is a label
LOGGER(Functions[is_label]): lsls	r2, r0, #16 is not a label
LOGGER(Functions[define_label]): Define label lsrs	r2, r2, #16
LOGGER(Functions[is_label]): Check if lsrs	r2, r2, #16 is a label
LOGGER(Functions[is_label]): lsrs	r2, r2, #16 is not a label
LOGGER(Functions[define_label]): Define label movs	r1, #100
LOGGER(Functions[is_label]): Check if movs	r1, #100 is a label
LOGGER(Functions[is_label]): movs	r1, #100 is not a label
LOGGER(Functions[define_label]): Define label muls	r2, r1, r2
LOGGER(Functions[is_label]): Check if muls	r2, r1, r2 is a label
LOGGER(Functions[is_label]): muls	r2, r1, r2 is not a label
LOGGER(Functions[define_label]): Define label muls	r2, r1, r2
LOGGER(Functions[is_label]): Check if muls	r2, r1, r2 is a label
LOGGER(Functions[is_label]): muls	r2, r1, r2 is not a label
LOGGER(Functions[define_label]): Define label lsrs	r3, r2, #16
LOGGER(Functions[is_label]): Check if lsrs	r3, r2, #16 is a label
LOGGER(Functions[is_label]): lsrs	r3, r2, #16 is not a label
LOGGER(Functions[define_label]): Define label @NO_APP
LOGGER(Functions[is_label]): Check if @NO_APP is a label
LOGGER(Functions[is_label]): @NO_APP is not a label
LOGGER(Functions[define_label]): Define label str	r3, [sp, #68]
LOGGER(Functions[is_label]): Check if str	r3, [sp, #68] is a label
LOGGER(Functions[is_label]): str	r3, [sp, #68] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #68]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #68] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #68] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #128]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #128] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #128] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_66
LOGGER(Functions[is_label]): Check if b	.LBB0_66 is a label
LOGGER(Functions[is_label]): b	.LBB0_66 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_66:
LOGGER(Functions[is_label]): Check if .LBB0_66: is a label
LOGGER(Functions[is_label]): .LBB0_66: is a label
LOGGER(Functions[define_label]): Label .LBB0_66 defined
LOGGER(Functions[define_label]): Define label movs	r0, #46
LOGGER(Functions[is_label]): Check if movs	r0, #46 is a label
LOGGER(Functions[is_label]): movs	r0, #46 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #124]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #124] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #124] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_67
LOGGER(Functions[is_label]): Check if b	.LBB0_67 is a label
LOGGER(Functions[is_label]): b	.LBB0_67 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_67:
LOGGER(Functions[is_label]): Check if .LBB0_67: is a label
LOGGER(Functions[is_label]): .LBB0_67: is a label
LOGGER(Functions[define_label]): Label .LBB0_67 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_68
LOGGER(Functions[is_label]): Check if b	.LBB0_68 is a label
LOGGER(Functions[is_label]): b	.LBB0_68 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_68:
LOGGER(Functions[is_label]): Check if .LBB0_68: is a label
LOGGER(Functions[is_label]): .LBB0_68: is a label
LOGGER(Functions[define_label]): Label .LBB0_68 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #168]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #168] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #168] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label lsrs	r0, r0, #16
LOGGER(Functions[is_label]): Check if lsrs	r0, r0, #16 is a label
LOGGER(Functions[is_label]): lsrs	r0, r0, #16 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label movs	r0, #0
LOGGER(Functions[is_label]): Check if movs	r0, #0 is a label
LOGGER(Functions[is_label]): movs	r0, #0 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #116]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #116] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #116] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #112]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #112] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #112] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_69
LOGGER(Functions[is_label]): Check if b	.LBB0_69 is a label
LOGGER(Functions[is_label]): b	.LBB0_69 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_69:
LOGGER(Functions[is_label]): Check if .LBB0_69: is a label
LOGGER(Functions[is_label]): .LBB0_69: is a label
LOGGER(Functions[define_label]): Label .LBB0_69 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #112]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #112] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #112] is not a label
LOGGER(Functions[define_label]): Define label cmp	r0, #3
LOGGER(Functions[is_label]): Check if cmp	r0, #3 is a label
LOGGER(Functions[is_label]): cmp	r0, #3 is not a label
LOGGER(Functions[define_label]): Define label bhi	.LBB0_74
LOGGER(Functions[is_label]): Check if bhi	.LBB0_74 is a label
LOGGER(Functions[is_label]): bhi	.LBB0_74 is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_70
LOGGER(Functions[is_label]): Check if b	.LBB0_70 is a label
LOGGER(Functions[is_label]): b	.LBB0_70 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_70:
LOGGER(Functions[is_label]): Check if .LBB0_70: is a label
LOGGER(Functions[is_label]): .LBB0_70: is a label
LOGGER(Functions[define_label]): Label .LBB0_70 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label movs	r1, #15
LOGGER(Functions[is_label]): Check if movs	r1, #15 is a label
LOGGER(Functions[is_label]): movs	r1, #15 is not a label
LOGGER(Functions[define_label]): Define label ands	r0, r1
LOGGER(Functions[is_label]): Check if ands	r0, r1 is a label
LOGGER(Functions[is_label]): ands	r0, r1 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #108]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #108] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #108] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label lsrs	r0, r0, #4
LOGGER(Functions[is_label]): Check if lsrs	r0, r0, #4 is a label
LOGGER(Functions[is_label]): lsrs	r0, r0, #4 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_71
LOGGER(Functions[is_label]): Check if b	.LBB0_71 is a label
LOGGER(Functions[is_label]): b	.LBB0_71 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_71:
LOGGER(Functions[is_label]): Check if .LBB0_71: is a label
LOGGER(Functions[is_label]): .LBB0_71: is a label
LOGGER(Functions[define_label]): Label .LBB0_71 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #108]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #108] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #108] is not a label
LOGGER(Functions[define_label]): Define label adds	r0, #48
LOGGER(Functions[is_label]): Check if adds	r0, #48 is a label
LOGGER(Functions[is_label]): adds	r0, #48 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #124]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #124] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #124] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_72
LOGGER(Functions[is_label]): Check if b	.LBB0_72 is a label
LOGGER(Functions[is_label]): b	.LBB0_72 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_72:
LOGGER(Functions[is_label]): Check if .LBB0_72: is a label
LOGGER(Functions[is_label]): .LBB0_72: is a label
LOGGER(Functions[define_label]): Label .LBB0_72 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_73
LOGGER(Functions[is_label]): Check if b	.LBB0_73 is a label
LOGGER(Functions[is_label]): b	.LBB0_73 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_73:
LOGGER(Functions[is_label]): Check if .LBB0_73: is a label
LOGGER(Functions[is_label]): .LBB0_73: is a label
LOGGER(Functions[define_label]): Label .LBB0_73 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #112]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #112] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #112] is not a label
LOGGER(Functions[define_label]): Define label adds	r0, r0, #1
LOGGER(Functions[is_label]): Check if adds	r0, r0, #1 is a label
LOGGER(Functions[is_label]): adds	r0, r0, #1 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #112]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #112] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #112] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_69
LOGGER(Functions[is_label]): Check if b	.LBB0_69 is a label
LOGGER(Functions[is_label]): b	.LBB0_69 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_74:
LOGGER(Functions[is_label]): Check if .LBB0_74: is a label
LOGGER(Functions[is_label]): .LBB0_74: is a label
LOGGER(Functions[define_label]): Label .LBB0_74 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_75
LOGGER(Functions[is_label]): Check if b	.LBB0_75 is a label
LOGGER(Functions[is_label]): b	.LBB0_75 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_75:
LOGGER(Functions[is_label]): Check if .LBB0_75: is a label
LOGGER(Functions[is_label]): .LBB0_75: is a label
LOGGER(Functions[define_label]): Label .LBB0_75 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_76
LOGGER(Functions[is_label]): Check if b	.LBB0_76 is a label
LOGGER(Functions[is_label]): b	.LBB0_76 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_76:
LOGGER(Functions[is_label]): Check if .LBB0_76: is a label
LOGGER(Functions[is_label]): .LBB0_76: is a label
LOGGER(Functions[define_label]): Label .LBB0_76 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_77
LOGGER(Functions[is_label]): Check if b	.LBB0_77 is a label
LOGGER(Functions[is_label]): b	.LBB0_77 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_77:
LOGGER(Functions[is_label]): Check if .LBB0_77: is a label
LOGGER(Functions[is_label]): .LBB0_77: is a label
LOGGER(Functions[define_label]): Label .LBB0_77 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_78
LOGGER(Functions[is_label]): Check if b	.LBB0_78 is a label
LOGGER(Functions[is_label]): b	.LBB0_78 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_78:
LOGGER(Functions[is_label]): Check if .LBB0_78: is a label
LOGGER(Functions[is_label]): .LBB0_78: is a label
LOGGER(Functions[define_label]): Label .LBB0_78 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_79
LOGGER(Functions[is_label]): Check if b	.LBB0_79 is a label
LOGGER(Functions[is_label]): b	.LBB0_79 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_79:
LOGGER(Functions[is_label]): Check if .LBB0_79: is a label
LOGGER(Functions[is_label]): .LBB0_79: is a label
LOGGER(Functions[define_label]): Label .LBB0_79 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_80
LOGGER(Functions[is_label]): Check if b	.LBB0_80 is a label
LOGGER(Functions[is_label]): b	.LBB0_80 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_80:
LOGGER(Functions[is_label]): Check if .LBB0_80: is a label
LOGGER(Functions[is_label]): .LBB0_80: is a label
LOGGER(Functions[define_label]): Label .LBB0_80 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_81
LOGGER(Functions[is_label]): Check if b	.LBB0_81 is a label
LOGGER(Functions[is_label]): b	.LBB0_81 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_81:
LOGGER(Functions[is_label]): Check if .LBB0_81: is a label
LOGGER(Functions[is_label]): .LBB0_81: is a label
LOGGER(Functions[define_label]): Label .LBB0_81 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_82
LOGGER(Functions[is_label]): Check if b	.LBB0_82 is a label
LOGGER(Functions[is_label]): b	.LBB0_82 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_82:
LOGGER(Functions[is_label]): Check if .LBB0_82: is a label
LOGGER(Functions[is_label]): .LBB0_82: is a label
LOGGER(Functions[define_label]): Label .LBB0_82 defined
LOGGER(Functions[define_label]): Define label movs	r0, #10
LOGGER(Functions[is_label]): Check if movs	r0, #10 is a label
LOGGER(Functions[is_label]): movs	r0, #10 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #124]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #124] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #124] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_83
LOGGER(Functions[is_label]): Check if b	.LBB0_83 is a label
LOGGER(Functions[is_label]): b	.LBB0_83 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_83:
LOGGER(Functions[is_label]): Check if .LBB0_83: is a label
LOGGER(Functions[is_label]): .LBB0_83: is a label
LOGGER(Functions[define_label]): Label .LBB0_83 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_84
LOGGER(Functions[is_label]): Check if b	.LBB0_84 is a label
LOGGER(Functions[is_label]): b	.LBB0_84 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_84:
LOGGER(Functions[is_label]): Check if .LBB0_84: is a label
LOGGER(Functions[is_label]): .LBB0_84: is a label
LOGGER(Functions[define_label]): Label .LBB0_84 defined
LOGGER(Functions[define_label]): Define label movs	r0, #115
LOGGER(Functions[is_label]): Check if movs	r0, #115 is a label
LOGGER(Functions[is_label]): movs	r0, #115 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #124]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #124] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #124] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_85
LOGGER(Functions[is_label]): Check if b	.LBB0_85 is a label
LOGGER(Functions[is_label]): b	.LBB0_85 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_85:
LOGGER(Functions[is_label]): Check if .LBB0_85: is a label
LOGGER(Functions[is_label]): .LBB0_85: is a label
LOGGER(Functions[define_label]): Label .LBB0_85 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_86
LOGGER(Functions[is_label]): Check if b	.LBB0_86 is a label
LOGGER(Functions[is_label]): b	.LBB0_86 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_86:
LOGGER(Functions[is_label]): Check if .LBB0_86: is a label
LOGGER(Functions[is_label]): .LBB0_86: is a label
LOGGER(Functions[define_label]): Label .LBB0_86 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_87
LOGGER(Functions[is_label]): Check if b	.LBB0_87 is a label
LOGGER(Functions[is_label]): b	.LBB0_87 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_87:
LOGGER(Functions[is_label]): Check if .LBB0_87: is a label
LOGGER(Functions[is_label]): .LBB0_87: is a label
LOGGER(Functions[define_label]): Label .LBB0_87 defined
LOGGER(Functions[define_label]): Define label movs	r0, #113
LOGGER(Functions[is_label]): Check if movs	r0, #113 is a label
LOGGER(Functions[is_label]): movs	r0, #113 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #124]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #124] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #124] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_88
LOGGER(Functions[is_label]): Check if b	.LBB0_88 is a label
LOGGER(Functions[is_label]): b	.LBB0_88 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_88:
LOGGER(Functions[is_label]): Check if .LBB0_88: is a label
LOGGER(Functions[is_label]): .LBB0_88: is a label
LOGGER(Functions[define_label]): Label .LBB0_88 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_89
LOGGER(Functions[is_label]): Check if b	.LBB0_89 is a label
LOGGER(Functions[is_label]): b	.LBB0_89 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_89:
LOGGER(Functions[is_label]): Check if .LBB0_89: is a label
LOGGER(Functions[is_label]): .LBB0_89: is a label
LOGGER(Functions[define_label]): Label .LBB0_89 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_90
LOGGER(Functions[is_label]): Check if b	.LBB0_90 is a label
LOGGER(Functions[is_label]): b	.LBB0_90 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_90:
LOGGER(Functions[is_label]): Check if .LBB0_90: is a label
LOGGER(Functions[is_label]): .LBB0_90: is a label
LOGGER(Functions[define_label]): Label .LBB0_90 defined
LOGGER(Functions[define_label]): Define label movs	r0, #114
LOGGER(Functions[is_label]): Check if movs	r0, #114 is a label
LOGGER(Functions[is_label]): movs	r0, #114 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #124]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #124] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #124] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_91
LOGGER(Functions[is_label]): Check if b	.LBB0_91 is a label
LOGGER(Functions[is_label]): b	.LBB0_91 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_91:
LOGGER(Functions[is_label]): Check if .LBB0_91: is a label
LOGGER(Functions[is_label]): .LBB0_91: is a label
LOGGER(Functions[define_label]): Label .LBB0_91 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_92
LOGGER(Functions[is_label]): Check if b	.LBB0_92 is a label
LOGGER(Functions[is_label]): b	.LBB0_92 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_92:
LOGGER(Functions[is_label]): Check if .LBB0_92: is a label
LOGGER(Functions[is_label]): .LBB0_92: is a label
LOGGER(Functions[define_label]): Label .LBB0_92 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_93
LOGGER(Functions[is_label]): Check if b	.LBB0_93 is a label
LOGGER(Functions[is_label]): b	.LBB0_93 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_93:
LOGGER(Functions[is_label]): Check if .LBB0_93: is a label
LOGGER(Functions[is_label]): .LBB0_93: is a label
LOGGER(Functions[define_label]): Label .LBB0_93 defined
LOGGER(Functions[define_label]): Define label movs	r0, #116
LOGGER(Functions[is_label]): Check if movs	r0, #116 is a label
LOGGER(Functions[is_label]): movs	r0, #116 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #124]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #124] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #124] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_94
LOGGER(Functions[is_label]): Check if b	.LBB0_94 is a label
LOGGER(Functions[is_label]): b	.LBB0_94 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_94:
LOGGER(Functions[is_label]): Check if .LBB0_94: is a label
LOGGER(Functions[is_label]): .LBB0_94: is a label
LOGGER(Functions[define_label]): Label .LBB0_94 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_95
LOGGER(Functions[is_label]): Check if b	.LBB0_95 is a label
LOGGER(Functions[is_label]): b	.LBB0_95 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_95:
LOGGER(Functions[is_label]): Check if .LBB0_95: is a label
LOGGER(Functions[is_label]): .LBB0_95: is a label
LOGGER(Functions[define_label]): Label .LBB0_95 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_96
LOGGER(Functions[is_label]): Check if b	.LBB0_96 is a label
LOGGER(Functions[is_label]): b	.LBB0_96 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_96:
LOGGER(Functions[is_label]): Check if .LBB0_96: is a label
LOGGER(Functions[is_label]): .LBB0_96: is a label
LOGGER(Functions[define_label]): Label .LBB0_96 defined
LOGGER(Functions[define_label]): Define label movs	r0, #61
LOGGER(Functions[is_label]): Check if movs	r0, #61 is a label
LOGGER(Functions[is_label]): movs	r0, #61 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #124]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #124] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #124] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_97
LOGGER(Functions[is_label]): Check if b	.LBB0_97 is a label
LOGGER(Functions[is_label]): b	.LBB0_97 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_97:
LOGGER(Functions[is_label]): Check if .LBB0_97: is a label
LOGGER(Functions[is_label]): .LBB0_97: is a label
LOGGER(Functions[define_label]): Label .LBB0_97 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_98
LOGGER(Functions[is_label]): Check if b	.LBB0_98 is a label
LOGGER(Functions[is_label]): b	.LBB0_98 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_98:
LOGGER(Functions[is_label]): Check if .LBB0_98: is a label
LOGGER(Functions[is_label]): .LBB0_98: is a label
LOGGER(Functions[define_label]): Label .LBB0_98 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #92]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #92] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #92] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #48]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #48] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #48] is not a label
LOGGER(Functions[define_label]): Define label movs	r0, #1
LOGGER(Functions[is_label]): Check if movs	r0, #1 is a label
LOGGER(Functions[is_label]): movs	r0, #1 is not a label
LOGGER(Functions[define_label]): Define label lsls	r0, r0, #30
LOGGER(Functions[is_label]): Check if lsls	r0, r0, #30 is a label
LOGGER(Functions[is_label]): lsls	r0, r0, #30 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #52]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #52] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #52] is not a label
LOGGER(Functions[define_label]): Define label movs	r0, #0
LOGGER(Functions[is_label]): Check if movs	r0, #0 is a label
LOGGER(Functions[is_label]): movs	r0, #0 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #56]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #56] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #56] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_99
LOGGER(Functions[is_label]): Check if b	.LBB0_99 is a label
LOGGER(Functions[is_label]): b	.LBB0_99 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_99:
LOGGER(Functions[is_label]): Check if .LBB0_99: is a label
LOGGER(Functions[is_label]): .LBB0_99: is a label
LOGGER(Functions[define_label]): Label .LBB0_99 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #52]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #52] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #52] is not a label
LOGGER(Functions[define_label]): Define label cmp	r0, #65
LOGGER(Functions[is_label]): Check if cmp	r0, #65 is a label
LOGGER(Functions[is_label]): cmp	r0, #65 is not a label
LOGGER(Functions[define_label]): Define label blo	.LBB0_103
LOGGER(Functions[is_label]): Check if blo	.LBB0_103 is a label
LOGGER(Functions[is_label]): blo	.LBB0_103 is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_100
LOGGER(Functions[is_label]): Check if b	.LBB0_100 is a label
LOGGER(Functions[is_label]): b	.LBB0_100 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_100:
LOGGER(Functions[is_label]): Check if .LBB0_100: is a label
LOGGER(Functions[is_label]): .LBB0_100: is a label
LOGGER(Functions[define_label]): Label .LBB0_100 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #56]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #56] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #56] is not a label
LOGGER(Functions[define_label]): Define label ldr	r1, [sp, #52]
LOGGER(Functions[is_label]): Check if ldr	r1, [sp, #52] is a label
LOGGER(Functions[is_label]): ldr	r1, [sp, #52] is not a label
LOGGER(Functions[define_label]): Define label adds	r0, r0, r1
LOGGER(Functions[is_label]): Check if adds	r0, r0, r1 is a label
LOGGER(Functions[is_label]): adds	r0, r0, r1 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #60]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #60] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #60] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #48]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #48] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #48] is not a label
LOGGER(Functions[define_label]): Define label ldr	r1, [sp, #60]
LOGGER(Functions[is_label]): Check if ldr	r1, [sp, #60] is a label
LOGGER(Functions[is_label]): ldr	r1, [sp, #60] is not a label
LOGGER(Functions[define_label]): Define label cmp	r0, r1
LOGGER(Functions[is_label]): Check if cmp	r0, r1 is a label
LOGGER(Functions[is_label]): cmp	r0, r1 is not a label
LOGGER(Functions[define_label]): Define label blo	.LBB0_102
LOGGER(Functions[is_label]): Check if blo	.LBB0_102 is a label
LOGGER(Functions[is_label]): blo	.LBB0_102 is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_101
LOGGER(Functions[is_label]): Check if b	.LBB0_101 is a label
LOGGER(Functions[is_label]): b	.LBB0_101 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_101:
LOGGER(Functions[is_label]): Check if .LBB0_101: is a label
LOGGER(Functions[is_label]): .LBB0_101: is a label
LOGGER(Functions[define_label]): Label .LBB0_101 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #60]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #60] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #60] is not a label
LOGGER(Functions[define_label]): Define label ldr	r1, [sp, #48]
LOGGER(Functions[is_label]): Check if ldr	r1, [sp, #48] is a label
LOGGER(Functions[is_label]): ldr	r1, [sp, #48] is not a label
LOGGER(Functions[define_label]): Define label subs	r0, r1, r0
LOGGER(Functions[is_label]): Check if subs	r0, r1, r0 is a label
LOGGER(Functions[is_label]): subs	r0, r1, r0 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #48]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #48] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #48] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #60]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #60] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #60] is not a label
LOGGER(Functions[define_label]): Define label ldr	r1, [sp, #52]
LOGGER(Functions[is_label]): Check if ldr	r1, [sp, #52] is a label
LOGGER(Functions[is_label]): ldr	r1, [sp, #52] is not a label
LOGGER(Functions[define_label]): Define label adds	r0, r0, r1
LOGGER(Functions[is_label]): Check if adds	r0, r0, r1 is a label
LOGGER(Functions[is_label]): adds	r0, r0, r1 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #56]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #56] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #56] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_102
LOGGER(Functions[is_label]): Check if b	.LBB0_102 is a label
LOGGER(Functions[is_label]): b	.LBB0_102 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_102:
LOGGER(Functions[is_label]): Check if .LBB0_102: is a label
LOGGER(Functions[is_label]): .LBB0_102: is a label
LOGGER(Functions[define_label]): Label .LBB0_102 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #48]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #48] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #48] is not a label
LOGGER(Functions[define_label]): Define label lsls	r0, r0, #1
LOGGER(Functions[is_label]): Check if lsls	r0, r0, #1 is a label
LOGGER(Functions[is_label]): lsls	r0, r0, #1 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #48]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #48] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #48] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #52]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #52] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #52] is not a label
LOGGER(Functions[define_label]): Define label lsrs	r0, r0, #1
LOGGER(Functions[is_label]): Check if lsrs	r0, r0, #1 is a label
LOGGER(Functions[is_label]): lsrs	r0, r0, #1 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #52]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #52] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #52] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_99
LOGGER(Functions[is_label]): Check if b	.LBB0_99 is a label
LOGGER(Functions[is_label]): b	.LBB0_99 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_103:
LOGGER(Functions[is_label]): Check if .LBB0_103: is a label
LOGGER(Functions[is_label]): .LBB0_103: is a label
LOGGER(Functions[define_label]): Label .LBB0_103 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #56]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #56] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #56] is not a label
LOGGER(Functions[define_label]): Define label lsrs	r0, r0, #8
LOGGER(Functions[is_label]): Check if lsrs	r0, r0, #8 is a label
LOGGER(Functions[is_label]): lsrs	r0, r0, #8 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #44]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #44] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #44] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #44]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #44] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #44] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #64]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #64] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #64] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_104
LOGGER(Functions[is_label]): Check if b	.LBB0_104 is a label
LOGGER(Functions[is_label]): b	.LBB0_104 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_104:
LOGGER(Functions[is_label]): Check if .LBB0_104: is a label
LOGGER(Functions[is_label]): .LBB0_104: is a label
LOGGER(Functions[define_label]): Label .LBB0_104 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #64]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #64] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #64] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #40]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #40] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #40] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #40]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #40] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #40] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #4]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #4] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #4] is not a label
LOGGER(Functions[define_label]): Define label ldr	r2, [sp, #4]
LOGGER(Functions[is_label]): Check if ldr	r2, [sp, #4] is a label
LOGGER(Functions[is_label]): ldr	r2, [sp, #4] is not a label
LOGGER(Functions[define_label]): Define label @APP
LOGGER(Functions[is_label]): Check if @APP is a label
LOGGER(Functions[is_label]): @APP is not a label
LOGGER(Functions[define_label]): Define label movs	r0, r2
LOGGER(Functions[is_label]): Check if movs	r0, r2 is a label
LOGGER(Functions[is_label]): movs	r0, r2 is not a label
LOGGER(Functions[define_label]): Define label lsrs	r1, r0, #16
LOGGER(Functions[is_label]): Check if lsrs	r1, r0, #16 is a label
LOGGER(Functions[is_label]): lsrs	r1, r0, #16 is not a label
LOGGER(Functions[define_label]): Define label @NO_APP
LOGGER(Functions[is_label]): Check if @NO_APP is a label
LOGGER(Functions[is_label]): @NO_APP is not a label
LOGGER(Functions[define_label]): Define label str	r1, [sp, #36]
LOGGER(Functions[is_label]): Check if str	r1, [sp, #36] is a label
LOGGER(Functions[is_label]): str	r1, [sp, #36] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #36]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #36] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #36] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #128]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #128] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #128] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_105
LOGGER(Functions[is_label]): Check if b	.LBB0_105 is a label
LOGGER(Functions[is_label]): b	.LBB0_105 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_105:
LOGGER(Functions[is_label]): Check if .LBB0_105: is a label
LOGGER(Functions[is_label]): .LBB0_105: is a label
LOGGER(Functions[define_label]): Label .LBB0_105 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #168]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #168] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #168] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label lsrs	r0, r0, #12
LOGGER(Functions[is_label]): Check if lsrs	r0, r0, #12 is a label
LOGGER(Functions[is_label]): lsrs	r0, r0, #12 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label movs	r0, #0
LOGGER(Functions[is_label]): Check if movs	r0, #0 is a label
LOGGER(Functions[is_label]): movs	r0, #0 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #116]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #116] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #116] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #112]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #112] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #112] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_106
LOGGER(Functions[is_label]): Check if b	.LBB0_106 is a label
LOGGER(Functions[is_label]): b	.LBB0_106 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_106:
LOGGER(Functions[is_label]): Check if .LBB0_106: is a label
LOGGER(Functions[is_label]): .LBB0_106: is a label
LOGGER(Functions[define_label]): Label .LBB0_106 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #112]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #112] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #112] is not a label
LOGGER(Functions[define_label]): Define label cmp	r0, #4
LOGGER(Functions[is_label]): Check if cmp	r0, #4 is a label
LOGGER(Functions[is_label]): cmp	r0, #4 is not a label
LOGGER(Functions[define_label]): Define label bhi	.LBB0_111
LOGGER(Functions[is_label]): Check if bhi	.LBB0_111 is a label
LOGGER(Functions[is_label]): bhi	.LBB0_111 is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_107
LOGGER(Functions[is_label]): Check if b	.LBB0_107 is a label
LOGGER(Functions[is_label]): b	.LBB0_107 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_107:
LOGGER(Functions[is_label]): Check if .LBB0_107: is a label
LOGGER(Functions[is_label]): .LBB0_107: is a label
LOGGER(Functions[define_label]): Label .LBB0_107 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label movs	r1, #15
LOGGER(Functions[is_label]): Check if movs	r1, #15 is a label
LOGGER(Functions[is_label]): movs	r1, #15 is not a label
LOGGER(Functions[define_label]): Define label ands	r0, r1
LOGGER(Functions[is_label]): Check if ands	r0, r1 is a label
LOGGER(Functions[is_label]): ands	r0, r1 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #108]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #108] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #108] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label lsrs	r0, r0, #4
LOGGER(Functions[is_label]): Check if lsrs	r0, r0, #4 is a label
LOGGER(Functions[is_label]): lsrs	r0, r0, #4 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_108
LOGGER(Functions[is_label]): Check if b	.LBB0_108 is a label
LOGGER(Functions[is_label]): b	.LBB0_108 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_108:
LOGGER(Functions[is_label]): Check if .LBB0_108: is a label
LOGGER(Functions[is_label]): .LBB0_108: is a label
LOGGER(Functions[define_label]): Label .LBB0_108 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #108]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #108] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #108] is not a label
LOGGER(Functions[define_label]): Define label adds	r0, #48
LOGGER(Functions[is_label]): Check if adds	r0, #48 is a label
LOGGER(Functions[is_label]): adds	r0, #48 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #124]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #124] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #124] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_109
LOGGER(Functions[is_label]): Check if b	.LBB0_109 is a label
LOGGER(Functions[is_label]): b	.LBB0_109 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_109:
LOGGER(Functions[is_label]): Check if .LBB0_109: is a label
LOGGER(Functions[is_label]): .LBB0_109: is a label
LOGGER(Functions[define_label]): Label .LBB0_109 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_110
LOGGER(Functions[is_label]): Check if b	.LBB0_110 is a label
LOGGER(Functions[is_label]): b	.LBB0_110 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_110:
LOGGER(Functions[is_label]): Check if .LBB0_110: is a label
LOGGER(Functions[is_label]): .LBB0_110: is a label
LOGGER(Functions[define_label]): Label .LBB0_110 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #112]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #112] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #112] is not a label
LOGGER(Functions[define_label]): Define label adds	r0, r0, #1
LOGGER(Functions[is_label]): Check if adds	r0, r0, #1 is a label
LOGGER(Functions[is_label]): adds	r0, r0, #1 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #112]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #112] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #112] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_106
LOGGER(Functions[is_label]): Check if b	.LBB0_106 is a label
LOGGER(Functions[is_label]): b	.LBB0_106 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_111:
LOGGER(Functions[is_label]): Check if .LBB0_111: is a label
LOGGER(Functions[is_label]): .LBB0_111: is a label
LOGGER(Functions[define_label]): Label .LBB0_111 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_112
LOGGER(Functions[is_label]): Check if b	.LBB0_112 is a label
LOGGER(Functions[is_label]): b	.LBB0_112 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_112:
LOGGER(Functions[is_label]): Check if .LBB0_112: is a label
LOGGER(Functions[is_label]): .LBB0_112: is a label
LOGGER(Functions[define_label]): Label .LBB0_112 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #40]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #40] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #40] is not a label
LOGGER(Functions[define_label]): Define label @APP
LOGGER(Functions[is_label]): Check if @APP is a label
LOGGER(Functions[is_label]): @APP is not a label
LOGGER(Functions[define_label]): Define label lsls	r2, r0, #16
LOGGER(Functions[is_label]): Check if lsls	r2, r0, #16 is a label
LOGGER(Functions[is_label]): lsls	r2, r0, #16 is not a label
LOGGER(Functions[define_label]): Define label lsrs	r2, r2, #16
LOGGER(Functions[is_label]): Check if lsrs	r2, r2, #16 is a label
LOGGER(Functions[is_label]): lsrs	r2, r2, #16 is not a label
LOGGER(Functions[define_label]): Define label movs	r1, #100
LOGGER(Functions[is_label]): Check if movs	r1, #100 is a label
LOGGER(Functions[is_label]): movs	r1, #100 is not a label
LOGGER(Functions[define_label]): Define label muls	r2, r1, r2
LOGGER(Functions[is_label]): Check if muls	r2, r1, r2 is a label
LOGGER(Functions[is_label]): muls	r2, r1, r2 is not a label
LOGGER(Functions[define_label]): Define label muls	r2, r1, r2
LOGGER(Functions[is_label]): Check if muls	r2, r1, r2 is a label
LOGGER(Functions[is_label]): muls	r2, r1, r2 is not a label
LOGGER(Functions[define_label]): Define label lsrs	r3, r2, #16
LOGGER(Functions[is_label]): Check if lsrs	r3, r2, #16 is a label
LOGGER(Functions[is_label]): lsrs	r3, r2, #16 is not a label
LOGGER(Functions[define_label]): Define label @NO_APP
LOGGER(Functions[is_label]): Check if @NO_APP is a label
LOGGER(Functions[is_label]): @NO_APP is not a label
LOGGER(Functions[define_label]): Define label str	r3, [sp, #36]
LOGGER(Functions[is_label]): Check if str	r3, [sp, #36] is a label
LOGGER(Functions[is_label]): str	r3, [sp, #36] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #36]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #36] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #36] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #128]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #128] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #128] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_113
LOGGER(Functions[is_label]): Check if b	.LBB0_113 is a label
LOGGER(Functions[is_label]): b	.LBB0_113 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_113:
LOGGER(Functions[is_label]): Check if .LBB0_113: is a label
LOGGER(Functions[is_label]): .LBB0_113: is a label
LOGGER(Functions[define_label]): Label .LBB0_113 defined
LOGGER(Functions[define_label]): Define label movs	r0, #46
LOGGER(Functions[is_label]): Check if movs	r0, #46 is a label
LOGGER(Functions[is_label]): movs	r0, #46 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #124]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #124] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #124] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_114
LOGGER(Functions[is_label]): Check if b	.LBB0_114 is a label
LOGGER(Functions[is_label]): b	.LBB0_114 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_114:
LOGGER(Functions[is_label]): Check if .LBB0_114: is a label
LOGGER(Functions[is_label]): .LBB0_114: is a label
LOGGER(Functions[define_label]): Label .LBB0_114 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_115
LOGGER(Functions[is_label]): Check if b	.LBB0_115 is a label
LOGGER(Functions[is_label]): b	.LBB0_115 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_115:
LOGGER(Functions[is_label]): Check if .LBB0_115: is a label
LOGGER(Functions[is_label]): .LBB0_115: is a label
LOGGER(Functions[define_label]): Label .LBB0_115 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #168]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #168] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #168] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label lsrs	r0, r0, #16
LOGGER(Functions[is_label]): Check if lsrs	r0, r0, #16 is a label
LOGGER(Functions[is_label]): lsrs	r0, r0, #16 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label movs	r0, #0
LOGGER(Functions[is_label]): Check if movs	r0, #0 is a label
LOGGER(Functions[is_label]): movs	r0, #0 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #116]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #116] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #116] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #112]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #112] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #112] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_116
LOGGER(Functions[is_label]): Check if b	.LBB0_116 is a label
LOGGER(Functions[is_label]): b	.LBB0_116 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_116:
LOGGER(Functions[is_label]): Check if .LBB0_116: is a label
LOGGER(Functions[is_label]): .LBB0_116: is a label
LOGGER(Functions[define_label]): Label .LBB0_116 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #112]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #112] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #112] is not a label
LOGGER(Functions[define_label]): Define label cmp	r0, #3
LOGGER(Functions[is_label]): Check if cmp	r0, #3 is a label
LOGGER(Functions[is_label]): cmp	r0, #3 is not a label
LOGGER(Functions[define_label]): Define label bhi	.LBB0_121
LOGGER(Functions[is_label]): Check if bhi	.LBB0_121 is a label
LOGGER(Functions[is_label]): bhi	.LBB0_121 is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_117
LOGGER(Functions[is_label]): Check if b	.LBB0_117 is a label
LOGGER(Functions[is_label]): b	.LBB0_117 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_117:
LOGGER(Functions[is_label]): Check if .LBB0_117: is a label
LOGGER(Functions[is_label]): .LBB0_117: is a label
LOGGER(Functions[define_label]): Label .LBB0_117 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label movs	r1, #15
LOGGER(Functions[is_label]): Check if movs	r1, #15 is a label
LOGGER(Functions[is_label]): movs	r1, #15 is not a label
LOGGER(Functions[define_label]): Define label ands	r0, r1
LOGGER(Functions[is_label]): Check if ands	r0, r1 is a label
LOGGER(Functions[is_label]): ands	r0, r1 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #108]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #108] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #108] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label lsrs	r0, r0, #4
LOGGER(Functions[is_label]): Check if lsrs	r0, r0, #4 is a label
LOGGER(Functions[is_label]): lsrs	r0, r0, #4 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_118
LOGGER(Functions[is_label]): Check if b	.LBB0_118 is a label
LOGGER(Functions[is_label]): b	.LBB0_118 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_118:
LOGGER(Functions[is_label]): Check if .LBB0_118: is a label
LOGGER(Functions[is_label]): .LBB0_118: is a label
LOGGER(Functions[define_label]): Label .LBB0_118 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #108]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #108] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #108] is not a label
LOGGER(Functions[define_label]): Define label adds	r0, #48
LOGGER(Functions[is_label]): Check if adds	r0, #48 is a label
LOGGER(Functions[is_label]): adds	r0, #48 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #124]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #124] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #124] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_119
LOGGER(Functions[is_label]): Check if b	.LBB0_119 is a label
LOGGER(Functions[is_label]): b	.LBB0_119 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_119:
LOGGER(Functions[is_label]): Check if .LBB0_119: is a label
LOGGER(Functions[is_label]): .LBB0_119: is a label
LOGGER(Functions[define_label]): Label .LBB0_119 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_120
LOGGER(Functions[is_label]): Check if b	.LBB0_120 is a label
LOGGER(Functions[is_label]): b	.LBB0_120 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_120:
LOGGER(Functions[is_label]): Check if .LBB0_120: is a label
LOGGER(Functions[is_label]): .LBB0_120: is a label
LOGGER(Functions[define_label]): Label .LBB0_120 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #112]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #112] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #112] is not a label
LOGGER(Functions[define_label]): Define label adds	r0, r0, #1
LOGGER(Functions[is_label]): Check if adds	r0, r0, #1 is a label
LOGGER(Functions[is_label]): adds	r0, r0, #1 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #112]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #112] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #112] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_116
LOGGER(Functions[is_label]): Check if b	.LBB0_116 is a label
LOGGER(Functions[is_label]): b	.LBB0_116 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_121:
LOGGER(Functions[is_label]): Check if .LBB0_121: is a label
LOGGER(Functions[is_label]): .LBB0_121: is a label
LOGGER(Functions[define_label]): Label .LBB0_121 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_122
LOGGER(Functions[is_label]): Check if b	.LBB0_122 is a label
LOGGER(Functions[is_label]): b	.LBB0_122 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_122:
LOGGER(Functions[is_label]): Check if .LBB0_122: is a label
LOGGER(Functions[is_label]): .LBB0_122: is a label
LOGGER(Functions[define_label]): Label .LBB0_122 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_123
LOGGER(Functions[is_label]): Check if b	.LBB0_123 is a label
LOGGER(Functions[is_label]): b	.LBB0_123 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_123:
LOGGER(Functions[is_label]): Check if .LBB0_123: is a label
LOGGER(Functions[is_label]): .LBB0_123: is a label
LOGGER(Functions[define_label]): Label .LBB0_123 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_124
LOGGER(Functions[is_label]): Check if b	.LBB0_124 is a label
LOGGER(Functions[is_label]): b	.LBB0_124 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_124:
LOGGER(Functions[is_label]): Check if .LBB0_124: is a label
LOGGER(Functions[is_label]): .LBB0_124: is a label
LOGGER(Functions[define_label]): Label .LBB0_124 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_125
LOGGER(Functions[is_label]): Check if b	.LBB0_125 is a label
LOGGER(Functions[is_label]): b	.LBB0_125 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_125:
LOGGER(Functions[is_label]): Check if .LBB0_125: is a label
LOGGER(Functions[is_label]): .LBB0_125: is a label
LOGGER(Functions[define_label]): Label .LBB0_125 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_126
LOGGER(Functions[is_label]): Check if b	.LBB0_126 is a label
LOGGER(Functions[is_label]): b	.LBB0_126 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_126:
LOGGER(Functions[is_label]): Check if .LBB0_126: is a label
LOGGER(Functions[is_label]): .LBB0_126: is a label
LOGGER(Functions[define_label]): Label .LBB0_126 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_127
LOGGER(Functions[is_label]): Check if b	.LBB0_127 is a label
LOGGER(Functions[is_label]): b	.LBB0_127 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_127:
LOGGER(Functions[is_label]): Check if .LBB0_127: is a label
LOGGER(Functions[is_label]): .LBB0_127: is a label
LOGGER(Functions[define_label]): Label .LBB0_127 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_128
LOGGER(Functions[is_label]): Check if b	.LBB0_128 is a label
LOGGER(Functions[is_label]): b	.LBB0_128 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_128:
LOGGER(Functions[is_label]): Check if .LBB0_128: is a label
LOGGER(Functions[is_label]): .LBB0_128: is a label
LOGGER(Functions[define_label]): Label .LBB0_128 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_129
LOGGER(Functions[is_label]): Check if b	.LBB0_129 is a label
LOGGER(Functions[is_label]): b	.LBB0_129 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_129:
LOGGER(Functions[is_label]): Check if .LBB0_129: is a label
LOGGER(Functions[is_label]): .LBB0_129: is a label
LOGGER(Functions[define_label]): Label .LBB0_129 defined
LOGGER(Functions[define_label]): Define label movs	r0, #10
LOGGER(Functions[is_label]): Check if movs	r0, #10 is a label
LOGGER(Functions[is_label]): movs	r0, #10 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #124]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #124] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #124] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_130
LOGGER(Functions[is_label]): Check if b	.LBB0_130 is a label
LOGGER(Functions[is_label]): b	.LBB0_130 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_130:
LOGGER(Functions[is_label]): Check if .LBB0_130: is a label
LOGGER(Functions[is_label]): .LBB0_130: is a label
LOGGER(Functions[define_label]): Label .LBB0_130 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_131
LOGGER(Functions[is_label]): Check if b	.LBB0_131 is a label
LOGGER(Functions[is_label]): b	.LBB0_131 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_131:
LOGGER(Functions[is_label]): Check if .LBB0_131: is a label
LOGGER(Functions[is_label]): .LBB0_131: is a label
LOGGER(Functions[define_label]): Label .LBB0_131 defined
LOGGER(Functions[define_label]): Define label movs	r0, #47
LOGGER(Functions[is_label]): Check if movs	r0, #47 is a label
LOGGER(Functions[is_label]): movs	r0, #47 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #124]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #124] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #124] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_132
LOGGER(Functions[is_label]): Check if b	.LBB0_132 is a label
LOGGER(Functions[is_label]): b	.LBB0_132 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_132:
LOGGER(Functions[is_label]): Check if .LBB0_132: is a label
LOGGER(Functions[is_label]): .LBB0_132: is a label
LOGGER(Functions[define_label]): Label .LBB0_132 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_133
LOGGER(Functions[is_label]): Check if b	.LBB0_133 is a label
LOGGER(Functions[is_label]): b	.LBB0_133 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_133:
LOGGER(Functions[is_label]): Check if .LBB0_133: is a label
LOGGER(Functions[is_label]): .LBB0_133: is a label
LOGGER(Functions[define_label]): Label .LBB0_133 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_134
LOGGER(Functions[is_label]): Check if b	.LBB0_134 is a label
LOGGER(Functions[is_label]): b	.LBB0_134 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_134:
LOGGER(Functions[is_label]): Check if .LBB0_134: is a label
LOGGER(Functions[is_label]): .LBB0_134: is a label
LOGGER(Functions[define_label]): Label .LBB0_134 defined
LOGGER(Functions[define_label]): Define label movs	r0, #49
LOGGER(Functions[is_label]): Check if movs	r0, #49 is a label
LOGGER(Functions[is_label]): movs	r0, #49 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #124]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #124] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #124] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_135
LOGGER(Functions[is_label]): Check if b	.LBB0_135 is a label
LOGGER(Functions[is_label]): b	.LBB0_135 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_135:
LOGGER(Functions[is_label]): Check if .LBB0_135: is a label
LOGGER(Functions[is_label]): .LBB0_135: is a label
LOGGER(Functions[define_label]): Label .LBB0_135 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_136
LOGGER(Functions[is_label]): Check if b	.LBB0_136 is a label
LOGGER(Functions[is_label]): b	.LBB0_136 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_136:
LOGGER(Functions[is_label]): Check if .LBB0_136: is a label
LOGGER(Functions[is_label]): .LBB0_136: is a label
LOGGER(Functions[define_label]): Label .LBB0_136 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_137
LOGGER(Functions[is_label]): Check if b	.LBB0_137 is a label
LOGGER(Functions[is_label]): b	.LBB0_137 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_137:
LOGGER(Functions[is_label]): Check if .LBB0_137: is a label
LOGGER(Functions[is_label]): .LBB0_137: is a label
LOGGER(Functions[define_label]): Label .LBB0_137 defined
LOGGER(Functions[define_label]): Define label movs	r0, #46
LOGGER(Functions[is_label]): Check if movs	r0, #46 is a label
LOGGER(Functions[is_label]): movs	r0, #46 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #124]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #124] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #124] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_138
LOGGER(Functions[is_label]): Check if b	.LBB0_138 is a label
LOGGER(Functions[is_label]): b	.LBB0_138 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_138:
LOGGER(Functions[is_label]): Check if .LBB0_138: is a label
LOGGER(Functions[is_label]): .LBB0_138: is a label
LOGGER(Functions[define_label]): Label .LBB0_138 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_139
LOGGER(Functions[is_label]): Check if b	.LBB0_139 is a label
LOGGER(Functions[is_label]): b	.LBB0_139 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_139:
LOGGER(Functions[is_label]): Check if .LBB0_139: is a label
LOGGER(Functions[is_label]): .LBB0_139: is a label
LOGGER(Functions[define_label]): Label .LBB0_139 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_140
LOGGER(Functions[is_label]): Check if b	.LBB0_140 is a label
LOGGER(Functions[is_label]): b	.LBB0_140 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_140:
LOGGER(Functions[is_label]): Check if .LBB0_140: is a label
LOGGER(Functions[is_label]): .LBB0_140: is a label
LOGGER(Functions[define_label]): Label .LBB0_140 defined
LOGGER(Functions[define_label]): Define label movs	r0, #53
LOGGER(Functions[is_label]): Check if movs	r0, #53 is a label
LOGGER(Functions[is_label]): movs	r0, #53 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #124]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #124] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #124] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_141
LOGGER(Functions[is_label]): Check if b	.LBB0_141 is a label
LOGGER(Functions[is_label]): b	.LBB0_141 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_141:
LOGGER(Functions[is_label]): Check if .LBB0_141: is a label
LOGGER(Functions[is_label]): .LBB0_141: is a label
LOGGER(Functions[define_label]): Label .LBB0_141 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_142
LOGGER(Functions[is_label]): Check if b	.LBB0_142 is a label
LOGGER(Functions[is_label]): b	.LBB0_142 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_142:
LOGGER(Functions[is_label]): Check if .LBB0_142: is a label
LOGGER(Functions[is_label]): .LBB0_142: is a label
LOGGER(Functions[define_label]): Label .LBB0_142 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_143
LOGGER(Functions[is_label]): Check if b	.LBB0_143 is a label
LOGGER(Functions[is_label]): b	.LBB0_143 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_143:
LOGGER(Functions[is_label]): Check if .LBB0_143: is a label
LOGGER(Functions[is_label]): .LBB0_143: is a label
LOGGER(Functions[define_label]): Label .LBB0_143 defined
LOGGER(Functions[define_label]): Define label movs	r0, #61
LOGGER(Functions[is_label]): Check if movs	r0, #61 is a label
LOGGER(Functions[is_label]): movs	r0, #61 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #124]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #124] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #124] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_144
LOGGER(Functions[is_label]): Check if b	.LBB0_144 is a label
LOGGER(Functions[is_label]): b	.LBB0_144 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_144:
LOGGER(Functions[is_label]): Check if .LBB0_144: is a label
LOGGER(Functions[is_label]): .LBB0_144: is a label
LOGGER(Functions[define_label]): Label .LBB0_144 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_145
LOGGER(Functions[is_label]): Check if b	.LBB0_145 is a label
LOGGER(Functions[is_label]): b	.LBB0_145 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_145:
LOGGER(Functions[is_label]): Check if .LBB0_145: is a label
LOGGER(Functions[is_label]): .LBB0_145: is a label
LOGGER(Functions[define_label]): Label .LBB0_145 defined
LOGGER(Functions[define_label]): Define label movs	r0, #3
LOGGER(Functions[is_label]): Check if movs	r0, #3 is a label
LOGGER(Functions[is_label]): movs	r0, #3 is not a label
LOGGER(Functions[define_label]): Define label lsls	r0, r0, #15
LOGGER(Functions[is_label]): Check if lsls	r0, r0, #15 is a label
LOGGER(Functions[is_label]): lsls	r0, r0, #15 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #32]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #32] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #32] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_146
LOGGER(Functions[is_label]): Check if b	.LBB0_146 is a label
LOGGER(Functions[is_label]): b	.LBB0_146 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_146:
LOGGER(Functions[is_label]): Check if .LBB0_146: is a label
LOGGER(Functions[is_label]): .LBB0_146: is a label
LOGGER(Functions[define_label]): Label .LBB0_146 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #64]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #64] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #64] is not a label
LOGGER(Functions[define_label]): Define label lsls	r0, r0, #8
LOGGER(Functions[is_label]): Check if lsls	r0, r0, #8 is a label
LOGGER(Functions[is_label]): lsls	r0, r0, #8 is not a label
LOGGER(Functions[define_label]): Define label ldr	r1, [sp, #32]
LOGGER(Functions[is_label]): Check if ldr	r1, [sp, #32] is a label
LOGGER(Functions[is_label]): ldr	r1, [sp, #32] is not a label
LOGGER(Functions[define_label]): Define label @APP
LOGGER(Functions[is_label]): Check if @APP is a label
LOGGER(Functions[is_label]): @APP is not a label
LOGGER(Functions[define_label]): Define label movs	r4, r0
LOGGER(Functions[is_label]): Check if movs	r4, r0 is a label
LOGGER(Functions[is_label]): movs	r4, r0 is not a label
LOGGER(Functions[define_label]): Define label movs	r5, r1
LOGGER(Functions[is_label]): Check if movs	r5, r1 is a label
LOGGER(Functions[is_label]): movs	r5, r1 is not a label
LOGGER(Functions[define_label]): Define label @NO_APP
LOGGER(Functions[is_label]): Check if @NO_APP is a label
LOGGER(Functions[is_label]): @NO_APP is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #172]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #172] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #172] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #24]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #24] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #24] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #24]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #24] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #24] is not a label
LOGGER(Functions[define_label]): Define label lsls	r0, r0, #8
LOGGER(Functions[is_label]): Check if lsls	r0, r0, #8 is a label
LOGGER(Functions[is_label]): lsls	r0, r0, #8 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #28]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #28] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #28] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #28]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #28] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #28] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp]
LOGGER(Functions[is_label]): Check if str	r0, [sp] is a label
LOGGER(Functions[is_label]): str	r0, [sp] is not a label
LOGGER(Functions[define_label]): Define label ldr	r4, [sp]
LOGGER(Functions[is_label]): Check if ldr	r4, [sp] is a label
LOGGER(Functions[is_label]): ldr	r4, [sp] is not a label
LOGGER(Functions[define_label]): Define label @APP
LOGGER(Functions[is_label]): Check if @APP is a label
LOGGER(Functions[is_label]): @APP is not a label
LOGGER(Functions[define_label]): Define label movs	r0, r4
LOGGER(Functions[is_label]): Check if movs	r0, r4 is a label
LOGGER(Functions[is_label]): movs	r0, r4 is not a label
LOGGER(Functions[define_label]): Define label lsrs	r1, r0, #16
LOGGER(Functions[is_label]): Check if lsrs	r1, r0, #16 is a label
LOGGER(Functions[is_label]): lsrs	r1, r0, #16 is not a label
LOGGER(Functions[define_label]): Define label @NO_APP
LOGGER(Functions[is_label]): Check if @NO_APP is a label
LOGGER(Functions[is_label]): @NO_APP is not a label
LOGGER(Functions[define_label]): Define label str	r1, [sp, #20]
LOGGER(Functions[is_label]): Check if str	r1, [sp, #20] is a label
LOGGER(Functions[is_label]): str	r1, [sp, #20] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #20]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #20] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #20] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #128]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #128] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #128] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_147
LOGGER(Functions[is_label]): Check if b	.LBB0_147 is a label
LOGGER(Functions[is_label]): b	.LBB0_147 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_147:
LOGGER(Functions[is_label]): Check if .LBB0_147: is a label
LOGGER(Functions[is_label]): .LBB0_147: is a label
LOGGER(Functions[define_label]): Label .LBB0_147 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #168]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #168] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #168] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label lsrs	r0, r0, #12
LOGGER(Functions[is_label]): Check if lsrs	r0, r0, #12 is a label
LOGGER(Functions[is_label]): lsrs	r0, r0, #12 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label movs	r0, #0
LOGGER(Functions[is_label]): Check if movs	r0, #0 is a label
LOGGER(Functions[is_label]): movs	r0, #0 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #116]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #116] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #116] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #112]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #112] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #112] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_148
LOGGER(Functions[is_label]): Check if b	.LBB0_148 is a label
LOGGER(Functions[is_label]): b	.LBB0_148 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_148:
LOGGER(Functions[is_label]): Check if .LBB0_148: is a label
LOGGER(Functions[is_label]): .LBB0_148: is a label
LOGGER(Functions[define_label]): Label .LBB0_148 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #112]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #112] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #112] is not a label
LOGGER(Functions[define_label]): Define label cmp	r0, #4
LOGGER(Functions[is_label]): Check if cmp	r0, #4 is a label
LOGGER(Functions[is_label]): cmp	r0, #4 is not a label
LOGGER(Functions[define_label]): Define label bhi	.LBB0_153
LOGGER(Functions[is_label]): Check if bhi	.LBB0_153 is a label
LOGGER(Functions[is_label]): bhi	.LBB0_153 is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_149
LOGGER(Functions[is_label]): Check if b	.LBB0_149 is a label
LOGGER(Functions[is_label]): b	.LBB0_149 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_149:
LOGGER(Functions[is_label]): Check if .LBB0_149: is a label
LOGGER(Functions[is_label]): .LBB0_149: is a label
LOGGER(Functions[define_label]): Label .LBB0_149 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label movs	r1, #15
LOGGER(Functions[is_label]): Check if movs	r1, #15 is a label
LOGGER(Functions[is_label]): movs	r1, #15 is not a label
LOGGER(Functions[define_label]): Define label ands	r0, r1
LOGGER(Functions[is_label]): Check if ands	r0, r1 is a label
LOGGER(Functions[is_label]): ands	r0, r1 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #108]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #108] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #108] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label lsrs	r0, r0, #4
LOGGER(Functions[is_label]): Check if lsrs	r0, r0, #4 is a label
LOGGER(Functions[is_label]): lsrs	r0, r0, #4 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_150
LOGGER(Functions[is_label]): Check if b	.LBB0_150 is a label
LOGGER(Functions[is_label]): b	.LBB0_150 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_150:
LOGGER(Functions[is_label]): Check if .LBB0_150: is a label
LOGGER(Functions[is_label]): .LBB0_150: is a label
LOGGER(Functions[define_label]): Label .LBB0_150 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #108]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #108] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #108] is not a label
LOGGER(Functions[define_label]): Define label adds	r0, #48
LOGGER(Functions[is_label]): Check if adds	r0, #48 is a label
LOGGER(Functions[is_label]): adds	r0, #48 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #124]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #124] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #124] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_151
LOGGER(Functions[is_label]): Check if b	.LBB0_151 is a label
LOGGER(Functions[is_label]): b	.LBB0_151 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_151:
LOGGER(Functions[is_label]): Check if .LBB0_151: is a label
LOGGER(Functions[is_label]): .LBB0_151: is a label
LOGGER(Functions[define_label]): Label .LBB0_151 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_152
LOGGER(Functions[is_label]): Check if b	.LBB0_152 is a label
LOGGER(Functions[is_label]): b	.LBB0_152 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_152:
LOGGER(Functions[is_label]): Check if .LBB0_152: is a label
LOGGER(Functions[is_label]): .LBB0_152: is a label
LOGGER(Functions[define_label]): Label .LBB0_152 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #112]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #112] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #112] is not a label
LOGGER(Functions[define_label]): Define label adds	r0, r0, #1
LOGGER(Functions[is_label]): Check if adds	r0, r0, #1 is a label
LOGGER(Functions[is_label]): adds	r0, r0, #1 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #112]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #112] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #112] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_148
LOGGER(Functions[is_label]): Check if b	.LBB0_148 is a label
LOGGER(Functions[is_label]): b	.LBB0_148 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_153:
LOGGER(Functions[is_label]): Check if .LBB0_153: is a label
LOGGER(Functions[is_label]): .LBB0_153: is a label
LOGGER(Functions[define_label]): Label .LBB0_153 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_154
LOGGER(Functions[is_label]): Check if b	.LBB0_154 is a label
LOGGER(Functions[is_label]): b	.LBB0_154 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_154:
LOGGER(Functions[is_label]): Check if .LBB0_154: is a label
LOGGER(Functions[is_label]): .LBB0_154: is a label
LOGGER(Functions[define_label]): Label .LBB0_154 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #28]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #28] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #28] is not a label
LOGGER(Functions[define_label]): Define label @APP
LOGGER(Functions[is_label]): Check if @APP is a label
LOGGER(Functions[is_label]): @APP is not a label
LOGGER(Functions[define_label]): Define label lsls	r2, r0, #16
LOGGER(Functions[is_label]): Check if lsls	r2, r0, #16 is a label
LOGGER(Functions[is_label]): lsls	r2, r0, #16 is not a label
LOGGER(Functions[define_label]): Define label lsrs	r2, r2, #16
LOGGER(Functions[is_label]): Check if lsrs	r2, r2, #16 is a label
LOGGER(Functions[is_label]): lsrs	r2, r2, #16 is not a label
LOGGER(Functions[define_label]): Define label movs	r1, #100
LOGGER(Functions[is_label]): Check if movs	r1, #100 is a label
LOGGER(Functions[is_label]): movs	r1, #100 is not a label
LOGGER(Functions[define_label]): Define label muls	r2, r1, r2
LOGGER(Functions[is_label]): Check if muls	r2, r1, r2 is a label
LOGGER(Functions[is_label]): muls	r2, r1, r2 is not a label
LOGGER(Functions[define_label]): Define label muls	r2, r1, r2
LOGGER(Functions[is_label]): Check if muls	r2, r1, r2 is a label
LOGGER(Functions[is_label]): muls	r2, r1, r2 is not a label
LOGGER(Functions[define_label]): Define label lsrs	r3, r2, #16
LOGGER(Functions[is_label]): Check if lsrs	r3, r2, #16 is a label
LOGGER(Functions[is_label]): lsrs	r3, r2, #16 is not a label
LOGGER(Functions[define_label]): Define label @NO_APP
LOGGER(Functions[is_label]): Check if @NO_APP is a label
LOGGER(Functions[is_label]): @NO_APP is not a label
LOGGER(Functions[define_label]): Define label str	r3, [sp, #20]
LOGGER(Functions[is_label]): Check if str	r3, [sp, #20] is a label
LOGGER(Functions[is_label]): str	r3, [sp, #20] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #20]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #20] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #20] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #128]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #128] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #128] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_155
LOGGER(Functions[is_label]): Check if b	.LBB0_155 is a label
LOGGER(Functions[is_label]): b	.LBB0_155 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_155:
LOGGER(Functions[is_label]): Check if .LBB0_155: is a label
LOGGER(Functions[is_label]): .LBB0_155: is a label
LOGGER(Functions[define_label]): Label .LBB0_155 defined
LOGGER(Functions[define_label]): Define label movs	r0, #46
LOGGER(Functions[is_label]): Check if movs	r0, #46 is a label
LOGGER(Functions[is_label]): movs	r0, #46 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #124]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #124] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #124] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_156
LOGGER(Functions[is_label]): Check if b	.LBB0_156 is a label
LOGGER(Functions[is_label]): b	.LBB0_156 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_156:
LOGGER(Functions[is_label]): Check if .LBB0_156: is a label
LOGGER(Functions[is_label]): .LBB0_156: is a label
LOGGER(Functions[define_label]): Label .LBB0_156 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_157
LOGGER(Functions[is_label]): Check if b	.LBB0_157 is a label
LOGGER(Functions[is_label]): b	.LBB0_157 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_157:
LOGGER(Functions[is_label]): Check if .LBB0_157: is a label
LOGGER(Functions[is_label]): .LBB0_157: is a label
LOGGER(Functions[define_label]): Label .LBB0_157 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #168]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #168] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #168] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label lsrs	r0, r0, #16
LOGGER(Functions[is_label]): Check if lsrs	r0, r0, #16 is a label
LOGGER(Functions[is_label]): lsrs	r0, r0, #16 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label movs	r0, #0
LOGGER(Functions[is_label]): Check if movs	r0, #0 is a label
LOGGER(Functions[is_label]): movs	r0, #0 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #116]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #116] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #116] is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #112]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #112] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #112] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_158
LOGGER(Functions[is_label]): Check if b	.LBB0_158 is a label
LOGGER(Functions[is_label]): b	.LBB0_158 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_158:
LOGGER(Functions[is_label]): Check if .LBB0_158: is a label
LOGGER(Functions[is_label]): .LBB0_158: is a label
LOGGER(Functions[define_label]): Label .LBB0_158 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #112]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #112] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #112] is not a label
LOGGER(Functions[define_label]): Define label cmp	r0, #3
LOGGER(Functions[is_label]): Check if cmp	r0, #3 is a label
LOGGER(Functions[is_label]): cmp	r0, #3 is not a label
LOGGER(Functions[define_label]): Define label bhi	.LBB0_163
LOGGER(Functions[is_label]): Check if bhi	.LBB0_163 is a label
LOGGER(Functions[is_label]): bhi	.LBB0_163 is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_159
LOGGER(Functions[is_label]): Check if b	.LBB0_159 is a label
LOGGER(Functions[is_label]): b	.LBB0_159 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_159:
LOGGER(Functions[is_label]): Check if .LBB0_159: is a label
LOGGER(Functions[is_label]): .LBB0_159: is a label
LOGGER(Functions[define_label]): Label .LBB0_159 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label movs	r1, #15
LOGGER(Functions[is_label]): Check if movs	r1, #15 is a label
LOGGER(Functions[is_label]): movs	r1, #15 is not a label
LOGGER(Functions[define_label]): Define label ands	r0, r1
LOGGER(Functions[is_label]): Check if ands	r0, r1 is a label
LOGGER(Functions[is_label]): ands	r0, r1 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #108]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #108] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #108] is not a label
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label lsrs	r0, r0, #4
LOGGER(Functions[is_label]): Check if lsrs	r0, r0, #4 is a label
LOGGER(Functions[is_label]): lsrs	r0, r0, #4 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #120]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #120] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #120] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_160
LOGGER(Functions[is_label]): Check if b	.LBB0_160 is a label
LOGGER(Functions[is_label]): b	.LBB0_160 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_160:
LOGGER(Functions[is_label]): Check if .LBB0_160: is a label
LOGGER(Functions[is_label]): .LBB0_160: is a label
LOGGER(Functions[define_label]): Label .LBB0_160 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #108]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #108] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #108] is not a label
LOGGER(Functions[define_label]): Define label adds	r0, #48
LOGGER(Functions[is_label]): Check if adds	r0, #48 is a label
LOGGER(Functions[is_label]): adds	r0, #48 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #124]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #124] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #124] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_161
LOGGER(Functions[is_label]): Check if b	.LBB0_161 is a label
LOGGER(Functions[is_label]): b	.LBB0_161 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_161:
LOGGER(Functions[is_label]): Check if .LBB0_161: is a label
LOGGER(Functions[is_label]): .LBB0_161: is a label
LOGGER(Functions[define_label]): Label .LBB0_161 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_162
LOGGER(Functions[is_label]): Check if b	.LBB0_162 is a label
LOGGER(Functions[is_label]): b	.LBB0_162 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_162:
LOGGER(Functions[is_label]): Check if .LBB0_162: is a label
LOGGER(Functions[is_label]): .LBB0_162: is a label
LOGGER(Functions[define_label]): Label .LBB0_162 defined
LOGGER(Functions[define_label]): Define label ldr	r0, [sp, #112]
LOGGER(Functions[is_label]): Check if ldr	r0, [sp, #112] is a label
LOGGER(Functions[is_label]): ldr	r0, [sp, #112] is not a label
LOGGER(Functions[define_label]): Define label adds	r0, r0, #1
LOGGER(Functions[is_label]): Check if adds	r0, r0, #1 is a label
LOGGER(Functions[is_label]): adds	r0, r0, #1 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #112]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #112] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #112] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_158
LOGGER(Functions[is_label]): Check if b	.LBB0_158 is a label
LOGGER(Functions[is_label]): b	.LBB0_158 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_163:
LOGGER(Functions[is_label]): Check if .LBB0_163: is a label
LOGGER(Functions[is_label]): .LBB0_163: is a label
LOGGER(Functions[define_label]): Label .LBB0_163 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_164
LOGGER(Functions[is_label]): Check if b	.LBB0_164 is a label
LOGGER(Functions[is_label]): b	.LBB0_164 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_164:
LOGGER(Functions[is_label]): Check if .LBB0_164: is a label
LOGGER(Functions[is_label]): .LBB0_164: is a label
LOGGER(Functions[define_label]): Label .LBB0_164 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_165
LOGGER(Functions[is_label]): Check if b	.LBB0_165 is a label
LOGGER(Functions[is_label]): b	.LBB0_165 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_165:
LOGGER(Functions[is_label]): Check if .LBB0_165: is a label
LOGGER(Functions[is_label]): .LBB0_165: is a label
LOGGER(Functions[define_label]): Label .LBB0_165 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_166
LOGGER(Functions[is_label]): Check if b	.LBB0_166 is a label
LOGGER(Functions[is_label]): b	.LBB0_166 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_166:
LOGGER(Functions[is_label]): Check if .LBB0_166: is a label
LOGGER(Functions[is_label]): .LBB0_166: is a label
LOGGER(Functions[define_label]): Label .LBB0_166 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_167
LOGGER(Functions[is_label]): Check if b	.LBB0_167 is a label
LOGGER(Functions[is_label]): b	.LBB0_167 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_167:
LOGGER(Functions[is_label]): Check if .LBB0_167: is a label
LOGGER(Functions[is_label]): .LBB0_167: is a label
LOGGER(Functions[define_label]): Label .LBB0_167 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_167
LOGGER(Functions[is_label]): Check if b	.LBB0_167 is a label
LOGGER(Functions[is_label]): b	.LBB0_167 is not a label
LOGGER(Functions[define_label]): Define label .Lfunc_end0:
LOGGER(Functions[is_label]): Check if .Lfunc_end0: is a label
LOGGER(Functions[is_label]): .Lfunc_end0: is a label
LOGGER(Functions[define_label]): Label .Lfunc_end0 defined
LOGGER(Functions[define_label]): Define label .size	run, .Lfunc_end0-run
LOGGER(Functions[is_label]): Check if .size	run, .Lfunc_end0-run is a label
LOGGER(Functions[is_label]): .size	run, .Lfunc_end0-run is not a label
LOGGER(Functions[define_label]): Define label .cantunwind
LOGGER(Functions[is_label]): Check if .cantunwind is a label
LOGGER(Functions[is_label]): .cantunwind is not a label
LOGGER(Functions[define_label]): Define label .fnend
LOGGER(Functions[is_label]): Check if .fnend is a label
LOGGER(Functions[is_label]): .fnend is not a label
LOGGER(Functions[define_label]): Define label .ident	"clang version 8.0.1-9 (tags/RELEASE_801/final)"
LOGGER(Functions[is_label]): Check if .ident	"clang version 8.0.1-9 (tags/RELEASE_801/final)" is a label
LOGGER(Functions[is_label]): .ident	"clang version 8.0.1-9 (tags/RELEASE_801/final)" is not a label
LOGGER(Functions[define_label]): Define label .section	".note.GNU-stack","",%progbits
LOGGER(Functions[is_label]): Check if .section	".note.GNU-stack","",%progbits is a label
LOGGER(Functions[is_label]): .section	".note.GNU-stack","",%progbits is not a label
LOGGER(Functions[define_label]): Define label .addrsig
LOGGER(Functions[is_label]): Check if .addrsig is a label
LOGGER(Functions[is_label]): .addrsig is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	30, 6
LOGGER(Functions[is_label]): Check if .eabi_attribute	30, 6 is a label
LOGGER(Functions[is_label]): .eabi_attribute	30, 6 is not a label
LOGGER(Functions[set_number_of_instructions_labels]): Set number of instructions labels to 616
LOGGER(Functions[set_number_of_labels]): Set number of labels to 847
LOGGER(AsmParser[convert_into_binary]): Error: ['ADD', 'r7,', 'sp,', '#8'] is not a valid instruction
LOGGER(AsmParser[convert_into_binary]): ['SUB', 'sp,', '#188']
LOGGER(AsmParser[call_function]): Calling sub_imm7 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 47: 0101111
LOGGER(AsmInstructions[instruction_sp_imm7]): 1011 00001 0101111
LOGGER(AsmParser[convert_into_binary]): ['SUB', 'sp,', '#508']
LOGGER(AsmParser[call_function]): Calling sub_imm7 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 127: 1111111
LOGGER(AsmInstructions[instruction_sp_imm7]): 1011 00001 1111111
LOGGER(AsmParser[convert_into_binary]): ['SUB', 'sp,', '#452']
LOGGER(AsmParser[call_function]): Calling sub_imm7 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 113: 1110001
LOGGER(AsmInstructions[instruction_sp_imm7]): 1011 00001 1110001
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#7']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 7: 00000111
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00000111
LOGGER(AsmParser[convert_into_binary]): ['LSLS', 'r0,', 'r0,', '#15']
LOGGER(AsmParser[call_function]): Calling lsls_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 15: 01111
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 000 01111 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#100']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 25: 00011001
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011001 000
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#15']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 15: 00001111
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00001111
LOGGER(AsmParser[convert_into_binary]): ['LSLS', 'r0,', 'r0,', '#15']
LOGGER(AsmParser[call_function]): Calling lsls_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 15: 01111
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 000 01111 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#96']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 24: 00011000
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011000 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#100']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 25: 00011001
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011001 000
LOGGER(AsmParser[convert_into_binary]): ['LSRS', 'r0,', 'r0,', '#8']
LOGGER(AsmParser[call_function]): Calling lsrs_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 8: 01000
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 001 01000 000 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r1,', '#96']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 24: 00011000
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011000 001
LOGGER(AsmParser[convert_into_binary]): ['LSRS', 'r1,', 'r1,', '#8']
LOGGER(AsmParser[call_function]): Calling lsrs_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 8: 01000
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 001 01000 001 001
LOGGER(AsmParser[convert_into_binary]): ['MULS', 'r1,', 'r0,', 'r1']
LOGGER(AsmParser[call_function]): Calling muls_Rdm_Rn_Rdm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 1101 000 001
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r1,', '#92']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 23: 00010111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010111 001
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_1']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#100']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 25: 00011001
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011001 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#88']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 22: 00010110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010110 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#88']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 22: 00010110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00010110 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#16']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 4: 00000100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000100 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r2,', '#16']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_immediate]): Get immediate from 4: 00000100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00000100 010
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', 'r2']
LOGGER(AsmParser[call_function]): Calling movs_Rd_Rn with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r2: 010
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 000 00000 010 000
LOGGER(AsmParser[convert_into_binary]): ['LSRS', 'r1,', 'r0,', '#16']
LOGGER(AsmParser[call_function]): Calling lsrs_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 16: 10000
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 001 10000 000 001
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r1,', '#84']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 21: 00010101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010101 001
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#84']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 21: 00010101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00010101 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#128']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 32: 00100000
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00100000 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_2']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#168']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 42: 00101010
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00101010 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['LSRS', 'r0,', 'r0,', '#12']
LOGGER(AsmParser[call_function]): Calling lsrs_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 12: 01100
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 001 01100 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#0']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00000000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#116']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 29: 00011101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011101 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#112']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 28: 00011100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011100 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_3']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#112']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 28: 00011100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011100 000
LOGGER(AsmParser[convert_into_binary]): ['CMP', 'r0,', '#4']
LOGGER(AsmParser[call_function]): Calling cmp_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 4: 00000100
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 101 000 00000100
LOGGER(AsmParser[convert_into_binary]): ['BHI', '.LBB0_8']
LOGGER(AsmParser[call_function]): Calling bhi with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 16: 00010000
LOGGER(AsmInstructions[conditional_branch]): 1101 1000 00010000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_4']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r1,', '#15']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 15: 00001111
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 001 00001111
LOGGER(AsmParser[convert_into_binary]): ['ANDS', 'r0,', 'r1']
LOGGER(AsmParser[call_function]): Calling ands_Rdn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r1: 001
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 0000 001 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#108']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 27: 00011011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011011 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['LSRS', 'r0,', 'r0,', '#4']
LOGGER(AsmParser[call_function]): Calling lsrs_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 4: 00100
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 001 00100 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_5']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#108']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 27: 00011011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011011 000
LOGGER(AsmParser[convert_into_binary]): ['ADDS', 'r0,', '#48']
LOGGER(AsmParser[call_function]): Calling adds_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 48: 00110000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 110 000 00110000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#124']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 31: 00011111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011111 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_6']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_7']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#112']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 28: 00011100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011100 000
LOGGER(AsmParser[convert_into_binary]): ['ADDS', 'r0,', 'r0,', '#1']
LOGGER(AsmParser[call_function]): Calling adds_Rd_Rn_imm3 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 001
LOGGER(AsmInstructions[instruction_imm3_rd_rn]): 00 01110 001 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#112']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 28: 00011100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011100 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_3']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111101001
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111101001
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_9']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#88']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 22: 00010110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00010110 000
LOGGER(AsmParser[convert_into_binary]): ['LSLS', 'r2,', 'r0,', '#16']
LOGGER(AsmParser[call_function]): Calling lsls_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 16: 10000
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 000 10000 000 010
LOGGER(AsmParser[convert_into_binary]): ['LSRS', 'r2,', 'r2,', '#16']
LOGGER(AsmParser[call_function]): Calling lsrs_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_immediate]): Get immediate from 16: 10000
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 001 10000 010 010
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r1,', '#100']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 100: 01100100
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 001 01100100
LOGGER(AsmParser[convert_into_binary]): ['MULS', 'r2,', 'r1,', 'r2']
LOGGER(AsmParser[call_function]): Calling muls_Rdm_Rn_Rdm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 1101 001 010
LOGGER(AsmParser[convert_into_binary]): ['MULS', 'r2,', 'r1,', 'r2']
LOGGER(AsmParser[call_function]): Calling muls_Rdm_Rn_Rdm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 1101 001 010
LOGGER(AsmParser[convert_into_binary]): ['LSRS', 'r3,', 'r2,', '#16']
LOGGER(AsmParser[call_function]): Calling lsrs_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r3,: 011
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_immediate]): Get immediate from 16: 10000
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 001 10000 010 011
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r3,', '#84']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r3,: 011
LOGGER(AsmInstructions[get_immediate]): Get immediate from 21: 00010101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010101 011
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#84']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 21: 00010101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00010101 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#128']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 32: 00100000
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00100000 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_10']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#46']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 46: 00101110
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00101110
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#124']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 31: 00011111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011111 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_11']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_12']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#168']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 42: 00101010
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00101010 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['LSRS', 'r0,', 'r0,', '#16']
LOGGER(AsmParser[call_function]): Calling lsrs_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 16: 10000
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 001 10000 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#0']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00000000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#116']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 29: 00011101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011101 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#112']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 28: 00011100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011100 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_13']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#112']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 28: 00011100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011100 000
LOGGER(AsmParser[convert_into_binary]): ['CMP', 'r0,', '#3']
LOGGER(AsmParser[call_function]): Calling cmp_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 3: 00000011
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 101 000 00000011
LOGGER(AsmParser[convert_into_binary]): ['BHI', '.LBB0_18']
LOGGER(AsmParser[call_function]): Calling bhi with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 16: 00010000
LOGGER(AsmInstructions[conditional_branch]): 1101 1000 00010000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_14']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r1,', '#15']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 15: 00001111
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 001 00001111
LOGGER(AsmParser[convert_into_binary]): ['ANDS', 'r0,', 'r1']
LOGGER(AsmParser[call_function]): Calling ands_Rdn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r1: 001
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 0000 001 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#108']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 27: 00011011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011011 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['LSRS', 'r0,', 'r0,', '#4']
LOGGER(AsmParser[call_function]): Calling lsrs_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 4: 00100
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 001 00100 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_15']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#108']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 27: 00011011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011011 000
LOGGER(AsmParser[convert_into_binary]): ['ADDS', 'r0,', '#48']
LOGGER(AsmParser[call_function]): Calling adds_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 48: 00110000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 110 000 00110000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#124']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 31: 00011111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011111 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_16']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_17']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#112']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 28: 00011100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011100 000
LOGGER(AsmParser[convert_into_binary]): ['ADDS', 'r0,', 'r0,', '#1']
LOGGER(AsmParser[call_function]): Calling adds_Rd_Rn_imm3 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 001
LOGGER(AsmInstructions[instruction_imm3_rd_rn]): 00 01110 001 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#112']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 28: 00011100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011100 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_13']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111101001
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111101001
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_19']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_20']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_21']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_22']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_23']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#32']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 32: 00100000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00100000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#124']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 31: 00011111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011111 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_24']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_25']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#42']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 42: 00101010
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00101010
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#124']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 31: 00011111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011111 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_26']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_27']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_28']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#32']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 32: 00100000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00100000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#124']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 31: 00011111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011111 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_29']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_30']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_31']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#96']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 24: 00011000
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#80']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 20: 00010100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010100 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#80']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 20: 00010100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00010100 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#12']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 3: 00000011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000011 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r2,', '#12']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_immediate]): Get immediate from 3: 00000011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00000011 010
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', 'r2']
LOGGER(AsmParser[call_function]): Calling movs_Rd_Rn with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r2: 010
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 000 00000 010 000
LOGGER(AsmParser[convert_into_binary]): ['LSRS', 'r1,', 'r0,', '#16']
LOGGER(AsmParser[call_function]): Calling lsrs_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 16: 10000
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 001 10000 000 001
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r1,', '#76']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 19: 00010011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010011 001
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#76']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 19: 00010011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00010011 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#128']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 32: 00100000
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00100000 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_32']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#168']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 42: 00101010
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00101010 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['LSRS', 'r0,', 'r0,', '#12']
LOGGER(AsmParser[call_function]): Calling lsrs_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 12: 01100
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 001 01100 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#0']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00000000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#116']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 29: 00011101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011101 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#112']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 28: 00011100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011100 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_33']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#112']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 28: 00011100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011100 000
LOGGER(AsmParser[convert_into_binary]): ['CMP', 'r0,', '#4']
LOGGER(AsmParser[call_function]): Calling cmp_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 4: 00000100
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 101 000 00000100
LOGGER(AsmParser[convert_into_binary]): ['BHI', '.LBB0_38']
LOGGER(AsmParser[call_function]): Calling bhi with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 16: 00010000
LOGGER(AsmInstructions[conditional_branch]): 1101 1000 00010000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_34']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r1,', '#15']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 15: 00001111
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 001 00001111
LOGGER(AsmParser[convert_into_binary]): ['ANDS', 'r0,', 'r1']
LOGGER(AsmParser[call_function]): Calling ands_Rdn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r1: 001
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 0000 001 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#108']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 27: 00011011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011011 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['LSRS', 'r0,', 'r0,', '#4']
LOGGER(AsmParser[call_function]): Calling lsrs_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 4: 00100
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 001 00100 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_35']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#108']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 27: 00011011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011011 000
LOGGER(AsmParser[convert_into_binary]): ['ADDS', 'r0,', '#48']
LOGGER(AsmParser[call_function]): Calling adds_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 48: 00110000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 110 000 00110000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#124']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 31: 00011111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011111 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_36']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_37']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#112']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 28: 00011100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011100 000
LOGGER(AsmParser[convert_into_binary]): ['ADDS', 'r0,', 'r0,', '#1']
LOGGER(AsmParser[call_function]): Calling adds_Rd_Rn_imm3 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 001
LOGGER(AsmInstructions[instruction_imm3_rd_rn]): 00 01110 001 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#112']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 28: 00011100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011100 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_33']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111101001
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111101001
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_39']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#80']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 20: 00010100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00010100 000
LOGGER(AsmParser[convert_into_binary]): ['LSLS', 'r2,', 'r0,', '#16']
LOGGER(AsmParser[call_function]): Calling lsls_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 16: 10000
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 000 10000 000 010
LOGGER(AsmParser[convert_into_binary]): ['LSRS', 'r2,', 'r2,', '#16']
LOGGER(AsmParser[call_function]): Calling lsrs_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_immediate]): Get immediate from 16: 10000
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 001 10000 010 010
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r1,', '#100']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 100: 01100100
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 001 01100100
LOGGER(AsmParser[convert_into_binary]): ['MULS', 'r2,', 'r1,', 'r2']
LOGGER(AsmParser[call_function]): Calling muls_Rdm_Rn_Rdm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 1101 001 010
LOGGER(AsmParser[convert_into_binary]): ['MULS', 'r2,', 'r1,', 'r2']
LOGGER(AsmParser[call_function]): Calling muls_Rdm_Rn_Rdm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 1101 001 010
LOGGER(AsmParser[convert_into_binary]): ['LSRS', 'r3,', 'r2,', '#16']
LOGGER(AsmParser[call_function]): Calling lsrs_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r3,: 011
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_immediate]): Get immediate from 16: 10000
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 001 10000 010 011
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r3,', '#76']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r3,: 011
LOGGER(AsmInstructions[get_immediate]): Get immediate from 19: 00010011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010011 011
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#76']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 19: 00010011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00010011 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#128']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 32: 00100000
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00100000 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_40']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#46']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 46: 00101110
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00101110
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#124']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 31: 00011111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011111 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_41']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_42']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#168']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 42: 00101010
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00101010 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['LSRS', 'r0,', 'r0,', '#16']
LOGGER(AsmParser[call_function]): Calling lsrs_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 16: 10000
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 001 10000 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#0']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00000000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#116']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 29: 00011101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011101 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#112']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 28: 00011100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011100 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_43']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#112']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 28: 00011100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011100 000
LOGGER(AsmParser[convert_into_binary]): ['CMP', 'r0,', '#3']
LOGGER(AsmParser[call_function]): Calling cmp_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 3: 00000011
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 101 000 00000011
LOGGER(AsmParser[convert_into_binary]): ['BHI', '.LBB0_48']
LOGGER(AsmParser[call_function]): Calling bhi with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 16: 00010000
LOGGER(AsmInstructions[conditional_branch]): 1101 1000 00010000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_44']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r1,', '#15']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 15: 00001111
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 001 00001111
LOGGER(AsmParser[convert_into_binary]): ['ANDS', 'r0,', 'r1']
LOGGER(AsmParser[call_function]): Calling ands_Rdn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r1: 001
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 0000 001 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#108']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 27: 00011011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011011 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['LSRS', 'r0,', 'r0,', '#4']
LOGGER(AsmParser[call_function]): Calling lsrs_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 4: 00100
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 001 00100 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_45']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#108']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 27: 00011011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011011 000
LOGGER(AsmParser[convert_into_binary]): ['ADDS', 'r0,', '#48']
LOGGER(AsmParser[call_function]): Calling adds_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 48: 00110000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 110 000 00110000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#124']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 31: 00011111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011111 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_46']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_47']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#112']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 28: 00011100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011100 000
LOGGER(AsmParser[convert_into_binary]): ['ADDS', 'r0,', 'r0,', '#1']
LOGGER(AsmParser[call_function]): Calling adds_Rd_Rn_imm3 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 001
LOGGER(AsmInstructions[instruction_imm3_rd_rn]): 00 01110 001 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#112']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 28: 00011100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011100 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_43']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111101001
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111101001
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_49']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_50']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_51']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_52']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#61']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 61: 00111101
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00111101
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#124']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 31: 00011111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011111 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_53']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_54']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#10']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 10: 00001010
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00001010
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#124']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 31: 00011111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011111 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_55']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_56']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_57']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#92']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 23: 00010111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00010111 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#72']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 18: 00010010
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010010 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#72']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 18: 00010010
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00010010 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#8']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 2: 00000010
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000010 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r2,', '#8']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_immediate]): Get immediate from 2: 00000010
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00000010 010
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', 'r2']
LOGGER(AsmParser[call_function]): Calling movs_Rd_Rn with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r2: 010
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 000 00000 010 000
LOGGER(AsmParser[convert_into_binary]): ['LSRS', 'r1,', 'r0,', '#16']
LOGGER(AsmParser[call_function]): Calling lsrs_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 16: 10000
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 001 10000 000 001
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r1,', '#68']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 17: 00010001
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010001 001
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#68']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 17: 00010001
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00010001 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#128']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 32: 00100000
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00100000 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_58']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#168']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 42: 00101010
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00101010 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['LSRS', 'r0,', 'r0,', '#12']
LOGGER(AsmParser[call_function]): Calling lsrs_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 12: 01100
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 001 01100 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#0']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00000000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#116']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 29: 00011101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011101 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#112']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 28: 00011100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011100 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_59']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#112']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 28: 00011100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011100 000
LOGGER(AsmParser[convert_into_binary]): ['CMP', 'r0,', '#4']
LOGGER(AsmParser[call_function]): Calling cmp_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 4: 00000100
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 101 000 00000100
LOGGER(AsmParser[convert_into_binary]): ['BHI', '.LBB0_64']
LOGGER(AsmParser[call_function]): Calling bhi with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 16: 00010000
LOGGER(AsmInstructions[conditional_branch]): 1101 1000 00010000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_60']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r1,', '#15']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 15: 00001111
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 001 00001111
LOGGER(AsmParser[convert_into_binary]): ['ANDS', 'r0,', 'r1']
LOGGER(AsmParser[call_function]): Calling ands_Rdn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r1: 001
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 0000 001 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#108']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 27: 00011011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011011 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['LSRS', 'r0,', 'r0,', '#4']
LOGGER(AsmParser[call_function]): Calling lsrs_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 4: 00100
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 001 00100 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_61']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#108']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 27: 00011011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011011 000
LOGGER(AsmParser[convert_into_binary]): ['ADDS', 'r0,', '#48']
LOGGER(AsmParser[call_function]): Calling adds_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 48: 00110000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 110 000 00110000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#124']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 31: 00011111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011111 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_62']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_63']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#112']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 28: 00011100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011100 000
LOGGER(AsmParser[convert_into_binary]): ['ADDS', 'r0,', 'r0,', '#1']
LOGGER(AsmParser[call_function]): Calling adds_Rd_Rn_imm3 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 001
LOGGER(AsmInstructions[instruction_imm3_rd_rn]): 00 01110 001 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#112']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 28: 00011100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011100 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_59']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111101001
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111101001
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_65']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#72']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 18: 00010010
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00010010 000
LOGGER(AsmParser[convert_into_binary]): ['LSLS', 'r2,', 'r0,', '#16']
LOGGER(AsmParser[call_function]): Calling lsls_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 16: 10000
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 000 10000 000 010
LOGGER(AsmParser[convert_into_binary]): ['LSRS', 'r2,', 'r2,', '#16']
LOGGER(AsmParser[call_function]): Calling lsrs_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_immediate]): Get immediate from 16: 10000
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 001 10000 010 010
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r1,', '#100']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 100: 01100100
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 001 01100100
LOGGER(AsmParser[convert_into_binary]): ['MULS', 'r2,', 'r1,', 'r2']
LOGGER(AsmParser[call_function]): Calling muls_Rdm_Rn_Rdm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 1101 001 010
LOGGER(AsmParser[convert_into_binary]): ['MULS', 'r2,', 'r1,', 'r2']
LOGGER(AsmParser[call_function]): Calling muls_Rdm_Rn_Rdm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 1101 001 010
LOGGER(AsmParser[convert_into_binary]): ['LSRS', 'r3,', 'r2,', '#16']
LOGGER(AsmParser[call_function]): Calling lsrs_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r3,: 011
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_immediate]): Get immediate from 16: 10000
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 001 10000 010 011
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r3,', '#68']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r3,: 011
LOGGER(AsmInstructions[get_immediate]): Get immediate from 17: 00010001
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010001 011
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#68']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 17: 00010001
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00010001 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#128']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 32: 00100000
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00100000 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_66']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#46']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 46: 00101110
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00101110
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#124']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 31: 00011111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011111 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_67']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_68']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#168']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 42: 00101010
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00101010 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['LSRS', 'r0,', 'r0,', '#16']
LOGGER(AsmParser[call_function]): Calling lsrs_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 16: 10000
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 001 10000 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#0']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00000000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#116']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 29: 00011101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011101 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#112']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 28: 00011100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011100 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_69']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#112']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 28: 00011100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011100 000
LOGGER(AsmParser[convert_into_binary]): ['CMP', 'r0,', '#3']
LOGGER(AsmParser[call_function]): Calling cmp_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 3: 00000011
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 101 000 00000011
LOGGER(AsmParser[convert_into_binary]): ['BHI', '.LBB0_74']
LOGGER(AsmParser[call_function]): Calling bhi with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 16: 00010000
LOGGER(AsmInstructions[conditional_branch]): 1101 1000 00010000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_70']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r1,', '#15']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 15: 00001111
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 001 00001111
LOGGER(AsmParser[convert_into_binary]): ['ANDS', 'r0,', 'r1']
LOGGER(AsmParser[call_function]): Calling ands_Rdn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r1: 001
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 0000 001 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#108']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 27: 00011011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011011 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['LSRS', 'r0,', 'r0,', '#4']
LOGGER(AsmParser[call_function]): Calling lsrs_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 4: 00100
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 001 00100 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_71']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#108']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 27: 00011011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011011 000
LOGGER(AsmParser[convert_into_binary]): ['ADDS', 'r0,', '#48']
LOGGER(AsmParser[call_function]): Calling adds_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 48: 00110000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 110 000 00110000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#124']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 31: 00011111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011111 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_72']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_73']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#112']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 28: 00011100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011100 000
LOGGER(AsmParser[convert_into_binary]): ['ADDS', 'r0,', 'r0,', '#1']
LOGGER(AsmParser[call_function]): Calling adds_Rd_Rn_imm3 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 001
LOGGER(AsmInstructions[instruction_imm3_rd_rn]): 00 01110 001 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#112']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 28: 00011100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011100 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_69']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111101001
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111101001
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_75']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_76']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_77']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_78']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_79']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_80']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_81']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_82']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#10']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 10: 00001010
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00001010
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#124']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 31: 00011111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011111 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_83']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_84']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#115']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 115: 01110011
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 01110011
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#124']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 31: 00011111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011111 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_85']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_86']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_87']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#113']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 113: 01110001
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 01110001
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#124']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 31: 00011111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011111 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_88']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_89']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_90']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#114']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 114: 01110010
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 01110010
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#124']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 31: 00011111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011111 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_91']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_92']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_93']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#116']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 116: 01110100
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 01110100
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#124']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 31: 00011111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011111 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_94']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_95']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_96']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#61']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 61: 00111101
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00111101
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#124']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 31: 00011111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011111 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_97']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_98']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#92']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 23: 00010111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00010111 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#48']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 12: 00001100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00001100 000
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#1']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 00000001
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00000001
LOGGER(AsmParser[convert_into_binary]): ['LSLS', 'r0,', 'r0,', '#30']
LOGGER(AsmParser[call_function]): Calling lsls_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 11110
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 000 11110 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#52']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 13: 00001101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00001101 000
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#0']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00000000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#56']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 14: 00001110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00001110 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_99']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#52']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 13: 00001101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001101 000
LOGGER(AsmParser[convert_into_binary]): ['CMP', 'r0,', '#65']
LOGGER(AsmParser[call_function]): Calling cmp_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 65: 01000001
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 101 000 01000001
LOGGER(AsmParser[convert_into_binary]): ['BLO', '.LBB0_103']
LOGGER(AsmParser[call_function]): Calling bcc_blo with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 24: 00011000
LOGGER(AsmInstructions[conditional_branch]): 1101 0011 00011000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_100']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#56']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 14: 00001110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001110 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r1,', '#52']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 13: 00001101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001101 001
LOGGER(AsmParser[convert_into_binary]): ['ADDS', 'r0,', 'r0,', 'r1']
LOGGER(AsmParser[call_function]): Calling adds_Rd_Rn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r1: 001
LOGGER(AsmInstructions[instruction_rm_rd_rn]): 00 01100 001 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#60']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 15: 00001111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00001111 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#48']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 12: 00001100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001100 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r1,', '#60']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 15: 00001111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001111 001
LOGGER(AsmParser[convert_into_binary]): ['CMP', 'r0,', 'r1']
LOGGER(AsmParser[call_function]): Calling cmp_Rn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r1: 001
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 1010 001 000
LOGGER(AsmParser[convert_into_binary]): ['BLO', '.LBB0_102']
LOGGER(AsmParser[call_function]): Calling bcc_blo with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 8: 00001000
LOGGER(AsmInstructions[conditional_branch]): 1101 0011 00001000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_101']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#60']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 15: 00001111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001111 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r1,', '#48']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 12: 00001100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001100 001
LOGGER(AsmParser[convert_into_binary]): ['SUBS', 'r0,', 'r1,', 'r0']
LOGGER(AsmParser[call_function]): Calling subs_Rd_Rn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_register_number]): Get register number from r0: 000
LOGGER(AsmInstructions[instruction_rm_rd_rn]): 00 01101 000 001 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#48']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 12: 00001100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00001100 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#60']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 15: 00001111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001111 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r1,', '#52']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 13: 00001101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001101 001
LOGGER(AsmParser[convert_into_binary]): ['ADDS', 'r0,', 'r0,', 'r1']
LOGGER(AsmParser[call_function]): Calling adds_Rd_Rn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r1: 001
LOGGER(AsmInstructions[instruction_rm_rd_rn]): 00 01100 001 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#56']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 14: 00001110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00001110 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_102']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#48']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 12: 00001100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001100 000
LOGGER(AsmParser[convert_into_binary]): ['LSLS', 'r0,', 'r0,', '#1']
LOGGER(AsmParser[call_function]): Calling lsls_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 00001
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 000 00001 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#48']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 12: 00001100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00001100 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#52']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 13: 00001101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001101 000
LOGGER(AsmParser[convert_into_binary]): ['LSRS', 'r0,', 'r0,', '#1']
LOGGER(AsmParser[call_function]): Calling lsrs_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 00001
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 001 00001 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#52']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 13: 00001101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00001101 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_99']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111100001
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111100001
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#56']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 14: 00001110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001110 000
LOGGER(AsmParser[convert_into_binary]): ['LSRS', 'r0,', 'r0,', '#8']
LOGGER(AsmParser[call_function]): Calling lsrs_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 8: 01000
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 001 01000 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#44']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 11: 00001011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00001011 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#44']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 11: 00001011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001011 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#64']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 16: 00010000
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00010000 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_104']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#64']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 16: 00010000
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00010000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#40']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 10: 00001010
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00001010 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#40']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 10: 00001010
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001010 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#4']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 00000001
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000001 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r2,', '#4']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 00000001
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00000001 010
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', 'r2']
LOGGER(AsmParser[call_function]): Calling movs_Rd_Rn with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r2: 010
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 000 00000 010 000
LOGGER(AsmParser[convert_into_binary]): ['LSRS', 'r1,', 'r0,', '#16']
LOGGER(AsmParser[call_function]): Calling lsrs_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 16: 10000
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 001 10000 000 001
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r1,', '#36']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 9: 00001001
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00001001 001
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#36']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 9: 00001001
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001001 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#128']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 32: 00100000
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00100000 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_105']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#168']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 42: 00101010
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00101010 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['LSRS', 'r0,', 'r0,', '#12']
LOGGER(AsmParser[call_function]): Calling lsrs_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 12: 01100
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 001 01100 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#0']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00000000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#116']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 29: 00011101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011101 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#112']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 28: 00011100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011100 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_106']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#112']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 28: 00011100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011100 000
LOGGER(AsmParser[convert_into_binary]): ['CMP', 'r0,', '#4']
LOGGER(AsmParser[call_function]): Calling cmp_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 4: 00000100
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 101 000 00000100
LOGGER(AsmParser[convert_into_binary]): ['BHI', '.LBB0_111']
LOGGER(AsmParser[call_function]): Calling bhi with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 16: 00010000
LOGGER(AsmInstructions[conditional_branch]): 1101 1000 00010000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_107']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r1,', '#15']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 15: 00001111
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 001 00001111
LOGGER(AsmParser[convert_into_binary]): ['ANDS', 'r0,', 'r1']
LOGGER(AsmParser[call_function]): Calling ands_Rdn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r1: 001
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 0000 001 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#108']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 27: 00011011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011011 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['LSRS', 'r0,', 'r0,', '#4']
LOGGER(AsmParser[call_function]): Calling lsrs_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 4: 00100
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 001 00100 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_108']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#108']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 27: 00011011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011011 000
LOGGER(AsmParser[convert_into_binary]): ['ADDS', 'r0,', '#48']
LOGGER(AsmParser[call_function]): Calling adds_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 48: 00110000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 110 000 00110000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#124']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 31: 00011111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011111 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_109']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_110']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#112']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 28: 00011100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011100 000
LOGGER(AsmParser[convert_into_binary]): ['ADDS', 'r0,', 'r0,', '#1']
LOGGER(AsmParser[call_function]): Calling adds_Rd_Rn_imm3 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 001
LOGGER(AsmInstructions[instruction_imm3_rd_rn]): 00 01110 001 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#112']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 28: 00011100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011100 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_106']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111101001
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111101001
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_112']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#40']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 10: 00001010
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001010 000
LOGGER(AsmParser[convert_into_binary]): ['LSLS', 'r2,', 'r0,', '#16']
LOGGER(AsmParser[call_function]): Calling lsls_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 16: 10000
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 000 10000 000 010
LOGGER(AsmParser[convert_into_binary]): ['LSRS', 'r2,', 'r2,', '#16']
LOGGER(AsmParser[call_function]): Calling lsrs_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_immediate]): Get immediate from 16: 10000
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 001 10000 010 010
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r1,', '#100']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 100: 01100100
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 001 01100100
LOGGER(AsmParser[convert_into_binary]): ['MULS', 'r2,', 'r1,', 'r2']
LOGGER(AsmParser[call_function]): Calling muls_Rdm_Rn_Rdm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 1101 001 010
LOGGER(AsmParser[convert_into_binary]): ['MULS', 'r2,', 'r1,', 'r2']
LOGGER(AsmParser[call_function]): Calling muls_Rdm_Rn_Rdm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 1101 001 010
LOGGER(AsmParser[convert_into_binary]): ['LSRS', 'r3,', 'r2,', '#16']
LOGGER(AsmParser[call_function]): Calling lsrs_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r3,: 011
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_immediate]): Get immediate from 16: 10000
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 001 10000 010 011
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r3,', '#36']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r3,: 011
LOGGER(AsmInstructions[get_immediate]): Get immediate from 9: 00001001
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00001001 011
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#36']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 9: 00001001
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001001 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#128']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 32: 00100000
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00100000 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_113']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#46']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 46: 00101110
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00101110
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#124']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 31: 00011111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011111 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_114']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_115']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#168']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 42: 00101010
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00101010 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['LSRS', 'r0,', 'r0,', '#16']
LOGGER(AsmParser[call_function]): Calling lsrs_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 16: 10000
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 001 10000 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#0']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00000000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#116']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 29: 00011101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011101 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#112']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 28: 00011100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011100 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_116']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#112']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 28: 00011100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011100 000
LOGGER(AsmParser[convert_into_binary]): ['CMP', 'r0,', '#3']
LOGGER(AsmParser[call_function]): Calling cmp_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 3: 00000011
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 101 000 00000011
LOGGER(AsmParser[convert_into_binary]): ['BHI', '.LBB0_121']
LOGGER(AsmParser[call_function]): Calling bhi with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 16: 00010000
LOGGER(AsmInstructions[conditional_branch]): 1101 1000 00010000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_117']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r1,', '#15']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 15: 00001111
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 001 00001111
LOGGER(AsmParser[convert_into_binary]): ['ANDS', 'r0,', 'r1']
LOGGER(AsmParser[call_function]): Calling ands_Rdn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r1: 001
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 0000 001 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#108']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 27: 00011011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011011 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['LSRS', 'r0,', 'r0,', '#4']
LOGGER(AsmParser[call_function]): Calling lsrs_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 4: 00100
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 001 00100 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_118']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#108']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 27: 00011011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011011 000
LOGGER(AsmParser[convert_into_binary]): ['ADDS', 'r0,', '#48']
LOGGER(AsmParser[call_function]): Calling adds_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 48: 00110000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 110 000 00110000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#124']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 31: 00011111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011111 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_119']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_120']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#112']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 28: 00011100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011100 000
LOGGER(AsmParser[convert_into_binary]): ['ADDS', 'r0,', 'r0,', '#1']
LOGGER(AsmParser[call_function]): Calling adds_Rd_Rn_imm3 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 001
LOGGER(AsmInstructions[instruction_imm3_rd_rn]): 00 01110 001 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#112']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 28: 00011100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011100 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_116']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111101001
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111101001
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_122']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_123']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_124']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_125']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_126']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_127']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_128']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_129']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#10']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 10: 00001010
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00001010
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#124']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 31: 00011111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011111 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_130']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_131']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#47']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 47: 00101111
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00101111
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#124']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 31: 00011111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011111 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_132']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_133']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_134']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#49']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 49: 00110001
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00110001
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#124']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 31: 00011111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011111 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_135']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_136']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_137']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#46']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 46: 00101110
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00101110
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#124']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 31: 00011111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011111 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_138']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_139']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_140']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#53']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 53: 00110101
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00110101
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#124']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 31: 00011111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011111 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_141']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_142']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_143']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#61']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 61: 00111101
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00111101
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#124']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 31: 00011111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011111 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_144']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_145']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#3']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 3: 00000011
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00000011
LOGGER(AsmParser[convert_into_binary]): ['LSLS', 'r0,', 'r0,', '#15']
LOGGER(AsmParser[call_function]): Calling lsls_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 15: 01111
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 000 01111 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#32']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 8: 00001000
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00001000 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_146']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#64']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 16: 00010000
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00010000 000
LOGGER(AsmParser[convert_into_binary]): ['LSLS', 'r0,', 'r0,', '#8']
LOGGER(AsmParser[call_function]): Calling lsls_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 8: 01000
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 000 01000 000 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r1,', '#32']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 8: 00001000
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00001000 001
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r4,', 'r0']
LOGGER(AsmParser[call_function]): Calling movs_Rd_Rn with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r4,: 100
LOGGER(AsmInstructions[get_register_number]): Get register number from r0: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 000 00000 000 100
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r5,', 'r1']
LOGGER(AsmParser[call_function]): Calling movs_Rd_Rn with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r5,: 101
LOGGER(AsmInstructions[get_register_number]): Get register number from r1: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 000 00000 001 101
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#172']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 43: 00101011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00101011 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#24']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 6: 00000110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000110 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#24']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 6: 00000110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00000110 000
LOGGER(AsmParser[convert_into_binary]): ['LSLS', 'r0,', 'r0,', '#8']
LOGGER(AsmParser[call_function]): Calling lsls_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 8: 01000
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 000 01000 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#28']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 7: 00000111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000111 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#28']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 7: 00000111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00000111 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#0']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000000 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r4,', '#0']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r4,: 100
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00000000 100
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', 'r4']
LOGGER(AsmParser[call_function]): Calling movs_Rd_Rn with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r4: 100
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 000 00000 100 000
LOGGER(AsmParser[convert_into_binary]): ['LSRS', 'r1,', 'r0,', '#16']
LOGGER(AsmParser[call_function]): Calling lsrs_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 16: 10000
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 001 10000 000 001
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r1,', '#20']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 5: 00000101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000101 001
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#20']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 5: 00000101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00000101 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#128']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 32: 00100000
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00100000 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_147']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#168']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 42: 00101010
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00101010 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['LSRS', 'r0,', 'r0,', '#12']
LOGGER(AsmParser[call_function]): Calling lsrs_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 12: 01100
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 001 01100 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#0']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00000000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#116']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 29: 00011101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011101 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#112']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 28: 00011100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011100 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_148']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#112']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 28: 00011100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011100 000
LOGGER(AsmParser[convert_into_binary]): ['CMP', 'r0,', '#4']
LOGGER(AsmParser[call_function]): Calling cmp_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 4: 00000100
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 101 000 00000100
LOGGER(AsmParser[convert_into_binary]): ['BHI', '.LBB0_153']
LOGGER(AsmParser[call_function]): Calling bhi with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 16: 00010000
LOGGER(AsmInstructions[conditional_branch]): 1101 1000 00010000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_149']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r1,', '#15']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 15: 00001111
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 001 00001111
LOGGER(AsmParser[convert_into_binary]): ['ANDS', 'r0,', 'r1']
LOGGER(AsmParser[call_function]): Calling ands_Rdn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r1: 001
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 0000 001 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#108']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 27: 00011011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011011 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['LSRS', 'r0,', 'r0,', '#4']
LOGGER(AsmParser[call_function]): Calling lsrs_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 4: 00100
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 001 00100 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_150']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#108']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 27: 00011011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011011 000
LOGGER(AsmParser[convert_into_binary]): ['ADDS', 'r0,', '#48']
LOGGER(AsmParser[call_function]): Calling adds_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 48: 00110000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 110 000 00110000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#124']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 31: 00011111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011111 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_151']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_152']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#112']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 28: 00011100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011100 000
LOGGER(AsmParser[convert_into_binary]): ['ADDS', 'r0,', 'r0,', '#1']
LOGGER(AsmParser[call_function]): Calling adds_Rd_Rn_imm3 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 001
LOGGER(AsmInstructions[instruction_imm3_rd_rn]): 00 01110 001 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#112']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 28: 00011100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011100 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_148']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111101001
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111101001
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_154']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#28']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 7: 00000111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00000111 000
LOGGER(AsmParser[convert_into_binary]): ['LSLS', 'r2,', 'r0,', '#16']
LOGGER(AsmParser[call_function]): Calling lsls_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 16: 10000
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 000 10000 000 010
LOGGER(AsmParser[convert_into_binary]): ['LSRS', 'r2,', 'r2,', '#16']
LOGGER(AsmParser[call_function]): Calling lsrs_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_immediate]): Get immediate from 16: 10000
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 001 10000 010 010
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r1,', '#100']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 100: 01100100
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 001 01100100
LOGGER(AsmParser[convert_into_binary]): ['MULS', 'r2,', 'r1,', 'r2']
LOGGER(AsmParser[call_function]): Calling muls_Rdm_Rn_Rdm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 1101 001 010
LOGGER(AsmParser[convert_into_binary]): ['MULS', 'r2,', 'r1,', 'r2']
LOGGER(AsmParser[call_function]): Calling muls_Rdm_Rn_Rdm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 1101 001 010
LOGGER(AsmParser[convert_into_binary]): ['LSRS', 'r3,', 'r2,', '#16']
LOGGER(AsmParser[call_function]): Calling lsrs_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r3,: 011
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_immediate]): Get immediate from 16: 10000
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 001 10000 010 011
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r3,', '#20']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r3,: 011
LOGGER(AsmInstructions[get_immediate]): Get immediate from 5: 00000101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000101 011
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#20']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 5: 00000101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00000101 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#128']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 32: 00100000
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00100000 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_155']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#46']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 46: 00101110
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00101110
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#124']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 31: 00011111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011111 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_156']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_157']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#168']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 42: 00101010
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00101010 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['LSRS', 'r0,', 'r0,', '#16']
LOGGER(AsmParser[call_function]): Calling lsrs_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 16: 10000
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 001 10000 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#0']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00000000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#116']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 29: 00011101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011101 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#112']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 28: 00011100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011100 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_158']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#112']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 28: 00011100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011100 000
LOGGER(AsmParser[convert_into_binary]): ['CMP', 'r0,', '#3']
LOGGER(AsmParser[call_function]): Calling cmp_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 3: 00000011
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 101 000 00000011
LOGGER(AsmParser[convert_into_binary]): ['BHI', '.LBB0_163']
LOGGER(AsmParser[call_function]): Calling bhi with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 16: 00010000
LOGGER(AsmInstructions[conditional_branch]): 1101 1000 00010000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_159']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r1,', '#15']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 15: 00001111
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 001 00001111
LOGGER(AsmParser[convert_into_binary]): ['ANDS', 'r0,', 'r1']
LOGGER(AsmParser[call_function]): Calling ands_Rdn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r1: 001
LOGGER(AsmInstructions[instruction_rm_rdn]): 010000 0000 001 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#108']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 27: 00011011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011011 000
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['LSRS', 'r0,', 'r0,', '#4']
LOGGER(AsmParser[call_function]): Calling lsrs_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 4: 00100
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 001 00100 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#120']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 30: 00011110
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011110 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_160']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#108']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 27: 00011011
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011011 000
LOGGER(AsmParser[convert_into_binary]): ['ADDS', 'r0,', '#48']
LOGGER(AsmParser[call_function]): Calling adds_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 48: 00110000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 110 000 00110000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#124']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 31: 00011111
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011111 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_161']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_162']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['LDR', 'r0,', '#112']
LOGGER(AsmParser[call_function]): Calling ldr_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 28: 00011100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 1 00011100 000
LOGGER(AsmParser[convert_into_binary]): ['ADDS', 'r0,', 'r0,', '#1']
LOGGER(AsmParser[call_function]): Calling adds_Rd_Rn_imm3 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 001
LOGGER(AsmInstructions[instruction_imm3_rd_rn]): 00 01110 001 000 000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#112']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 28: 00011100
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00011100 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_158']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111101001
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111101001
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_164']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_165']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_166']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_167']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_167']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111101
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111101
LOGGER(AsmParser[binary_to_hexa]): Converting binary to hexadecimal
LOGGER(AsmParser[binary_to_hexa]): ['b0af', 'b0ff', 'b0f1', '2007', '03c0', '9019', '200f', '03c0', '9018', '9819', '0a00', '9918', '0a09', '4341', '9117', 'e7fe', '9819', '9016', '9816', '9004', '9a04', '0010', '0c01', '9115', '9815', '9020', 'e7fe', '982a', '901e', '981e', '0b00', '901e', '2000', '901d', '901c', 'e7fe', '981c', '2804', 'd810', 'e7fe', '981e', '210f', '4008', '901b', '981e', '0900', '901e', 'e7fe', '981b', '3030', '901f', 'e7fe', 'e7fe', '981c', '1c40', '901c', 'e7e9', 'e7fe', '9816', '0402', '0c12', '2164', '434a', '434a', '0c13', '9315', '9815', '9020', 'e7fe', '202e', '901f', 'e7fe', 'e7fe', '982a', '901e', '981e', '0c00', '901e', '2000', '901d', '901c', 'e7fe', '981c', '2803', 'd810', 'e7fe', '981e', '210f', '4008', '901b', '981e', '0900', '901e', 'e7fe', '981b', '3030', '901f', 'e7fe', 'e7fe', '981c', '1c40', '901c', 'e7e9', 'e7fe', 'e7fe', 'e7fe', 'e7fe', 'e7fe', '2020', '901f', 'e7fe', 'e7fe', '202a', '901f', 'e7fe', 'e7fe', 'e7fe', '2020', '901f', 'e7fe', 'e7fe', 'e7fe', '9818', '9014', '9814', '9003', '9a03', '0010', '0c01', '9113', '9813', '9020', 'e7fe', '982a', '901e', '981e', '0b00', '901e', '2000', '901d', '901c', 'e7fe', '981c', '2804', 'd810', 'e7fe', '981e', '210f', '4008', '901b', '981e', '0900', '901e', 'e7fe', '981b', '3030', '901f', 'e7fe', 'e7fe', '981c', '1c40', '901c', 'e7e9', 'e7fe', '9814', '0402', '0c12', '2164', '434a', '434a', '0c13', '9313', '9813', '9020', 'e7fe', '202e', '901f', 'e7fe', 'e7fe', '982a', '901e', '981e', '0c00', '901e', '2000', '901d', '901c', 'e7fe', '981c', '2803', 'd810', 'e7fe', '981e', '210f', '4008', '901b', '981e', '0900', '901e', 'e7fe', '981b', '3030', '901f', 'e7fe', 'e7fe', '981c', '1c40', '901c', 'e7e9', 'e7fe', 'e7fe', 'e7fe', 'e7fe', '203d', '901f', 'e7fe', 'e7fe', '200a', '901f', 'e7fe', 'e7fe', 'e7fe', '9817', '9012', '9812', '9002', '9a02', '0010', '0c01', '9111', '9811', '9020', 'e7fe', '982a', '901e', '981e', '0b00', '901e', '2000', '901d', '901c', 'e7fe', '981c', '2804', 'd810', 'e7fe', '981e', '210f', '4008', '901b', '981e', '0900', '901e', 'e7fe', '981b', '3030', '901f', 'e7fe', 'e7fe', '981c', '1c40', '901c', 'e7e9', 'e7fe', '9812', '0402', '0c12', '2164', '434a', '434a', '0c13', '9311', '9811', '9020', 'e7fe', '202e', '901f', 'e7fe', 'e7fe', '982a', '901e', '981e', '0c00', '901e', '2000', '901d', '901c', 'e7fe', '981c', '2803', 'd810', 'e7fe', '981e', '210f', '4008', '901b', '981e', '0900', '901e', 'e7fe', '981b', '3030', '901f', 'e7fe', 'e7fe', '981c', '1c40', '901c', 'e7e9', 'e7fe', 'e7fe', 'e7fe', 'e7fe', 'e7fe', 'e7fe', 'e7fe', 'e7fe', '200a', '901f', 'e7fe', 'e7fe', '2073', '901f', 'e7fe', 'e7fe', 'e7fe', '2071', '901f', 'e7fe', 'e7fe', 'e7fe', '2072', '901f', 'e7fe', 'e7fe', 'e7fe', '2074', '901f', 'e7fe', 'e7fe', 'e7fe', '203d', '901f', 'e7fe', 'e7fe', '9817', '900c', '2001', '0780', '900d', '2000', '900e', 'e7fe', '980d', '2841', 'd318', 'e7fe', '980e', '990d', '1840', '900f', '980c', '990f', '4288', 'd308', 'e7fe', '980f', '990c', '1a08', '900c', '980f', '990d', '1840', '900e', 'e7fe', '980c', '0040', '900c', '980d', '0840', '900d', 'e7e1', '980e', '0a00', '900b', '980b', '9010', 'e7fe', '9810', '900a', '980a', '9001', '9a01', '0010', '0c01', '9109', '9809', '9020', 'e7fe', '982a', '901e', '981e', '0b00', '901e', '2000', '901d', '901c', 'e7fe', '981c', '2804', 'd810', 'e7fe', '981e', '210f', '4008', '901b', '981e', '0900', '901e', 'e7fe', '981b', '3030', '901f', 'e7fe', 'e7fe', '981c', '1c40', '901c', 'e7e9', 'e7fe', '980a', '0402', '0c12', '2164', '434a', '434a', '0c13', '9309', '9809', '9020', 'e7fe', '202e', '901f', 'e7fe', 'e7fe', '982a', '901e', '981e', '0c00', '901e', '2000', '901d', '901c', 'e7fe', '981c', '2803', 'd810', 'e7fe', '981e', '210f', '4008', '901b', '981e', '0900', '901e', 'e7fe', '981b', '3030', '901f', 'e7fe', 'e7fe', '981c', '1c40', '901c', 'e7e9', 'e7fe', 'e7fe', 'e7fe', 'e7fe', 'e7fe', 'e7fe', 'e7fe', 'e7fe', '200a', '901f', 'e7fe', 'e7fe', '202f', '901f', 'e7fe', 'e7fe', 'e7fe', '2031', '901f', 'e7fe', 'e7fe', 'e7fe', '202e', '901f', 'e7fe', 'e7fe', 'e7fe', '2035', '901f', 'e7fe', 'e7fe', 'e7fe', '203d', '901f', 'e7fe', 'e7fe', '2003', '03c0', '9008', 'e7fe', '9810', '0200', '9908', '0004', '000d', '982b', '9006', '9806', '0200', '9007', '9807', '9000', '9c00', '0020', '0c01', '9105', '9805', '9020', 'e7fe', '982a', '901e', '981e', '0b00', '901e', '2000', '901d', '901c', 'e7fe', '981c', '2804', 'd810', 'e7fe', '981e', '210f', '4008', '901b', '981e', '0900', '901e', 'e7fe', '981b', '3030', '901f', 'e7fe', 'e7fe', '981c', '1c40', '901c', 'e7e9', 'e7fe', '9807', '0402', '0c12', '2164', '434a', '434a', '0c13', '9305', '9805', '9020', 'e7fe', '202e', '901f', 'e7fe', 'e7fe', '982a', '901e', '981e', '0c00', '901e', '2000', '901d', '901c', 'e7fe', '981c', '2803', 'd810', 'e7fe', '981e', '210f', '4008', '901b', '981e', '0900', '901e', 'e7fe', '981b', '3030', '901f', 'e7fe', 'e7fe', '981c', '1c40', '901c', 'e7e9', 'e7fe', 'e7fe', 'e7fe', 'e7fe', 'e7fd']
LOGGER(AsmParser[save_hexa_as_bin]): Saving the hexadecimal in ../../../src/tests/resources/output_binaries/other/testfp.bin
LOGGER(AsmReader[read_bin_file]): Reading ../../../src/tests/resources/output_binaries/other/testfp.bin
LOGGER(AsmParser[show_difference]): Expected/Actual: [92mb0af[0m/b0af [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92mb0ff[0m/b0ff [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92mb0f1[0m/b0f1 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2007[0m/2007 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m03c0[0m/03c0 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9019[0m/9019 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m200f[0m/200f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m03c0[0m/03c0 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9018[0m/9018 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9819[0m/9819 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0a00[0m/0a00 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9918[0m/9918 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0a09[0m/0a09 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m4341[0m/4341 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9117[0m/9117 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9819[0m/9819 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9016[0m/9016 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9816[0m/9816 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9004[0m/9004 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9a04[0m/9a04 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0010[0m/0010 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0c01[0m/0c01 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9115[0m/9115 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9815[0m/9815 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9020[0m/9020 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m982a[0m/982a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901e[0m/901e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981e[0m/981e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0b00[0m/0b00 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901e[0m/901e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2000[0m/2000 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901d[0m/901d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901c[0m/901c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981c[0m/981c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2804[0m/2804 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92md810[0m/d810 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981e[0m/981e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m210f[0m/210f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m4008[0m/4008 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901b[0m/901b [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981e[0m/981e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0900[0m/0900 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901e[0m/901e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981b[0m/981b [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m3030[0m/3030 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901f[0m/901f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981c[0m/981c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m1c40[0m/1c40 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901c[0m/901c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7e9[0m/e7e9 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9816[0m/9816 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0402[0m/0402 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0c12[0m/0c12 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2164[0m/2164 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m434a[0m/434a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m434a[0m/434a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0c13[0m/0c13 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9315[0m/9315 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9815[0m/9815 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9020[0m/9020 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m202e[0m/202e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901f[0m/901f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m982a[0m/982a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901e[0m/901e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981e[0m/981e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0c00[0m/0c00 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901e[0m/901e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2000[0m/2000 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901d[0m/901d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901c[0m/901c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981c[0m/981c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2803[0m/2803 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92md810[0m/d810 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981e[0m/981e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m210f[0m/210f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m4008[0m/4008 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901b[0m/901b [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981e[0m/981e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0900[0m/0900 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901e[0m/901e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981b[0m/981b [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m3030[0m/3030 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901f[0m/901f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981c[0m/981c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m1c40[0m/1c40 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901c[0m/901c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7e9[0m/e7e9 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2020[0m/2020 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901f[0m/901f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m202a[0m/202a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901f[0m/901f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2020[0m/2020 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901f[0m/901f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9818[0m/9818 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9014[0m/9014 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9814[0m/9814 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9003[0m/9003 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9a03[0m/9a03 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0010[0m/0010 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0c01[0m/0c01 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9113[0m/9113 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9813[0m/9813 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9020[0m/9020 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m982a[0m/982a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901e[0m/901e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981e[0m/981e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0b00[0m/0b00 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901e[0m/901e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2000[0m/2000 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901d[0m/901d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901c[0m/901c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981c[0m/981c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2804[0m/2804 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92md810[0m/d810 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981e[0m/981e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m210f[0m/210f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m4008[0m/4008 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901b[0m/901b [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981e[0m/981e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0900[0m/0900 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901e[0m/901e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981b[0m/981b [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m3030[0m/3030 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901f[0m/901f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981c[0m/981c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m1c40[0m/1c40 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901c[0m/901c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7e9[0m/e7e9 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9814[0m/9814 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0402[0m/0402 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0c12[0m/0c12 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2164[0m/2164 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m434a[0m/434a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m434a[0m/434a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0c13[0m/0c13 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9313[0m/9313 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9813[0m/9813 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9020[0m/9020 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m202e[0m/202e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901f[0m/901f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m982a[0m/982a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901e[0m/901e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981e[0m/981e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0c00[0m/0c00 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901e[0m/901e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2000[0m/2000 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901d[0m/901d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901c[0m/901c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981c[0m/981c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2803[0m/2803 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92md810[0m/d810 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981e[0m/981e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m210f[0m/210f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m4008[0m/4008 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901b[0m/901b [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981e[0m/981e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0900[0m/0900 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901e[0m/901e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981b[0m/981b [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m3030[0m/3030 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901f[0m/901f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981c[0m/981c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m1c40[0m/1c40 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901c[0m/901c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7e9[0m/e7e9 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m203d[0m/203d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901f[0m/901f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m200a[0m/200a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901f[0m/901f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9817[0m/9817 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9012[0m/9012 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9812[0m/9812 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9002[0m/9002 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9a02[0m/9a02 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0010[0m/0010 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0c01[0m/0c01 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9111[0m/9111 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9811[0m/9811 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9020[0m/9020 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m982a[0m/982a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901e[0m/901e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981e[0m/981e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0b00[0m/0b00 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901e[0m/901e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2000[0m/2000 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901d[0m/901d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901c[0m/901c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981c[0m/981c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2804[0m/2804 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92md810[0m/d810 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981e[0m/981e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m210f[0m/210f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m4008[0m/4008 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901b[0m/901b [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981e[0m/981e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0900[0m/0900 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901e[0m/901e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981b[0m/981b [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m3030[0m/3030 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901f[0m/901f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981c[0m/981c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m1c40[0m/1c40 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901c[0m/901c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7e9[0m/e7e9 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9812[0m/9812 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0402[0m/0402 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0c12[0m/0c12 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2164[0m/2164 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m434a[0m/434a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m434a[0m/434a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0c13[0m/0c13 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9311[0m/9311 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9811[0m/9811 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9020[0m/9020 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m202e[0m/202e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901f[0m/901f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m982a[0m/982a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901e[0m/901e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981e[0m/981e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0c00[0m/0c00 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901e[0m/901e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2000[0m/2000 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901d[0m/901d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901c[0m/901c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981c[0m/981c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2803[0m/2803 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92md810[0m/d810 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981e[0m/981e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m210f[0m/210f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m4008[0m/4008 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901b[0m/901b [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981e[0m/981e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0900[0m/0900 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901e[0m/901e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981b[0m/981b [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m3030[0m/3030 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901f[0m/901f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981c[0m/981c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m1c40[0m/1c40 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901c[0m/901c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7e9[0m/e7e9 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m200a[0m/200a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901f[0m/901f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2073[0m/2073 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901f[0m/901f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2071[0m/2071 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901f[0m/901f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2072[0m/2072 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901f[0m/901f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2074[0m/2074 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901f[0m/901f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m203d[0m/203d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901f[0m/901f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9817[0m/9817 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m900c[0m/900c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2001[0m/2001 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0780[0m/0780 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m900d[0m/900d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2000[0m/2000 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m900e[0m/900e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m980d[0m/980d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2841[0m/2841 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92md318[0m/d318 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m980e[0m/980e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m990d[0m/990d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m1840[0m/1840 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m900f[0m/900f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m980c[0m/980c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m990f[0m/990f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m4288[0m/4288 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92md308[0m/d308 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m980f[0m/980f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m990c[0m/990c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m1a08[0m/1a08 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m900c[0m/900c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m980f[0m/980f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m990d[0m/990d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m1840[0m/1840 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m900e[0m/900e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m980c[0m/980c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0040[0m/0040 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m900c[0m/900c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m980d[0m/980d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0840[0m/0840 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m900d[0m/900d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7e1[0m/e7e1 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m980e[0m/980e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0a00[0m/0a00 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m900b[0m/900b [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m980b[0m/980b [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9010[0m/9010 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9810[0m/9810 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m900a[0m/900a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m980a[0m/980a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9001[0m/9001 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9a01[0m/9a01 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0010[0m/0010 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0c01[0m/0c01 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9109[0m/9109 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9809[0m/9809 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9020[0m/9020 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m982a[0m/982a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901e[0m/901e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981e[0m/981e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0b00[0m/0b00 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901e[0m/901e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2000[0m/2000 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901d[0m/901d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901c[0m/901c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981c[0m/981c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2804[0m/2804 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92md810[0m/d810 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981e[0m/981e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m210f[0m/210f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m4008[0m/4008 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901b[0m/901b [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981e[0m/981e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0900[0m/0900 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901e[0m/901e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981b[0m/981b [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m3030[0m/3030 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901f[0m/901f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981c[0m/981c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m1c40[0m/1c40 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901c[0m/901c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7e9[0m/e7e9 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m980a[0m/980a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0402[0m/0402 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0c12[0m/0c12 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2164[0m/2164 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m434a[0m/434a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m434a[0m/434a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0c13[0m/0c13 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9309[0m/9309 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9809[0m/9809 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9020[0m/9020 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m202e[0m/202e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901f[0m/901f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m982a[0m/982a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901e[0m/901e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981e[0m/981e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0c00[0m/0c00 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901e[0m/901e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2000[0m/2000 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901d[0m/901d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901c[0m/901c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981c[0m/981c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2803[0m/2803 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92md810[0m/d810 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981e[0m/981e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m210f[0m/210f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m4008[0m/4008 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901b[0m/901b [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981e[0m/981e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0900[0m/0900 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901e[0m/901e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981b[0m/981b [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m3030[0m/3030 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901f[0m/901f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981c[0m/981c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m1c40[0m/1c40 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901c[0m/901c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7e9[0m/e7e9 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m200a[0m/200a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901f[0m/901f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m202f[0m/202f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901f[0m/901f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2031[0m/2031 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901f[0m/901f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m202e[0m/202e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901f[0m/901f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2035[0m/2035 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901f[0m/901f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m203d[0m/203d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901f[0m/901f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2003[0m/2003 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m03c0[0m/03c0 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9008[0m/9008 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9810[0m/9810 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0200[0m/0200 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9908[0m/9908 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0004[0m/0004 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m000d[0m/000d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m982b[0m/982b [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9006[0m/9006 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9806[0m/9806 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0200[0m/0200 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9007[0m/9007 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9807[0m/9807 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9000[0m/9000 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9c00[0m/9c00 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0020[0m/0020 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0c01[0m/0c01 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9105[0m/9105 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9805[0m/9805 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9020[0m/9020 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m982a[0m/982a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901e[0m/901e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981e[0m/981e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0b00[0m/0b00 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901e[0m/901e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2000[0m/2000 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901d[0m/901d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901c[0m/901c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981c[0m/981c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2804[0m/2804 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92md810[0m/d810 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981e[0m/981e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m210f[0m/210f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m4008[0m/4008 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901b[0m/901b [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981e[0m/981e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0900[0m/0900 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901e[0m/901e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981b[0m/981b [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m3030[0m/3030 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901f[0m/901f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981c[0m/981c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m1c40[0m/1c40 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901c[0m/901c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7e9[0m/e7e9 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9807[0m/9807 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0402[0m/0402 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0c12[0m/0c12 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2164[0m/2164 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m434a[0m/434a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m434a[0m/434a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0c13[0m/0c13 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9305[0m/9305 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9805[0m/9805 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9020[0m/9020 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m202e[0m/202e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901f[0m/901f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m982a[0m/982a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901e[0m/901e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981e[0m/981e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0c00[0m/0c00 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901e[0m/901e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2000[0m/2000 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901d[0m/901d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901c[0m/901c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981c[0m/981c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2803[0m/2803 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92md810[0m/d810 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981e[0m/981e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m210f[0m/210f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m4008[0m/4008 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901b[0m/901b [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981e[0m/981e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0900[0m/0900 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901e[0m/901e [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981b[0m/981b [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m3030[0m/3030 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901f[0m/901f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m981c[0m/981c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m1c40[0m/1c40 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m901c[0m/901c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7e9[0m/e7e9 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fd[0m/e7fd [OK]

LOGGER(AsmParser[show_difference]): Percentage of Correctness: 100.00%
LOGGER(Functions[define_label]): Define label .text
LOGGER(Functions[is_label]): Check if .text is a label
LOGGER(Functions[is_label]): .text is not a label
LOGGER(Functions[define_label]): Define label .syntax unified
LOGGER(Functions[is_label]): Check if .syntax unified is a label
LOGGER(Functions[is_label]): .syntax unified is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	67, "2.09"
LOGGER(Functions[is_label]): Check if .eabi_attribute	67, "2.09" is a label
LOGGER(Functions[is_label]): .eabi_attribute	67, "2.09" is not a label
LOGGER(Functions[define_label]): Define label .cpu	cortex-m0
LOGGER(Functions[is_label]): Check if .cpu	cortex-m0 is a label
LOGGER(Functions[is_label]): .cpu	cortex-m0 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	6, 12
LOGGER(Functions[is_label]): Check if .eabi_attribute	6, 12 is a label
LOGGER(Functions[is_label]): .eabi_attribute	6, 12 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	7, 77
LOGGER(Functions[is_label]): Check if .eabi_attribute	7, 77 is a label
LOGGER(Functions[is_label]): .eabi_attribute	7, 77 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	8, 0
LOGGER(Functions[is_label]): Check if .eabi_attribute	8, 0 is a label
LOGGER(Functions[is_label]): .eabi_attribute	8, 0 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	9, 1
LOGGER(Functions[is_label]): Check if .eabi_attribute	9, 1 is a label
LOGGER(Functions[is_label]): .eabi_attribute	9, 1 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	34, 0
LOGGER(Functions[is_label]): Check if .eabi_attribute	34, 0 is a label
LOGGER(Functions[is_label]): .eabi_attribute	34, 0 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	17, 1
LOGGER(Functions[is_label]): Check if .eabi_attribute	17, 1 is a label
LOGGER(Functions[is_label]): .eabi_attribute	17, 1 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	20, 1
LOGGER(Functions[is_label]): Check if .eabi_attribute	20, 1 is a label
LOGGER(Functions[is_label]): .eabi_attribute	20, 1 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	21, 1
LOGGER(Functions[is_label]): Check if .eabi_attribute	21, 1 is a label
LOGGER(Functions[is_label]): .eabi_attribute	21, 1 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	23, 3
LOGGER(Functions[is_label]): Check if .eabi_attribute	23, 3 is a label
LOGGER(Functions[is_label]): .eabi_attribute	23, 3 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	24, 1
LOGGER(Functions[is_label]): Check if .eabi_attribute	24, 1 is a label
LOGGER(Functions[is_label]): .eabi_attribute	24, 1 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	25, 1
LOGGER(Functions[is_label]): Check if .eabi_attribute	25, 1 is a label
LOGGER(Functions[is_label]): .eabi_attribute	25, 1 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	38, 1
LOGGER(Functions[is_label]): Check if .eabi_attribute	38, 1 is a label
LOGGER(Functions[is_label]): .eabi_attribute	38, 1 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	18, 4
LOGGER(Functions[is_label]): Check if .eabi_attribute	18, 4 is a label
LOGGER(Functions[is_label]): .eabi_attribute	18, 4 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	26, 2
LOGGER(Functions[is_label]): Check if .eabi_attribute	26, 2 is a label
LOGGER(Functions[is_label]): .eabi_attribute	26, 2 is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	14, 0
LOGGER(Functions[is_label]): Check if .eabi_attribute	14, 0 is a label
LOGGER(Functions[is_label]): .eabi_attribute	14, 0 is not a label
LOGGER(Functions[define_label]): Define label .file	"tty.c"
LOGGER(Functions[is_label]): Check if .file	"tty.c" is a label
LOGGER(Functions[is_label]): .file	"tty.c" is not a label
LOGGER(Functions[define_label]): Define label .globl	run
LOGGER(Functions[is_label]): Check if .globl	run is a label
LOGGER(Functions[is_label]): .globl	run is not a label
LOGGER(Functions[define_label]): Define label .p2align	1
LOGGER(Functions[is_label]): Check if .p2align	1 is a label
LOGGER(Functions[is_label]): .p2align	1 is not a label
LOGGER(Functions[define_label]): Define label .type	run,%function
LOGGER(Functions[is_label]): Check if .type	run,%function is a label
LOGGER(Functions[is_label]): .type	run,%function is not a label
LOGGER(Functions[define_label]): Define label .code	16
LOGGER(Functions[is_label]): Check if .code	16 is a label
LOGGER(Functions[is_label]): .code	16 is not a label
LOGGER(Functions[define_label]): Define label .thumb_func
LOGGER(Functions[is_label]): Check if .thumb_func is a label
LOGGER(Functions[is_label]): .thumb_func is not a label
LOGGER(Functions[define_label]): Define label .fnstart
LOGGER(Functions[is_label]): Check if .fnstart is a label
LOGGER(Functions[is_label]): .fnstart is not a label
LOGGER(Functions[define_label]): Define label .pad	#84
LOGGER(Functions[is_label]): Check if .pad	#84 is a label
LOGGER(Functions[is_label]): .pad	#84 is not a label
LOGGER(Functions[define_label]): Define label sub	sp, #84
LOGGER(Functions[is_label]): Check if sub	sp, #84 is a label
LOGGER(Functions[is_label]): sub	sp, #84 is not a label
LOGGER(Functions[define_label]): Define label @APP
LOGGER(Functions[is_label]): Check if @APP is a label
LOGGER(Functions[is_label]): @APP is not a label
LOGGER(Functions[define_label]): Define label sub	sp, #508
LOGGER(Functions[is_label]): Check if sub	sp, #508 is a label
LOGGER(Functions[is_label]): sub	sp, #508 is not a label
LOGGER(Functions[define_label]): Define label @NO_APP
LOGGER(Functions[is_label]): Check if @NO_APP is a label
LOGGER(Functions[is_label]): @NO_APP is not a label
LOGGER(Functions[define_label]): Define label @APP
LOGGER(Functions[is_label]): Check if @APP is a label
LOGGER(Functions[is_label]): @APP is not a label
LOGGER(Functions[define_label]): Define label sub	sp, #452
LOGGER(Functions[is_label]): Check if sub	sp, #452 is a label
LOGGER(Functions[is_label]): sub	sp, #452 is not a label
LOGGER(Functions[define_label]): Define label @NO_APP
LOGGER(Functions[is_label]): Check if @NO_APP is a label
LOGGER(Functions[is_label]): @NO_APP is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_1
LOGGER(Functions[is_label]): Check if b	.LBB0_1 is a label
LOGGER(Functions[is_label]): b	.LBB0_1 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_1:
LOGGER(Functions[is_label]): Check if .LBB0_1: is a label
LOGGER(Functions[is_label]): .LBB0_1: is a label
LOGGER(Functions[define_label]): Label .LBB0_1 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_2
LOGGER(Functions[is_label]): Check if b	.LBB0_2 is a label
LOGGER(Functions[is_label]): b	.LBB0_2 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_2:
LOGGER(Functions[is_label]): Check if .LBB0_2: is a label
LOGGER(Functions[is_label]): .LBB0_2: is a label
LOGGER(Functions[define_label]): Label .LBB0_2 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_3
LOGGER(Functions[is_label]): Check if b	.LBB0_3 is a label
LOGGER(Functions[is_label]): b	.LBB0_3 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_3:
LOGGER(Functions[is_label]): Check if .LBB0_3: is a label
LOGGER(Functions[is_label]): .LBB0_3: is a label
LOGGER(Functions[define_label]): Label .LBB0_3 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_4
LOGGER(Functions[is_label]): Check if b	.LBB0_4 is a label
LOGGER(Functions[is_label]): b	.LBB0_4 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_4:
LOGGER(Functions[is_label]): Check if .LBB0_4: is a label
LOGGER(Functions[is_label]): .LBB0_4: is a label
LOGGER(Functions[define_label]): Label .LBB0_4 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_5
LOGGER(Functions[is_label]): Check if b	.LBB0_5 is a label
LOGGER(Functions[is_label]): b	.LBB0_5 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_5:
LOGGER(Functions[is_label]): Check if .LBB0_5: is a label
LOGGER(Functions[is_label]): .LBB0_5: is a label
LOGGER(Functions[define_label]): Label .LBB0_5 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_6
LOGGER(Functions[is_label]): Check if b	.LBB0_6 is a label
LOGGER(Functions[is_label]): b	.LBB0_6 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_6:
LOGGER(Functions[is_label]): Check if .LBB0_6: is a label
LOGGER(Functions[is_label]): .LBB0_6: is a label
LOGGER(Functions[define_label]): Label .LBB0_6 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_7
LOGGER(Functions[is_label]): Check if b	.LBB0_7 is a label
LOGGER(Functions[is_label]): b	.LBB0_7 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_7:
LOGGER(Functions[is_label]): Check if .LBB0_7: is a label
LOGGER(Functions[is_label]): .LBB0_7: is a label
LOGGER(Functions[define_label]): Label .LBB0_7 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_8
LOGGER(Functions[is_label]): Check if b	.LBB0_8 is a label
LOGGER(Functions[is_label]): b	.LBB0_8 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_8:
LOGGER(Functions[is_label]): Check if .LBB0_8: is a label
LOGGER(Functions[is_label]): .LBB0_8: is a label
LOGGER(Functions[define_label]): Label .LBB0_8 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_9
LOGGER(Functions[is_label]): Check if b	.LBB0_9 is a label
LOGGER(Functions[is_label]): b	.LBB0_9 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_9:
LOGGER(Functions[is_label]): Check if .LBB0_9: is a label
LOGGER(Functions[is_label]): .LBB0_9: is a label
LOGGER(Functions[define_label]): Label .LBB0_9 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_10
LOGGER(Functions[is_label]): Check if b	.LBB0_10 is a label
LOGGER(Functions[is_label]): b	.LBB0_10 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_10:
LOGGER(Functions[is_label]): Check if .LBB0_10: is a label
LOGGER(Functions[is_label]): .LBB0_10: is a label
LOGGER(Functions[define_label]): Label .LBB0_10 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_11
LOGGER(Functions[is_label]): Check if b	.LBB0_11 is a label
LOGGER(Functions[is_label]): b	.LBB0_11 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_11:
LOGGER(Functions[is_label]): Check if .LBB0_11: is a label
LOGGER(Functions[is_label]): .LBB0_11: is a label
LOGGER(Functions[define_label]): Label .LBB0_11 defined
LOGGER(Functions[define_label]): Define label movs	r0, #80
LOGGER(Functions[is_label]): Check if movs	r0, #80 is a label
LOGGER(Functions[is_label]): movs	r0, #80 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #20]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #20] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #20] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_12
LOGGER(Functions[is_label]): Check if b	.LBB0_12 is a label
LOGGER(Functions[is_label]): b	.LBB0_12 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_12:
LOGGER(Functions[is_label]): Check if .LBB0_12: is a label
LOGGER(Functions[is_label]): .LBB0_12: is a label
LOGGER(Functions[define_label]): Label .LBB0_12 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_13
LOGGER(Functions[is_label]): Check if b	.LBB0_13 is a label
LOGGER(Functions[is_label]): b	.LBB0_13 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_13:
LOGGER(Functions[is_label]): Check if .LBB0_13: is a label
LOGGER(Functions[is_label]): .LBB0_13: is a label
LOGGER(Functions[define_label]): Label .LBB0_13 defined
LOGGER(Functions[define_label]): Define label movs	r0, #114
LOGGER(Functions[is_label]): Check if movs	r0, #114 is a label
LOGGER(Functions[is_label]): movs	r0, #114 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #20]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #20] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #20] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_14
LOGGER(Functions[is_label]): Check if b	.LBB0_14 is a label
LOGGER(Functions[is_label]): b	.LBB0_14 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_14:
LOGGER(Functions[is_label]): Check if .LBB0_14: is a label
LOGGER(Functions[is_label]): .LBB0_14: is a label
LOGGER(Functions[define_label]): Label .LBB0_14 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_15
LOGGER(Functions[is_label]): Check if b	.LBB0_15 is a label
LOGGER(Functions[is_label]): b	.LBB0_15 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_15:
LOGGER(Functions[is_label]): Check if .LBB0_15: is a label
LOGGER(Functions[is_label]): .LBB0_15: is a label
LOGGER(Functions[define_label]): Label .LBB0_15 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_16
LOGGER(Functions[is_label]): Check if b	.LBB0_16 is a label
LOGGER(Functions[is_label]): b	.LBB0_16 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_16:
LOGGER(Functions[is_label]): Check if .LBB0_16: is a label
LOGGER(Functions[is_label]): .LBB0_16: is a label
LOGGER(Functions[define_label]): Label .LBB0_16 defined
LOGGER(Functions[define_label]): Define label movs	r0, #111
LOGGER(Functions[is_label]): Check if movs	r0, #111 is a label
LOGGER(Functions[is_label]): movs	r0, #111 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #20]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #20] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #20] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_17
LOGGER(Functions[is_label]): Check if b	.LBB0_17 is a label
LOGGER(Functions[is_label]): b	.LBB0_17 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_17:
LOGGER(Functions[is_label]): Check if .LBB0_17: is a label
LOGGER(Functions[is_label]): .LBB0_17: is a label
LOGGER(Functions[define_label]): Label .LBB0_17 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_18
LOGGER(Functions[is_label]): Check if b	.LBB0_18 is a label
LOGGER(Functions[is_label]): b	.LBB0_18 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_18:
LOGGER(Functions[is_label]): Check if .LBB0_18: is a label
LOGGER(Functions[is_label]): .LBB0_18: is a label
LOGGER(Functions[define_label]): Label .LBB0_18 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_19
LOGGER(Functions[is_label]): Check if b	.LBB0_19 is a label
LOGGER(Functions[is_label]): b	.LBB0_19 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_19:
LOGGER(Functions[is_label]): Check if .LBB0_19: is a label
LOGGER(Functions[is_label]): .LBB0_19: is a label
LOGGER(Functions[define_label]): Label .LBB0_19 defined
LOGGER(Functions[define_label]): Define label movs	r0, #106
LOGGER(Functions[is_label]): Check if movs	r0, #106 is a label
LOGGER(Functions[is_label]): movs	r0, #106 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #20]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #20] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #20] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_20
LOGGER(Functions[is_label]): Check if b	.LBB0_20 is a label
LOGGER(Functions[is_label]): b	.LBB0_20 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_20:
LOGGER(Functions[is_label]): Check if .LBB0_20: is a label
LOGGER(Functions[is_label]): .LBB0_20: is a label
LOGGER(Functions[define_label]): Label .LBB0_20 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_21
LOGGER(Functions[is_label]): Check if b	.LBB0_21 is a label
LOGGER(Functions[is_label]): b	.LBB0_21 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_21:
LOGGER(Functions[is_label]): Check if .LBB0_21: is a label
LOGGER(Functions[is_label]): .LBB0_21: is a label
LOGGER(Functions[define_label]): Label .LBB0_21 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_22
LOGGER(Functions[is_label]): Check if b	.LBB0_22 is a label
LOGGER(Functions[is_label]): b	.LBB0_22 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_22:
LOGGER(Functions[is_label]): Check if .LBB0_22: is a label
LOGGER(Functions[is_label]): .LBB0_22: is a label
LOGGER(Functions[define_label]): Label .LBB0_22 defined
LOGGER(Functions[define_label]): Define label movs	r0, #101
LOGGER(Functions[is_label]): Check if movs	r0, #101 is a label
LOGGER(Functions[is_label]): movs	r0, #101 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #20]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #20] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #20] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_23
LOGGER(Functions[is_label]): Check if b	.LBB0_23 is a label
LOGGER(Functions[is_label]): b	.LBB0_23 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_23:
LOGGER(Functions[is_label]): Check if .LBB0_23: is a label
LOGGER(Functions[is_label]): .LBB0_23: is a label
LOGGER(Functions[define_label]): Label .LBB0_23 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_24
LOGGER(Functions[is_label]): Check if b	.LBB0_24 is a label
LOGGER(Functions[is_label]): b	.LBB0_24 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_24:
LOGGER(Functions[is_label]): Check if .LBB0_24: is a label
LOGGER(Functions[is_label]): .LBB0_24: is a label
LOGGER(Functions[define_label]): Label .LBB0_24 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_25
LOGGER(Functions[is_label]): Check if b	.LBB0_25 is a label
LOGGER(Functions[is_label]): b	.LBB0_25 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_25:
LOGGER(Functions[is_label]): Check if .LBB0_25: is a label
LOGGER(Functions[is_label]): .LBB0_25: is a label
LOGGER(Functions[define_label]): Label .LBB0_25 defined
LOGGER(Functions[define_label]): Define label movs	r0, #116
LOGGER(Functions[is_label]): Check if movs	r0, #116 is a label
LOGGER(Functions[is_label]): movs	r0, #116 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #20]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #20] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #20] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_26
LOGGER(Functions[is_label]): Check if b	.LBB0_26 is a label
LOGGER(Functions[is_label]): b	.LBB0_26 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_26:
LOGGER(Functions[is_label]): Check if .LBB0_26: is a label
LOGGER(Functions[is_label]): .LBB0_26: is a label
LOGGER(Functions[define_label]): Label .LBB0_26 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_27
LOGGER(Functions[is_label]): Check if b	.LBB0_27 is a label
LOGGER(Functions[is_label]): b	.LBB0_27 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_27:
LOGGER(Functions[is_label]): Check if .LBB0_27: is a label
LOGGER(Functions[is_label]): .LBB0_27: is a label
LOGGER(Functions[define_label]): Label .LBB0_27 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_28
LOGGER(Functions[is_label]): Check if b	.LBB0_28 is a label
LOGGER(Functions[is_label]): b	.LBB0_28 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_28:
LOGGER(Functions[is_label]): Check if .LBB0_28: is a label
LOGGER(Functions[is_label]): .LBB0_28: is a label
LOGGER(Functions[define_label]): Label .LBB0_28 defined
LOGGER(Functions[define_label]): Define label movs	r0, #32
LOGGER(Functions[is_label]): Check if movs	r0, #32 is a label
LOGGER(Functions[is_label]): movs	r0, #32 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #20]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #20] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #20] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_29
LOGGER(Functions[is_label]): Check if b	.LBB0_29 is a label
LOGGER(Functions[is_label]): b	.LBB0_29 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_29:
LOGGER(Functions[is_label]): Check if .LBB0_29: is a label
LOGGER(Functions[is_label]): .LBB0_29: is a label
LOGGER(Functions[define_label]): Label .LBB0_29 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_30
LOGGER(Functions[is_label]): Check if b	.LBB0_30 is a label
LOGGER(Functions[is_label]): b	.LBB0_30 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_30:
LOGGER(Functions[is_label]): Check if .LBB0_30: is a label
LOGGER(Functions[is_label]): .LBB0_30: is a label
LOGGER(Functions[define_label]): Label .LBB0_30 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_31
LOGGER(Functions[is_label]): Check if b	.LBB0_31 is a label
LOGGER(Functions[is_label]): b	.LBB0_31 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_31:
LOGGER(Functions[is_label]): Check if .LBB0_31: is a label
LOGGER(Functions[is_label]): .LBB0_31: is a label
LOGGER(Functions[define_label]): Label .LBB0_31 defined
LOGGER(Functions[define_label]): Define label movs	r0, #80
LOGGER(Functions[is_label]): Check if movs	r0, #80 is a label
LOGGER(Functions[is_label]): movs	r0, #80 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #20]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #20] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #20] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_32
LOGGER(Functions[is_label]): Check if b	.LBB0_32 is a label
LOGGER(Functions[is_label]): b	.LBB0_32 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_32:
LOGGER(Functions[is_label]): Check if .LBB0_32: is a label
LOGGER(Functions[is_label]): .LBB0_32: is a label
LOGGER(Functions[define_label]): Label .LBB0_32 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_33
LOGGER(Functions[is_label]): Check if b	.LBB0_33 is a label
LOGGER(Functions[is_label]): b	.LBB0_33 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_33:
LOGGER(Functions[is_label]): Check if .LBB0_33: is a label
LOGGER(Functions[is_label]): .LBB0_33: is a label
LOGGER(Functions[define_label]): Label .LBB0_33 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_34
LOGGER(Functions[is_label]): Check if b	.LBB0_34 is a label
LOGGER(Functions[is_label]): b	.LBB0_34 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_34:
LOGGER(Functions[is_label]): Check if .LBB0_34: is a label
LOGGER(Functions[is_label]): .LBB0_34: is a label
LOGGER(Functions[define_label]): Label .LBB0_34 defined
LOGGER(Functions[define_label]): Define label movs	r0, #65
LOGGER(Functions[is_label]): Check if movs	r0, #65 is a label
LOGGER(Functions[is_label]): movs	r0, #65 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #20]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #20] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #20] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_35
LOGGER(Functions[is_label]): Check if b	.LBB0_35 is a label
LOGGER(Functions[is_label]): b	.LBB0_35 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_35:
LOGGER(Functions[is_label]): Check if .LBB0_35: is a label
LOGGER(Functions[is_label]): .LBB0_35: is a label
LOGGER(Functions[define_label]): Label .LBB0_35 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_36
LOGGER(Functions[is_label]): Check if b	.LBB0_36 is a label
LOGGER(Functions[is_label]): b	.LBB0_36 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_36:
LOGGER(Functions[is_label]): Check if .LBB0_36: is a label
LOGGER(Functions[is_label]): .LBB0_36: is a label
LOGGER(Functions[define_label]): Label .LBB0_36 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_37
LOGGER(Functions[is_label]): Check if b	.LBB0_37 is a label
LOGGER(Functions[is_label]): b	.LBB0_37 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_37:
LOGGER(Functions[is_label]): Check if .LBB0_37: is a label
LOGGER(Functions[is_label]): .LBB0_37: is a label
LOGGER(Functions[define_label]): Label .LBB0_37 defined
LOGGER(Functions[define_label]): Define label movs	r0, #82
LOGGER(Functions[is_label]): Check if movs	r0, #82 is a label
LOGGER(Functions[is_label]): movs	r0, #82 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #20]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #20] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #20] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_38
LOGGER(Functions[is_label]): Check if b	.LBB0_38 is a label
LOGGER(Functions[is_label]): b	.LBB0_38 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_38:
LOGGER(Functions[is_label]): Check if .LBB0_38: is a label
LOGGER(Functions[is_label]): .LBB0_38: is a label
LOGGER(Functions[define_label]): Label .LBB0_38 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_39
LOGGER(Functions[is_label]): Check if b	.LBB0_39 is a label
LOGGER(Functions[is_label]): b	.LBB0_39 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_39:
LOGGER(Functions[is_label]): Check if .LBB0_39: is a label
LOGGER(Functions[is_label]): .LBB0_39: is a label
LOGGER(Functions[define_label]): Label .LBB0_39 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_40
LOGGER(Functions[is_label]): Check if b	.LBB0_40 is a label
LOGGER(Functions[is_label]): b	.LBB0_40 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_40:
LOGGER(Functions[is_label]): Check if .LBB0_40: is a label
LOGGER(Functions[is_label]): .LBB0_40: is a label
LOGGER(Functions[define_label]): Label .LBB0_40 defined
LOGGER(Functions[define_label]): Define label movs	r0, #77
LOGGER(Functions[is_label]): Check if movs	r0, #77 is a label
LOGGER(Functions[is_label]): movs	r0, #77 is not a label
LOGGER(Functions[define_label]): Define label str	r0, [sp, #20]
LOGGER(Functions[is_label]): Check if str	r0, [sp, #20] is a label
LOGGER(Functions[is_label]): str	r0, [sp, #20] is not a label
LOGGER(Functions[define_label]): Define label b	.LBB0_41
LOGGER(Functions[is_label]): Check if b	.LBB0_41 is a label
LOGGER(Functions[is_label]): b	.LBB0_41 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_41:
LOGGER(Functions[is_label]): Check if .LBB0_41: is a label
LOGGER(Functions[is_label]): .LBB0_41: is a label
LOGGER(Functions[define_label]): Label .LBB0_41 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_42
LOGGER(Functions[is_label]): Check if b	.LBB0_42 is a label
LOGGER(Functions[is_label]): b	.LBB0_42 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_42:
LOGGER(Functions[is_label]): Check if .LBB0_42: is a label
LOGGER(Functions[is_label]): .LBB0_42: is a label
LOGGER(Functions[define_label]): Label .LBB0_42 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_43
LOGGER(Functions[is_label]): Check if b	.LBB0_43 is a label
LOGGER(Functions[is_label]): b	.LBB0_43 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_43:
LOGGER(Functions[is_label]): Check if .LBB0_43: is a label
LOGGER(Functions[is_label]): .LBB0_43: is a label
LOGGER(Functions[define_label]): Label .LBB0_43 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_44
LOGGER(Functions[is_label]): Check if b	.LBB0_44 is a label
LOGGER(Functions[is_label]): b	.LBB0_44 is not a label
LOGGER(Functions[define_label]): Define label .LBB0_44:
LOGGER(Functions[is_label]): Check if .LBB0_44: is a label
LOGGER(Functions[is_label]): .LBB0_44: is a label
LOGGER(Functions[define_label]): Label .LBB0_44 defined
LOGGER(Functions[define_label]): Define label b	.LBB0_44
LOGGER(Functions[is_label]): Check if b	.LBB0_44 is a label
LOGGER(Functions[is_label]): b	.LBB0_44 is not a label
LOGGER(Functions[define_label]): Define label .Lfunc_end0:
LOGGER(Functions[is_label]): Check if .Lfunc_end0: is a label
LOGGER(Functions[is_label]): .Lfunc_end0: is a label
LOGGER(Functions[define_label]): Label .Lfunc_end0 defined
LOGGER(Functions[define_label]): Define label .size	run, .Lfunc_end0-run
LOGGER(Functions[is_label]): Check if .size	run, .Lfunc_end0-run is a label
LOGGER(Functions[is_label]): .size	run, .Lfunc_end0-run is not a label
LOGGER(Functions[define_label]): Define label .cantunwind
LOGGER(Functions[is_label]): Check if .cantunwind is a label
LOGGER(Functions[is_label]): .cantunwind is not a label
LOGGER(Functions[define_label]): Define label .fnend
LOGGER(Functions[is_label]): Check if .fnend is a label
LOGGER(Functions[is_label]): .fnend is not a label
LOGGER(Functions[define_label]): Define label .ident	"clang version 8.0.1-9 (tags/RELEASE_801/final)"
LOGGER(Functions[is_label]): Check if .ident	"clang version 8.0.1-9 (tags/RELEASE_801/final)" is a label
LOGGER(Functions[is_label]): .ident	"clang version 8.0.1-9 (tags/RELEASE_801/final)" is not a label
LOGGER(Functions[define_label]): Define label .section	".note.GNU-stack","",%progbits
LOGGER(Functions[is_label]): Check if .section	".note.GNU-stack","",%progbits is a label
LOGGER(Functions[is_label]): .section	".note.GNU-stack","",%progbits is not a label
LOGGER(Functions[define_label]): Define label .addrsig
LOGGER(Functions[is_label]): Check if .addrsig is a label
LOGGER(Functions[is_label]): .addrsig is not a label
LOGGER(Functions[define_label]): Define label .eabi_attribute	30, 6
LOGGER(Functions[is_label]): Check if .eabi_attribute	30, 6 is a label
LOGGER(Functions[is_label]): .eabi_attribute	30, 6 is not a label
LOGGER(Functions[set_number_of_instructions_labels]): Set number of instructions labels to 70
LOGGER(Functions[set_number_of_labels]): Set number of labels to 153
LOGGER(AsmParser[convert_into_binary]): ['SUB', 'sp,', '#84']
LOGGER(AsmParser[call_function]): Calling sub_imm7 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 21: 0010101
LOGGER(AsmInstructions[instruction_sp_imm7]): 1011 00001 0010101
LOGGER(AsmParser[convert_into_binary]): ['SUB', 'sp,', '#508']
LOGGER(AsmParser[call_function]): Calling sub_imm7 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 127: 1111111
LOGGER(AsmInstructions[instruction_sp_imm7]): 1011 00001 1111111
LOGGER(AsmParser[convert_into_binary]): ['SUB', 'sp,', '#452']
LOGGER(AsmParser[call_function]): Calling sub_imm7 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_immediate]): Get immediate from 113: 1110001
LOGGER(AsmInstructions[instruction_sp_imm7]): 1011 00001 1110001
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_1']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_2']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_3']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_4']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_5']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_6']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_7']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_8']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_9']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_10']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_11']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#80']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 80: 01010000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 01010000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#20']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 5: 00000101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000101 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_12']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_13']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#114']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 114: 01110010
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 01110010
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#20']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 5: 00000101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000101 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_14']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_15']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_16']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#111']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 111: 01101111
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 01101111
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#20']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 5: 00000101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000101 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_17']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_18']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_19']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#106']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 106: 01101010
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 01101010
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#20']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 5: 00000101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000101 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_20']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_21']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_22']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#101']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 101: 01100101
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 01100101
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#20']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 5: 00000101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000101 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_23']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_24']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_25']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#116']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 116: 01110100
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 01110100
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#20']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 5: 00000101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000101 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_26']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_27']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_28']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#32']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 32: 00100000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00100000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#20']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 5: 00000101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000101 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_29']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_30']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_31']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#80']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 80: 01010000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 01010000
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#20']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 5: 00000101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000101 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_32']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_33']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_34']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#65']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 65: 01000001
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 01000001
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#20']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 5: 00000101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000101 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_35']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_36']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_37']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#82']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 82: 01010010
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 01010010
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#20']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 5: 00000101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000101 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_38']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_39']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_40']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#77']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 77: 01001101
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 01001101
LOGGER(AsmParser[convert_into_binary]): ['STR', 'r0,', '#20']
LOGGER(AsmParser[call_function]): Calling str_Rt_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 5: 00000101
LOGGER(AsmInstructions[instruction_rt_imm8]): 1001 0 00000101 000
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_41']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_42']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_43']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_44']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111110
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111110
LOGGER(AsmParser[convert_into_binary]): ['B', '.LBB0_44']
LOGGER(AsmParser[call_function]): Calling b with OrderedDict([('expression', <Parameter "expression: list">), ('label_source', <Parameter "label_source: int">)])
LOGGER(AsmInstructions[get_immediate_negative]): Get immediate from 0: 11111111101
LOGGER(AsmInstructions[unconditional_branch]): 11100 11111111101
LOGGER(AsmParser[binary_to_hexa]): Converting binary to hexadecimal
LOGGER(AsmParser[binary_to_hexa]): ['b095', 'b0ff', 'b0f1', 'e7fe', 'e7fe', 'e7fe', 'e7fe', 'e7fe', 'e7fe', 'e7fe', 'e7fe', 'e7fe', 'e7fe', 'e7fe', '2050', '9005', 'e7fe', 'e7fe', '2072', '9005', 'e7fe', 'e7fe', 'e7fe', '206f', '9005', 'e7fe', 'e7fe', 'e7fe', '206a', '9005', 'e7fe', 'e7fe', 'e7fe', '2065', '9005', 'e7fe', 'e7fe', 'e7fe', '2074', '9005', 'e7fe', 'e7fe', 'e7fe', '2020', '9005', 'e7fe', 'e7fe', 'e7fe', '2050', '9005', 'e7fe', 'e7fe', 'e7fe', '2041', '9005', 'e7fe', 'e7fe', 'e7fe', '2052', '9005', 'e7fe', 'e7fe', 'e7fe', '204d', '9005', 'e7fe', 'e7fe', 'e7fe', 'e7fe', 'e7fd']
LOGGER(AsmParser[save_hexa_as_bin]): Saving the hexadecimal in ../../../src/tests/resources/output_binaries/other/tty.bin
LOGGER(AsmReader[read_bin_file]): Reading ../../../src/tests/resources/output_binaries/other/tty.bin
LOGGER(AsmParser[show_difference]): Expected/Actual: [92mb095[0m/b095 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92mb0ff[0m/b0ff [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92mb0f1[0m/b0f1 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2050[0m/2050 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9005[0m/9005 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2072[0m/2072 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9005[0m/9005 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m206f[0m/206f [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9005[0m/9005 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m206a[0m/206a [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9005[0m/9005 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2065[0m/2065 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9005[0m/9005 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2074[0m/2074 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9005[0m/9005 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2020[0m/2020 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9005[0m/9005 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2050[0m/2050 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9005[0m/9005 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2041[0m/2041 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9005[0m/9005 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2052[0m/2052 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9005[0m/9005 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m204d[0m/204d [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m9005[0m/9005 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fe[0m/e7fe [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92me7fd[0m/e7fd [OK]

LOGGER(AsmParser[show_difference]): Percentage of Correctness: 100.00%
LOGGER(Functions[define_label]): Define label movs r0, #0
LOGGER(Functions[is_label]): Check if movs r0, #0 is a label
LOGGER(Functions[is_label]): movs r0, #0 is not a label
LOGGER(Functions[define_label]): Define label movs r1, #1
LOGGER(Functions[is_label]): Check if movs r1, #1 is a label
LOGGER(Functions[is_label]): movs r1, #1 is not a label
LOGGER(Functions[define_label]): Define label movs r2, #170
LOGGER(Functions[is_label]): Check if movs r2, #170 is a label
LOGGER(Functions[is_label]): movs r2, #170 is not a label
LOGGER(Functions[define_label]): Define label movs r3, #255
LOGGER(Functions[is_label]): Check if movs r3, #255 is a label
LOGGER(Functions[is_label]): movs r3, #255 is not a label
LOGGER(Functions[define_label]): Define label lsls r4, r2, #1
LOGGER(Functions[is_label]): Check if lsls r4, r2, #1 is a label
LOGGER(Functions[is_label]): lsls r4, r2, #1 is not a label
LOGGER(Functions[define_label]): Define label lsrs r5, r2, #1
LOGGER(Functions[is_label]): Check if lsrs r5, r2, #1 is a label
LOGGER(Functions[is_label]): lsrs r5, r2, #1 is not a label
LOGGER(Functions[define_label]): Define label subs r6, r0, #5
LOGGER(Functions[is_label]): Check if subs r6, r0, #5 is a label
LOGGER(Functions[is_label]): subs r6, r0, #5 is not a label
LOGGER(Functions[define_label]): Define label asrs r6, r6, #1
LOGGER(Functions[is_label]): Check if asrs r6, r6, #1 is a label
LOGGER(Functions[is_label]): asrs r6, r6, #1 is not a label
LOGGER(Functions[define_label]): Define label adds r7, r6, r1
LOGGER(Functions[is_label]): Check if adds r7, r6, r1 is a label
LOGGER(Functions[is_label]): adds r7, r6, r1 is not a label
LOGGER(Functions[set_number_of_instructions_labels]): Set number of instructions labels to 9
LOGGER(Functions[set_number_of_labels]): Set number of labels to 9
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#0']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00000000
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r1,', '#1']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 00000001
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 001 00000001
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r2,', '#170']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_immediate]): Get immediate from 170: 10101010
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 010 10101010
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r3,', '#255']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r3,: 011
LOGGER(AsmInstructions[get_immediate]): Get immediate from 255: 11111111
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 011 11111111
LOGGER(AsmParser[convert_into_binary]): ['LSLS', 'r4,', 'r2,', '#1']
LOGGER(AsmParser[call_function]): Calling lsls_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r4,: 100
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 00001
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 000 00001 010 100
LOGGER(AsmParser[convert_into_binary]): ['LSRS', 'r5,', 'r2,', '#1']
LOGGER(AsmParser[call_function]): Calling lsrs_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r5,: 101
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 00001
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 001 00001 010 101
LOGGER(AsmParser[convert_into_binary]): ['SUBS', 'r6,', 'r0,', '#5']
LOGGER(AsmParser[call_function]): Calling subs_Rd_Rn_imm3 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r6,: 110
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 5: 101
LOGGER(AsmInstructions[instruction_imm3_rd_rn]): 00 01111 101 000 110
LOGGER(AsmParser[convert_into_binary]): ['ASRS', 'r6,', 'r6,', '#1']
LOGGER(AsmParser[call_function]): Calling asrs_Rd_Rm_imm5 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r6,: 110
LOGGER(AsmInstructions[get_register_number]): Get register number from r6,: 110
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 00001
LOGGER(AsmInstructions[instruction_imm5_rd_rm]): 00 010 00001 110 110
LOGGER(AsmParser[convert_into_binary]): ['ADDS', 'r7,', 'r6,', 'r1']
LOGGER(AsmParser[call_function]): Calling adds_Rd_Rn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r7,: 111
LOGGER(AsmInstructions[get_register_number]): Get register number from r6,: 110
LOGGER(AsmInstructions[get_register_number]): Get register number from r1: 001
LOGGER(AsmInstructions[instruction_rm_rd_rn]): 00 01100 001 110 111
LOGGER(AsmParser[binary_to_hexa]): Converting binary to hexadecimal
LOGGER(AsmParser[binary_to_hexa]): ['2000', '2101', '22aa', '23ff', '0054', '0855', '1f46', '1076', '1877']
LOGGER(AsmParser[save_hexa_as_bin]): Saving the hexadecimal in ../../../src/tests/resources/output_binaries/shift_add_sub_mov/1-4_instructions.bin
LOGGER(AsmReader[read_bin_file]): Reading ../../../src/tests/resources/output_binaries/shift_add_sub_mov/1-4_instructions.bin
LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2000[0m/2000 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2101[0m/2101 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m22aa[0m/22aa [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m23ff[0m/23ff [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0054[0m/0054 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m0855[0m/0855 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m1f46[0m/1f46 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m1076[0m/1076 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m1877[0m/1877 [OK]

LOGGER(AsmParser[show_difference]): Percentage of Correctness: 100.00%
LOGGER(Functions[define_label]): Define label movs r0, #0
LOGGER(Functions[is_label]): Check if movs r0, #0 is a label
LOGGER(Functions[is_label]): movs r0, #0 is not a label
LOGGER(Functions[define_label]): Define label movs r1, #1
LOGGER(Functions[is_label]): Check if movs r1, #1 is a label
LOGGER(Functions[is_label]): movs r1, #1 is not a label
LOGGER(Functions[define_label]): Define label movs r2, #170
LOGGER(Functions[is_label]): Check if movs r2, #170 is a label
LOGGER(Functions[is_label]): movs r2, #170 is not a label
LOGGER(Functions[define_label]): Define label movs r3, #255
LOGGER(Functions[is_label]): Check if movs r3, #255 is a label
LOGGER(Functions[is_label]): movs r3, #255 is not a label
LOGGER(Functions[define_label]): Define label subs r4, r3, r2
LOGGER(Functions[is_label]): Check if subs r4, r3, r2 is a label
LOGGER(Functions[is_label]): subs r4, r3, r2 is not a label
LOGGER(Functions[define_label]): Define label adds r5, r2, #5
LOGGER(Functions[is_label]): Check if adds r5, r2, #5 is a label
LOGGER(Functions[is_label]): adds r5, r2, #5 is not a label
LOGGER(Functions[define_label]): Define label movs r6, #179
LOGGER(Functions[is_label]): Check if movs r6, #179 is a label
LOGGER(Functions[is_label]): movs r6, #179 is not a label
LOGGER(Functions[set_number_of_instructions_labels]): Set number of instructions labels to 7
LOGGER(Functions[set_number_of_labels]): Set number of labels to 7
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r0,', '#0']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r0,: 000
LOGGER(AsmInstructions[get_immediate]): Get immediate from 0: 00000000
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 000 00000000
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r1,', '#1']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r1,: 001
LOGGER(AsmInstructions[get_immediate]): Get immediate from 1: 00000001
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 001 00000001
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r2,', '#170']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_immediate]): Get immediate from 170: 10101010
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 010 10101010
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r3,', '#255']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r3,: 011
LOGGER(AsmInstructions[get_immediate]): Get immediate from 255: 11111111
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 011 11111111
LOGGER(AsmParser[convert_into_binary]): ['SUBS', 'r4,', 'r3,', 'r2']
LOGGER(AsmParser[call_function]): Calling subs_Rd_Rn_Rm with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r4,: 100
LOGGER(AsmInstructions[get_register_number]): Get register number from r3,: 011
LOGGER(AsmInstructions[get_register_number]): Get register number from r2: 010
LOGGER(AsmInstructions[instruction_rm_rd_rn]): 00 01101 010 011 100
LOGGER(AsmParser[convert_into_binary]): ['ADDS', 'r5,', 'r2,', '#5']
LOGGER(AsmParser[call_function]): Calling adds_Rd_Rn_imm3 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r5,: 101
LOGGER(AsmInstructions[get_register_number]): Get register number from r2,: 010
LOGGER(AsmInstructions[get_immediate]): Get immediate from 5: 101
LOGGER(AsmInstructions[instruction_imm3_rd_rn]): 00 01110 101 010 101
LOGGER(AsmParser[convert_into_binary]): ['MOVS', 'r6,', '#179']
LOGGER(AsmParser[call_function]): Calling movs_Rd_imm8 with OrderedDict([('expression', <Parameter "expression: list">)])
LOGGER(AsmInstructions[get_register_number]): Get register number from r6,: 110
LOGGER(AsmInstructions[get_immediate]): Get immediate from 179: 10110011
LOGGER(AsmInstructions[instruction_rd_imm8]): 00 100 110 10110011
LOGGER(AsmParser[binary_to_hexa]): Converting binary to hexadecimal
LOGGER(AsmParser[binary_to_hexa]): ['2000', '2101', '22aa', '23ff', '1a9c', '1d55', '26b3']
LOGGER(AsmParser[save_hexa_as_bin]): Saving the hexadecimal in ../../../src/tests/resources/output_binaries/shift_add_sub_mov/5-8_instructions.bin
LOGGER(AsmReader[read_bin_file]): Reading ../../../src/tests/resources/output_binaries/shift_add_sub_mov/5-8_instructions.bin
LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2000[0m/2000 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m2101[0m/2101 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m22aa[0m/22aa [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m23ff[0m/23ff [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m1a9c[0m/1a9c [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m1d55[0m/1d55 [OK]

LOGGER(AsmParser[show_difference]): Expected/Actual: [92m26b3[0m/26b3 [OK]

LOGGER(AsmParser[show_difference]): Percentage of Correctness: 100.00%
